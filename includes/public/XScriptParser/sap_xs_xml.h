// Generated by SAP AFX Compiler (Tue Mar 10 11:04:33 CET 2015)

#ifndef SAP_XS_XML_H
#define SAP_XS_XML_H

#include "sap_xs_runtime.h"

@class XS_XmlAttribute;
@class XS_XmlAttributeList;
@class XS_XmlNode;
@class XS_XmlNodeList;
@class XS_XmlComment;
@class XS_XmlCommentList;
@class XS_XmlDocument;
@class XS_XmlElement;
@class XS_XmlElementList;
@class XS_XmlException;
@class XS_XmlName;
@class XS_XmlParser;
@class XS_XmlText;

@interface XS_XmlAttribute : NSObject
{
    @private NSString* name_;
    @private NSString* nsPrefix_;
    @private NSString* localName_;
    @private NSString* value_;
}
/* public */ @property (strong) NSString* name;
/* public */ @property (strong) NSString* nsPrefix;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* value;
/* private */ - (id) init;
/* public */ + (XS_XmlAttribute*) new;
/* public */ - (NSString*) name;
/* public */ - (void) setName :(NSString*)value;
/* public */ - (NSString*) nsPrefix;
/* public */ - (void) setNsPrefix :(NSString*)value;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) value;
/* public */ - (void) setValue :(NSString*)value;
/* public */ + (XS_XmlAttribute*) withName :(NSString*)param_name;
/* public */ + (XS_XmlAttribute*) withQName :(XS_XmlName*)param_name;
/* public */ - (XS_XmlAttribute*) andValue :(NSString*)param_value;
/* private */ + (XS_XmlAttribute*) DC1 :(NSString*)p1 :(NSString*)p2 :(NSString*)p3;
@end

@interface XS_XmlAttributeList : XS_ListBase
+ (XS_XmlAttributeList*) new;
/* public */ - (void) privateInit;
+ (XS_XmlAttributeList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_XmlAttributeList*) add :(XS_XmlAttribute*)item;
/* public */ - (void) addAll :(XS_XmlAttributeList*)other;
/* public */ - (XS_XmlAttribute*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_XmlAttribute*)item;
/* public */ - (xs_boolean) has :(XS_XmlAttribute*)item;
/* public */ - (xs_int) firstIndexOf :(XS_XmlAttribute*)item;
/* public */ - (xs_int) lastIndexOf :(XS_XmlAttribute*)item;
/* public */ - (void) insert :(xs_int)index :(XS_XmlAttribute*)item;
/* public */ - (xs_boolean) remove :(XS_XmlAttribute*)item;
/* public */ - (XS_XmlAttributeList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_XmlAttributeList*) share :(XS_ListBase*)list;
@end

@interface XS_XmlNode : NSObject
{
    @protected xs_int type_;
}
/* public */ @property (readonly) xs_int type;
/* private */ - (id) init;
/* public */ + (XS_XmlNode*) new;
/* public */ - (xs_int) type;
@end

#define XS_XmlNode_TYPE_COMMENT 1
#define XS_XmlNode_TYPE_ELEMENT 2
#define XS_XmlNode_TYPE_TEXT 3

@interface XS_XmlNodeList : XS_ListBase
+ (XS_XmlNodeList*) new;
/* public */ - (void) privateInit;
+ (XS_XmlNodeList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_XmlNodeList*) add :(XS_XmlNode*)item;
/* public */ - (void) addAll :(XS_XmlNodeList*)other;
/* public */ - (XS_XmlNode*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_XmlNode*)item;
/* public */ - (xs_boolean) has :(XS_XmlNode*)item;
/* public */ - (xs_int) firstIndexOf :(XS_XmlNode*)item;
/* public */ - (xs_int) lastIndexOf :(XS_XmlNode*)item;
/* public */ - (void) insert :(xs_int)index :(XS_XmlNode*)item;
/* public */ - (xs_boolean) remove :(XS_XmlNode*)item;
/* public */ - (XS_XmlNodeList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_XmlNodeList*) share :(XS_ListBase*)list;
@end

@interface XS_XmlComment : XS_XmlNode
{
    @private NSString* text_;
}
/* public */ @property (strong) NSString* text;
/* public */ @property (readonly) xs_int type;
/* private */ - (id) init;
/* public */ + (XS_XmlComment*) new;
/* public */ - (NSString*) text;
/* public */ - (void) setText :(NSString*)value;
/* public */ - (xs_int) type;
/* public */ + (XS_XmlComment*) withText :(NSString*)param_text;
/* private */ + (XS_XmlComment*) DC1 :(NSString*)p1;
@end

@interface XS_XmlCommentList : XS_ListBase
+ (XS_XmlCommentList*) new;
/* public */ - (void) privateInit;
+ (XS_XmlCommentList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_XmlCommentList*) add :(XS_XmlComment*)item;
/* public */ - (void) addAll :(XS_XmlCommentList*)other;
/* public */ - (XS_XmlComment*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_XmlComment*)item;
/* public */ - (xs_boolean) has :(XS_XmlComment*)item;
/* public */ - (xs_int) firstIndexOf :(XS_XmlComment*)item;
/* public */ - (xs_int) lastIndexOf :(XS_XmlComment*)item;
/* public */ - (void) insert :(xs_int)index :(XS_XmlComment*)item;
/* public */ - (xs_boolean) remove :(XS_XmlComment*)item;
/* public */ - (XS_XmlCommentList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_XmlCommentList*) share :(XS_ListBase*)list;
@end

@interface XS_XmlDocument : NSObject
{
    @private NSString* declaration_;
    @private XS_XmlElement* rootElement_;
}
/* public */ @property (strong) NSString* declaration;
/* public */ @property (strong) XS_XmlElement* rootElement;
/* private */ - (id) init;
/* public */ + (XS_XmlDocument*) new;
/* public */ - (NSString*) declaration;
/* public */ - (void) setDeclaration :(NSString*)value;
/* public */ - (XS_XmlElement*) rootElement;
/* public */ - (void) setRootElement :(XS_XmlElement*)value;
/* public */ + (XS_XmlDocument*) parse :(NSString*)xml;
/* public */ + (XS_XmlDocument*) parseMixed :(NSString*)xml :(xs_boolean)mixed;
/* public */ - (NSString*) toString;
@end

@interface XS_XmlElement : XS_XmlNode
{
    @private xs_boolean isEmpty_;
    @private xs_boolean hasElements_;
    @private XS_XmlAttributeList* my_attributes;
    @private XS_XmlNodeList* my_childNodes;
    @private NSString* name_;
    @private NSString* nsPrefix_;
    @private NSString* localName_;
}
/* internal */ @property xs_boolean isEmpty;
/* internal */ @property xs_boolean hasElements;
/* public */ @property (strong) NSString* name;
/* public */ @property (strong) NSString* nsPrefix;
/* public */ @property (strong) NSString* localName;
/* public */ @property (readonly) xs_int type;
/* public */ @property (strong) XS_XmlAttributeList* attributes;
/* public */ @property (strong) XS_XmlNodeList* childNodes;
/* public */ @property (readonly, strong) XS_XmlCommentList* comments;
/* public */ @property (readonly, strong) XS_XmlElementList* elements;
/* public */ @property (readonly, strong) NSString* text;
/* private */ - (id) init;
/* public */ + (XS_XmlElement*) new;
/* internal */ - (xs_boolean) isEmpty;
/* internal */ - (void) setIsEmpty :(xs_boolean)value;
/* internal */ - (xs_boolean) hasElements;
/* internal */ - (void) setHasElements :(xs_boolean)value;
/* public */ - (NSString*) name;
/* public */ - (void) setName :(NSString*)value;
/* public */ - (NSString*) nsPrefix;
/* public */ - (void) setNsPrefix :(NSString*)value;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (xs_int) type;
/* public */ - (XS_XmlAttributeList*) attributes;
/* public */ - (void) setAttributes :(XS_XmlAttributeList*)value;
/* public */ - (XS_XmlNodeList*) childNodes;
/* public */ - (void) setChildNodes :(XS_XmlNodeList*)value;
/* public */ - (XS_XmlCommentList*) comments;
/* public */ - (XS_XmlElementList*) elements;
/* public */ - (NSString*) text;
/* public */ + (XS_XmlElement*) parse :(NSString*)xml;
/* public */ + (XS_XmlElement*) parseMixed :(NSString*)xml :(xs_boolean)mixed;
/* public */ + (XS_XmlElement*) withName :(NSString*)param_name;
/* public */ + (XS_XmlElement*) withQName :(XS_XmlName*)param_name;
/* public */ - (XS_XmlElement*) addAttribute :(NSString*)param_name :(NSString*)value;
/* public */ - (XS_XmlElement*) addAttributeWithQName :(XS_XmlName*)param_name :(NSString*)value;
/* public */ - (XS_XmlElement*) addChild :(XS_XmlNode*)child;
/* public */ - (XS_XmlElement*) addComment :(NSString*)param_text;
/* public */ - (XS_XmlElement*) addElement :(XS_XmlElement*)child;
/* public */ - (XS_XmlElement*) addText :(NSString*)param_text;
/* public */ - (NSString*) getAttribute :(NSString*)param_name;
/* public */ - (void) removeAttribute :(NSString*)param_name;
/* public */ - (XS_XmlElement*) getElement :(NSString*)param_name;
/* public */ - (XS_XmlElementList*) findElements :(NSString*)param_name;
/* public */ - (NSString*) toString;
/* public */ - (void) appendTo :(XS_CharBuffer*)buffer;
/* private */ - (void) writeText :(XS_CharBuffer*)buffer :(NSString*)chars;
/* private */ + (XS_XmlElement*) DC1 :(NSString*)p1 :(NSString*)p2 :(NSString*)p3;
@end

@interface XS_XmlElementList : XS_ListBase
+ (XS_XmlElementList*) new;
/* public */ - (void) privateInit;
+ (XS_XmlElementList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_XmlElementList*) add :(XS_XmlElement*)item;
/* public */ - (void) addAll :(XS_XmlElementList*)other;
/* public */ - (XS_XmlElement*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_XmlElement*)item;
/* public */ - (xs_boolean) has :(XS_XmlElement*)item;
/* public */ - (xs_int) firstIndexOf :(XS_XmlElement*)item;
/* public */ - (xs_int) lastIndexOf :(XS_XmlElement*)item;
/* public */ - (void) insert :(xs_int)index :(XS_XmlElement*)item;
/* public */ - (xs_boolean) remove :(XS_XmlElement*)item;
/* public */ - (XS_XmlElementList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_XmlElementList*) share :(XS_ListBase*)list;
@end

@interface XS_XmlException : NSException
{
    @protected NSString* message_;
}
/* public */ @property (readonly, strong) NSString* message;
/* private */ - (id) init;
/* public */ - (NSString*) message;
+ (XS_XmlException*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_XmlException*) withMessage :(NSString*)param_message;
/* private */ + (XS_XmlException*) DC1 :(NSString*)p1;
@end

@interface XS_XmlName : NSObject
{
    @private NSString* nsPrefix_;
    @private NSString* localName_;
    @private NSString* full;
}
/* public */ @property (strong) NSString* nsPrefix;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* fullName;
/* private */ - (id) init;
/* public */ + (XS_XmlName*) new;
/* public */ - (NSString*) nsPrefix;
/* public */ - (void) setNsPrefix :(NSString*)value;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) fullName;
/* public */ - (void) setFullName :(NSString*)value;
/* public */ + (XS_XmlName*) parse :(NSString*)name;
/* public */ - (NSString*) toString;
/* private */ + (XS_XmlName*) DC1 :(NSString*)p1 :(NSString*)p2 :(NSString*)p3;
@end

@interface XS_XmlParser : NSObject
{
    @private XS_CharStream* stream;
    @private XS_CharBuffer* buffer;
    @private xs_boolean mixed;
    @private xs_boolean elementOnly;
    @private NSString* declaration_;
    @private XS_XmlElement* rootElement_;
}
/* public */ @property (strong) NSString* declaration;
/* public */ @property (strong) XS_XmlElement* rootElement;
/* private */ - (id) init;
/* public */ - (NSString*) declaration;
/* public */ - (void) setDeclaration :(NSString*)value;
/* public */ - (XS_XmlElement*) rootElement;
/* public */ - (void) setRootElement :(XS_XmlElement*)value;
+ (XS_XmlParser*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_XmlDocument*) parseDocument :(XS_CharStream*)param_stream :(xs_boolean)param_mixed;
/* public */ + (XS_XmlElement*) parseElement :(XS_CharStream*)param_stream :(xs_boolean)param_mixed;
/* public */ + (XS_XmlParser*) startDocument :(XS_CharStream*)param_stream :(xs_boolean)param_mixed;
/* public */ + (XS_XmlParser*) startElement :(XS_CharStream*)param_stream :(xs_boolean)param_mixed;
/* public */ - (XS_XmlElement*) parseElement;
/* public */ - (XS_XmlElement*) nextElement;
/* public */ - (XS_XmlNode*) nextChild :(XS_XmlElement*)element :(xs_boolean)parseNested;
/* public */ - (XS_XmlElement*) nextChildElement :(XS_XmlElement*)element :(xs_boolean)parseNested;
/* public */ - (void) readChildren :(XS_XmlElement*)element;
/* private */ - (xs_char) read;
/* private */ - (xs_char) readXChar;
/* private */ - (xs_char) readXHash;
/* private */ - (NSString*) readName :(NSString*)kind :(xs_boolean)required :(xs_boolean)space;
/* private */ - (XS_XmlName*) readQName :(NSString*)kind :(xs_boolean)required :(xs_boolean)space;
/* private */ - (NSString*) readValue;
/* private */ - (NSString*) readXmlPI;
/* private */ - (NSString*) readComment;
/* private */ - (void) readCData;
/* private */ - (xs_boolean) readMatch :(xs_char)match :(xs_boolean)space;
/* private */ - (void) expectNext :(xs_char)match :(xs_boolean)space;
/* private */ - (void) unread :(xs_char)c;
/* private */ - (NSString*) atLocation;
/* private */ + (XS_XmlDocument*) DC2 :(NSString*)p1 :(XS_XmlElement*)p2;
/* private */ + (XS_XmlName*) DC5 :(NSString*)p1 :(NSString*)p2 :(NSString*)p3;
/* private */ + (XS_XmlName*) DC4 :(NSString*)p1;
/* private */ + (XS_XmlParser*) DC3 :(xs_boolean)p1 :(xs_boolean)p2 :(XS_CharStream*)p3;
/* private */ + (XS_XmlParser*) DC1 :(xs_boolean)p1 :(XS_CharStream*)p2;
@end

#define XS_XmlParser_EXPECTED_ROOT @"expected root element"

@interface XS_XmlText : XS_XmlNode
{
    @private NSString* text_;
}
/* public */ @property (strong) NSString* text;
/* public */ @property (readonly) xs_int type;
/* private */ - (id) init;
/* public */ + (XS_XmlText*) new;
/* public */ - (NSString*) text;
/* public */ - (void) setText :(NSString*)value;
/* public */ - (xs_int) type;
/* public */ + (XS_XmlText*) withText :(NSString*)param_text;
/* private */ + (XS_XmlText*) DC1 :(NSString*)p1;
@end

#endif
