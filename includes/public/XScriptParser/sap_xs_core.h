// Generated by SAP AFX Compiler (Tue Mar 10 11:04:24 CET 2015)

#ifndef SAP_XS_CORE_H
#define SAP_XS_CORE_H

@class XS_ThreadLocal;
@class XS_ByteBuffer;
@class XS_CharBuffer;
@class XS_DebugConsole;
@class XS_ReentrantMutex;
@class XS_FileSystemException;
@class XS_FileSystem;
@class XS_DataFileReader;
@class XS_DataFileWriter;
@class XS_TextFileReader;
@class XS_TextFileWriter;
@class XS_LongArray;
@class XS_ObjectArray;
@class XS_AtomicBoolean;
@class XS_ByteConstant;
@class XS_ShortConstant;
@class XS_IntConstant;
@class XS_LongConstant;
@class XS_StringFunction;
@class XS_BinaryFunction;
@class XS_BooleanFunction;
@class XS_CharFunction;
@class XS_ByteFunction;
@class XS_ShortFunction;
@class XS_IntFunction;
@class XS_LongFunction;
@class XS_IntegerFunction;
@class XS_DecimalFunction;
@class XS_FloatFunction;
@class XS_DoubleFunction;
@class XS_ObjectFunction;
@class XS_StringOperator;
@class XS_BinaryOperator;
@class XS_BooleanOperator;
@class XS_CharOperator;
@class XS_ByteOperator;
@class XS_ShortOperator;
@class XS_IntOperator;
@class XS_LongOperator;
@class XS_IntegerOperator;
@class XS_DecimalOperator;
@class XS_FloatOperator;
@class XS_DoubleOperator;
@class XS_ObjectOperator;
@class XS_Base16Binary;
@class XS_Base64Binary;
@class XS_BoundedQueue;
@class XS_Comparer;
@class XS_ConditionVariable;
@class XS_ArrayIndexException;
@class XS_ExceptionHandled;
@class XS_ExceptionIgnored;
@class XS_NotImplementedException;
@class XS_NullValueException;
@class XS_FormatException;
@class XS_AbstractPropertyException;
@class XS_AbstractFunctionException;
@class XS_AssertionException;
@class XS_NullPointerException;
@class XS_ClassCastException;
@class XS_WrongTypeException;
@class XS_InfinityException;
@class XS_OverflowException;
@class XS_SocketException;
@class XS_UnexpectedCaseException;
@class XS_ExceptionHelper;
@class XS_IntCounter;
@class XS_LongCounter;
@class XS_Equality;
@class XS_ObjectEquality;
@class XS_GUID;
@class XS_BigEndian;
@class XS_LittleEndian;
@class XS_ByteMath;
@class XS_ShortMath;
@class XS_IntMath;
@class XS_LongMath;
@class XS_IntegerMath;
@class XS_DecimalMath;
@class XS_FloatMath;
@class XS_DoubleMath;
@class XS_NullableString;
@class XS_NullableBinary;
@class XS_NullableBoolean;
@class XS_NullableChar;
@class XS_NullableByte;
@class XS_NullableShort;
@class XS_NullableInt;
@class XS_NullableLong;
@class XS_NullableInteger;
@class XS_NullableDecimal;
@class XS_NullableFloat;
@class XS_NullableDouble;
@class XS_ObjectFilter;
@class XS_PearsonHashing;
@class XS_SchemaFormat;
@class XS_ClientSocket;
@class XS_UTF8;
@class XS_SystemClock;
@class XS_SystemError;
@class XS_ThreadSleep;
@class XS_UnicodePlus;
@class XS_UnsignedInt;
@class XS_ValueIgnored;
@class XS_VariableUsed;

@interface XS_ThreadLocal : NSObject
{
    @private NSString* my_key;
}
/* private */ - (id) init;
/* private */ + (void) initialize;
/* private */ + (xs_int) next_key;
/* private */ + (void) setNext_key :(xs_int)value;
/* private */ + (NSString*) nextKey;
+ (XS_ThreadLocal*) new;
/* public */ - (void) privateInit;
/* public */ - (id) get;
/* public */ - (void) set :(id)value;
@end

@interface XS_ByteBuffer : NSObject
{
    @private xs_byte* my_buffer;
    @private xs_int my_capacity;
    @private xs_int my_offset;
}
- (xs_byte*) ptr;
/* private */ + (void) initialize;
/* public */ - (void) dealloc;
+ (XS_ByteBuffer*) new;
/* public */ - (void) privateInit;
+ (XS_ByteBuffer*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* private */ - (void) init :(xs_int)capacity;
/* public */ + (XS_ByteBuffer*) withCapacity :(xs_int)capacity;
/* public */ + (XS_ByteBuffer*) withLength :(xs_int)length;
/* public */ - (void) setLength :(xs_int)i;
/* public */ - (void) setByte :(xs_int)index :(xs_byte)value;
/* public */ - (void) setBytes :(xs_int)index :(NSData*)value;
/* public */ - (void) add :(xs_byte)b;
/* public */ - (void) append :(NSData*)x;
/* public */ - (void) clear;
/* public */ - (xs_int) capacity;
/* public */ - (xs_int) length;
/* public */ - (xs_byte) byteAt :(xs_int)index;
/* public */ - (NSData*) getRange :(xs_int)i :(xs_int)j;
/* public */ - (NSData*) toBinary;
/* private */ + (NSData*) EMPTY;
@end

#define XS_ByteBuffer_EMPTY [XS_ByteBuffer EMPTY]

@interface XS_CharBuffer : NSObject
{
    @private xs_char* my_buffer;
    @private xs_int my_capacity;
    @private xs_int my_offset;
}
- (xs_char*) ptr;
/* public */ - (void) dealloc;
+ (XS_CharBuffer*) new;
/* public */ - (void) privateInit;
+ (XS_CharBuffer*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* private */ - (void) init :(xs_int)capacity;
/* public */ + (XS_CharBuffer*) withCapacity :(xs_int)capacity;
/* public */ + (XS_CharBuffer*) withLength :(xs_int)length;
/* public */ - (void) setLength :(xs_int)i;
/* public */ - (void) setChar :(xs_int)index :(xs_char)value;
/* public */ - (void) setChars :(xs_int)index :(NSString*)value;
/* public */ - (void) add :(xs_char)c;
/* public */ - (void) append :(NSString*)x;
/* public */ + (NSString*) append2 :(NSString*)x1 :(NSString*)x2;
/* public */ + (NSString*) append3 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3;
/* public */ + (NSString*) append4 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3 :(NSString*)x4;
/* public */ + (NSString*) append5 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3 :(NSString*)x4 :(NSString*)x5;
/* public */ + (NSString*) append6 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3 :(NSString*)x4 :(NSString*)x5 :(NSString*)x6;
/* public */ + (NSString*) append7 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3 :(NSString*)x4 :(NSString*)x5 :(NSString*)x6 :(NSString*)x7;
/* public */ + (NSString*) append8 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3 :(NSString*)x4 :(NSString*)x5 :(NSString*)x6 :(NSString*)x7 :(NSString*)x8;
/* public */ + (NSString*) append9 :(NSString*)x1 :(NSString*)x2 :(NSString*)x3 :(NSString*)x4 :(NSString*)x5 :(NSString*)x6 :(NSString*)x7 :(NSString*)x8 :(NSString*)x9;
/* public */ - (void) clear;
/* public */ - (xs_int) capacity;
/* public */ - (xs_int) length;
/* public */ - (xs_char) charAt :(xs_int)index;
/* public */ - (NSString*) getRange :(xs_int)i :(xs_int)j;
/* public */ - (NSString*) toString;
@end

@interface XS_DebugConsole : NSObject
/* private */ + (void) initialize;
/* private */ + (XS_CharBuffer*) buffer;
/* private */ + (void) setBuffer :(XS_CharBuffer*)value;
/* private */ + (XS_CharBuffer*) capture;
/* private */ + (void) setCapture :(XS_CharBuffer*)value;
/* private */ + (XS_ClientSocket*) socket;
/* private */ + (void) setSocket :(XS_ClientSocket*)value;
/* private */ + (XS_TextFileWriter*) writer;
/* private */ + (void) setWriter :(XS_TextFileWriter*)value;
/* private */ + (XS_ThreadLocal*) my_indent;
/* private */ + (void) setMy_indent :(XS_ThreadLocal*)value;
/* private */ + (xs_int) indent;
/* private */ + (void) setIndent :(xs_int)value;
/* public */ + (void) open :(NSString*)file;
/* public */ + (void) append :(NSString*)file;
/* public */ + (void) close;
/* public */ + (void) connect :(NSString*)host :(xs_int)port;
/* public */ + (void) disconnect;
/* public */ + (void) log :(NSString*)message;
/* public */ + (void) logThread :(NSString*)message;
/* public */ + (void) trace :(NSString*)message;
/* public */ + (void) debug :(NSString*)message;
/* public */ + (void) info :(NSString*)message;
/* public */ + (void) warn :(NSString*)message;
/* public */ + (void) error :(NSString*)message;
/* public */ + (void) fatal :(NSString*)message;
/* public */ + (void) error :(NSString*)message :(NSException*)exception;
/* public */ + (void) startCapture;
/* public */ + (void) stopCapture;
/* public */ + (NSString*) getCaptured;
/* public */ + (void) traceEx :(NSString*)exception;
/* public */ + (void) traceIn :(NSString*)operation;
/* public */ + (void) traceOut :(NSString*)operation;
/* public */ + (void) traceAlloc :(NSString*)className :(id)objectPtr;
/* public */ + (void) traceDealloc :(NSString*)className :(id)objectPtr;
/* public */ + (void) write :(NSString*)text;
/* private */ + (void) addCaptured :(NSString*)line;
/* private */ + (void) writeIndent;
/* private */ + (void) writeChar :(xs_char)c;
/* private */ + (void) writeLine :(NSString*)text;
/* private */ + (NSString*) linePrefix;
/* private */ + (NSString*) threadName;
/* public */ + (void) flush;
/* public */ + (void) mainException :(NSException*)exception;
@end

@interface XS_ReentrantMutex : NSObject
{
    /* internal */ @public pthread_mutex_t mutex;
}
+ (XS_ReentrantMutex*) new;
/* public */ - (void) privateInit;
/* public */ - (void) dealloc;
/* public */ - (void) lock;
/* public */ - (xs_boolean) tryLock;
/* public */ - (void) unlock;
@end

@interface XS_FileSystemException : NSException
{
    @protected NSException* cause_;
    @protected NSString* message_;
}
/* public */ @property (readonly, strong) NSException* cause;
/* public */ @property (readonly, strong) NSString* message;
/* private */ - (id) init;
/* public */ - (NSException*) cause;
/* public */ - (NSString*) message;
+ (XS_FileSystemException*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_FileSystemException*) withCause :(NSException*)param_cause;
/* public */ + (XS_FileSystemException*) withMessage :(NSString*)param_message;
/* public */ + (XS_FileSystemException*) withCauseAndMessage :(NSException*)param_cause :(NSString*)param_message;
/* private */ + (XS_FileSystemException*) DC1 :(NSException*)p1;
/* private */ + (XS_FileSystemException*) DC3 :(NSException*)p1 :(NSString*)p2;
/* private */ + (XS_FileSystemException*) DC2 :(NSString*)p1;
@end

@interface XS_FileSystem : NSObject
/* public */ + (void) deleteFile :(NSString*)file;
/* public */ + (xs_boolean) fileExists :(NSString*)file;
/* public */ + (xs_long) fileLength :(NSString*)file;
/* public */ + (void) renameFile :(NSString*)oldName :(NSString*)newName;
/* public */ + (NSString*) resolveName :(NSString*)file;
/* public */ + (NSString*) getLocalDirectory;
/* public */ + (NSString*) readString :(NSString*)file;
/* public */ + (NSData*) readBinary :(NSString*)file;
/* public */ + (void) writeString :(NSString*)file :(NSString*)text;
/* public */ + (void) writeBinary :(NSString*)file :(NSData*)data;
@end

@interface XS_DataFileReader : NSObject
{
    @private FILE* fp;
    @private XS_ByteBuffer* my_buffer;
    @private xs_int my_length;
    @private xs_int my_offset;
    @private xs_int my_size;
    @private xs_long my_position;
}
/* public */ @property (readonly) xs_long position;
/* private */ - (id) init;
/* public */ - (xs_long) position;
+ (XS_DataFileReader*) new;
/* private */ - (void) privateInit;
/* public */ + (NSData*) readAll :(NSString*)file;
/* public */ + (XS_DataFileReader*) open :(NSString*)file;
/* public */ - (XS_DataFileReader*) withBufferSize :(xs_int)size;
/* public */ - (void) close;
/* public */ - (NSData*) read :(xs_int)length;
/* public */ - (xs_int) readByte;
/* private */ - (xs_boolean) readMore;
@end

@interface XS_DataFileWriter : NSObject
{
    @private FILE* fp;
    @private XS_ByteBuffer* my_buffer;
    @private xs_int my_size;
    @private xs_long my_position;
}
/* public */ @property (readonly) xs_long position;
/* private */ - (id) init;
/* public */ - (xs_long) position;
+ (XS_DataFileWriter*) new;
/* private */ - (void) privateInit;
/* public */ + (void) writeAll :(NSString*)file :(NSData*)data;
/* public */ + (XS_DataFileWriter*) append :(NSString*)file;
/* public */ + (XS_DataFileWriter*) open :(NSString*)file;
/* public */ - (XS_DataFileWriter*) withBufferSize :(xs_int)size;
/* public */ - (void) close;
/* public */ - (void) flush;
/* public */ - (void) write :(NSData*)data;
/* public */ - (void) write :(NSData*)data :(xs_int)offset :(xs_int)length;
/* public */ - (void) writeByte :(xs_byte)data;
/* private */ - (void) initBuffer;
/* private */ - (void) flushBuffer;
@end

@interface XS_TextFileReader : NSObject
{
    @private XS_DataFileReader* my_reader;
}
/* public */ @property (readonly) xs_long position;
/* private */ - (id) init;
/* public */ - (xs_long) position;
+ (XS_TextFileReader*) new;
/* private */ - (void) privateInit;
/* public */ + (NSString*) readAll :(NSString*)file;
/* public */ + (XS_TextFileReader*) open :(NSString*)resolvedFile;
/* public */ - (XS_TextFileReader*) withBufferSize :(xs_int)size;
/* public */ - (void) close;
/* public */ - (NSString*) read :(xs_int)length;
/* public */ - (xs_int) readChar;
/* public */ - (NSString*) readLine;
/* private */ - (void) badUTF8;
/* private */ + (XS_TextFileReader*) DC1 :(XS_DataFileReader*)p1;
@end

@interface XS_TextFileWriter : NSObject
{
    @private XS_DataFileWriter* my_writer;
}
/* public */ @property (readonly) xs_long position;
/* private */ - (id) init;
/* public */ - (xs_long) position;
+ (XS_TextFileWriter*) new;
/* private */ - (void) privateInit;
/* public */ + (void) writeAll :(NSString*)file :(NSString*)text;
/* public */ + (XS_TextFileWriter*) append :(NSString*)file;
/* public */ + (XS_TextFileWriter*) open :(NSString*)file;
/* public */ - (XS_TextFileWriter*) withBufferSize :(xs_int)size;
/* public */ - (void) close;
/* public */ - (void) flush;
/* public */ - (void) write :(NSString*)text;
/* public */ - (void) write :(NSString*)text :(xs_int)offset :(xs_int)length;
/* public */ - (void) writeChar :(xs_char)text;
/* public */ - (void) writeLine :(NSString*)text;
/* private */ + (XS_TextFileWriter*) DC1 :(XS_DataFileWriter*)p1;
@end

@interface XS_LongArray : NSObject
{
    @private xs_long* my_array;
    @private xs_int my_capacity;
    @private xs_int my_length;
}
/* public */ @property (readonly) xs_int capacity;
/* public */ @property (readonly) xs_int length;
/* public */ - (xs_int) capacity;
/* public */ - (xs_int) length;
/* private */ - (void) createArray :(xs_int)n;
/* private */ - (void) dealloc;
+ (XS_LongArray*) new;
/* public */ - (void) privateInit;
+ (XS_LongArray*) new :(xs_int)initialCapacity;
/* public */ - (void) privateInit :(xs_int)initialCapacity;
/* public */ - (void) add :(xs_long)value;
/* public */ - (xs_long) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_long)value;
/* public */ - (void) setLength :(xs_int)count;
/* public */ - (NSString*) toString;
/* public */ - (void) sort;
/* private */ - (void) mergeSort :(XS_LongArray*)temp :(xs_int)left :(xs_int)right;
/* private */ - (void) merge :(XS_LongArray*)temp :(xs_int)left :(xs_int)right :(xs_int)end;
@end

@interface XS_ObjectArray : NSObject
{
    @private NSMutableArray* items;
}
/* public */ @property (readonly) xs_int length;
/* public */ - (xs_int) length;
+ (XS_ObjectArray*) new;
/* public */ - (void) privateInit;
+ (XS_ObjectArray*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* protected */ - (void) init :(xs_int)capacity;
/* public */ - (void) clear;
/* public */ - (void) add :(id)item;
/* public */ - (void) addAll :(XS_ObjectArray*)other;
/* public */ - (void) addRange :(XS_ObjectArray*)other :(xs_int)start :(xs_int)end;
/* public */ - (id) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(id)item;
/* public */ - (xs_int) firstIndex :(id)item :(xs_int)start :(xs_int)end :(XS_Equality*)equal;
/* public */ - (xs_int) lastIndex :(id)item :(xs_int)start :(xs_int)end :(XS_Equality*)equal;
/* public */ - (void) insert :(xs_int)index :(id)item;
/* public */ - (xs_boolean) remove :(id)item :(XS_Equality*)equal;
/* public */ - (void) removeAt :(xs_int)index;
/* public */ - (void) removeRange :(xs_int)start :(xs_int)end;
/* public */ - (id) shift;
/* public */ - (xs_int) push :(id)item;
/* public */ - (id) pop;
/* public */ - (id) top;
/* public */ - (void) reverse;
/* public */ - (XS_ObjectArray*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) splice :(xs_int)start :(xs_int)deleteCount :(XS_ObjectArray*)insertItems;
/* public */ - (XS_ObjectArray*) filter :(XS_ObjectFilter*)f;
/* public */ - (void) sort :(XS_Comparer*)comparer;
/* public */ - (NSString*) toString;
/* private */ - (void) mergeSort :(XS_ObjectArray*)temp :(xs_int)left :(xs_int)right :(XS_Comparer*)comparer;
/* private */ - (void) merge :(XS_ObjectArray*)temp :(xs_int)left :(xs_int)right :(xs_int)end :(XS_Comparer*)comparer;
@end

@interface XS_AtomicBoolean : NSObject
{
    @private xs_boolean value;
}
/* private */ - (id) init;
/* public */ + (XS_AtomicBoolean*) new;
/* public */ - (xs_boolean) get;
/* public */ - (void) set :(xs_boolean)newValue;
/* public */ - (xs_boolean) getAndSet :(xs_boolean)newValue;
/* public */ - (xs_boolean) compareAndSet :(xs_boolean)expect :(xs_boolean)update;
/* public */ - (NSString*) toString;
@end

@interface XS_ByteConstant : NSObject
@end

#define XS_ByteConstant_MIN_VALUE ((xs_byte)-128)
#define XS_ByteConstant_MAX_VALUE ((xs_byte)127)

@interface XS_ShortConstant : NSObject
@end

#define XS_ShortConstant_MIN_VALUE ((xs_short)-32768)
#define XS_ShortConstant_MAX_VALUE ((xs_short)32767)

@interface XS_IntConstant : NSObject
@end

#define XS_IntConstant_MIN_VALUE 0x80000000
#define XS_IntConstant_MAX_VALUE 2147483647

@interface XS_LongConstant : NSObject
@end

#define XS_LongConstant_MIN_VALUE XS_LONG(0x8000000000000000)
#define XS_LongConstant_MAX_VALUE XS_LONG(9223372036854775807)

@interface XS_StringFunction : NSObject
/* public */ + (xs_int) compareTo :(NSString*)value :(NSString*)other;
/* public */ + (xs_int) hashCode :(NSString*)value;
/* public */ + (xs_boolean) endsWith :(NSString*)value :(NSString*)suffix;
/* public */ + (xs_boolean) endsWith :(NSString*)value :(NSString*)suffix :(xs_int)end;
/* public */ + (xs_int) indexOf :(NSString*)value :(NSString*)find;
/* public */ + (xs_int) indexOf :(NSString*)value :(NSString*)find :(xs_int)start;
/* public */ + (xs_int) lastIndexOf :(NSString*)value :(NSString*)find;
/* public */ + (xs_int) lastIndexOf :(NSString*)value :(NSString*)find :(xs_int)end;
/* public */ + (NSString*) replace :(NSString*)value :(NSString*)y :(NSString*)z;
/* public */ + (NSString*) replaceAll :(NSString*)value :(NSString*)y :(NSString*)z;
/* public */ + (xs_boolean) startsWith :(NSString*)value :(NSString*)prefix;
/* public */ + (xs_boolean) startsWith :(NSString*)value :(NSString*)prefix :(xs_int)start;
/* public */ + (NSString*) substring :(NSString*)value :(xs_int)start;
/* public */ + (NSString*) substring :(NSString*)value :(xs_int)start :(xs_int)end;
/* public */ + (NSData*) toBinary :(NSString*)value;
/* public */ + (xs_char) toChar :(NSString*)value;
/* public */ + (NSString*) toLowerCase :(NSString*)value;
/* public */ + (NSString*) toUpperCase :(NSString*)value;
/* public */ + (NSString*) trim :(NSString*)value;
/* public */ + (NSString*) percentEncode :(NSString*)value;
/* public */ + (NSString*) percentDecode :(NSString*)value;
/* public */ + (NSString*) percentNormal :(NSString*)value;
/* public */ + (NSString*) lowerFirst :(NSString*)value;
/* public */ + (NSString*) upperFirst :(NSString*)value;
/* public */ + (NSString*) xmlEscape :(NSString*)value;
/* public */ + (xs_boolean) uriUnreserved :(xs_char)c;
@end

@interface XS_BinaryFunction : NSObject
/* public */ + (xs_int) compareTo :(NSData*)value :(NSData*)other;
/* public */ + (xs_int) hashCode :(NSData*)value;
/* public */ + (NSData*) slice :(NSData*)value :(xs_int)start;
/* public */ + (NSData*) slice2 :(NSData*)value :(xs_int)start :(xs_int)end;
/* public */ + (NSString*) toString :(NSData*)value;
@end

@interface XS_BooleanFunction : NSObject
/* public */ + (NSString*) toString :(xs_boolean)value;
@end

@interface XS_CharFunction : NSObject
/* public */ + (NSString*) toString :(xs_char)value;
/* public */ + (xs_boolean) isDigit :(xs_char)value;
/* public */ + (xs_boolean) isHexDigit :(xs_char)value;
/* public */ + (xs_boolean) isLowerCase :(xs_char)value;
/* public */ + (xs_boolean) isUpperCase :(xs_char)value;
/* public */ + (xs_char) toLowerCase :(xs_char)value;
/* public */ + (xs_char) toUpperCase :(xs_char)value;
@end

@interface XS_ByteFunction : NSObject
/* public */ + (NSString*) toString :(xs_byte)value;
/* public */ + (xs_int) toUnsigned :(xs_byte)value;
@end

@interface XS_ShortFunction : NSObject
/* public */ + (NSString*) toString :(xs_short)value;
/* public */ + (xs_int) toUnsigned :(xs_short)value;
@end

@interface XS_IntFunction : NSObject
/* public */ + (NSString*) toString :(xs_int)value;
@end

@interface XS_LongFunction : NSObject
/* public */ + (NSString*) toString :(xs_long)value;
@end

@interface XS_IntegerFunction : NSObject
/* public */ + (xs_integer) fromByte :(xs_byte)value;
/* public */ + (xs_integer) fromShort :(xs_short)value;
/* public */ + (xs_integer) fromInt :(xs_int)value;
/* public */ + (xs_integer) fromLong :(xs_long)value;
/* public */ + (xs_integer) fromFloat :(xs_float)value;
/* public */ + (xs_integer) fromDouble :(xs_double)value;
/* public */ + (NSString*) toString :(xs_integer)value;
@end

@interface XS_DecimalFunction : NSObject
/* public */ + (xs_decimal) fromByte :(xs_byte)value;
/* public */ + (xs_decimal) fromShort :(xs_short)value;
/* public */ + (xs_decimal) fromInt :(xs_int)value;
/* public */ + (xs_decimal) fromLong :(xs_long)value;
/* public */ + (xs_decimal) fromFloat :(xs_float)value;
/* public */ + (xs_decimal) fromDouble :(xs_double)value;
/* public */ + (NSString*) toString :(xs_decimal)value;
@end

@interface XS_FloatFunction : NSObject
/* public */ + (xs_int) byteValue :(xs_float)value;
/* public */ + (xs_short) shortValue :(xs_float)value;
/* public */ + (xs_int) intValue :(xs_float)value;
/* public */ + (xs_long) longValue :(xs_float)value;
/* public */ + (NSString*) toExponential :(xs_float)value;
/* public */ + (NSString*) toFixed :(xs_float)value :(xs_int)scale;
/* public */ + (NSString*) toString :(xs_float)value;
@end

@interface XS_DoubleFunction : NSObject
/* public */ + (xs_int) byteValue :(xs_double)value;
/* public */ + (xs_short) shortValue :(xs_double)value;
/* public */ + (xs_int) intValue :(xs_double)value;
/* public */ + (xs_long) longValue :(xs_double)value;
/* public */ + (NSString*) toExponential :(xs_double)value;
/* public */ + (NSString*) toFixed :(xs_double)value :(xs_int)scale;
/* public */ + (NSString*) toString :(xs_double)value;
@end

@interface XS_ObjectFunction : NSObject
/* public */ + (NSString*) toString :(id)value;
/* public */ + (id) valueOf :(id)value;
@end

@interface XS_StringOperator : NSObject
/* public */ + (xs_int) compare :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) equal :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) notEqual :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) lessThan :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) lessEqual :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) greaterThan :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) greaterEqual :(NSString*)left :(NSString*)right;
@end

@interface XS_BinaryOperator : NSObject
/* public */ + (xs_int) compare :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) equal :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) notEqual :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) lessThan :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) lessEqual :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) greaterThan :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) greaterEqual :(NSData*)left :(NSData*)right;
@end

@interface XS_BooleanOperator : NSObject
/* public */ + (xs_int) compare :(xs_boolean)left :(xs_boolean)right;
/* public */ + (xs_boolean) equal :(xs_boolean)left :(xs_boolean)right;
/* public */ + (xs_boolean) notEqual :(xs_boolean)left :(xs_boolean)right;
@end

@interface XS_CharOperator : NSObject
/* public */ + (xs_int) compare :(xs_char)left :(xs_char)right;
/* public */ + (xs_boolean) equal :(xs_char)left :(xs_char)right;
/* public */ + (xs_boolean) notEqual :(xs_char)left :(xs_char)right;
/* public */ + (xs_boolean) lessThan :(xs_char)left :(xs_char)right;
/* public */ + (xs_boolean) lessEqual :(xs_char)left :(xs_char)right;
/* public */ + (xs_boolean) greaterThan :(xs_char)left :(xs_char)right;
/* public */ + (xs_boolean) greaterEqual :(xs_char)left :(xs_char)right;
@end

@interface XS_ByteOperator : NSObject
/* public */ + (xs_int) compare :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) equal :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) notEqual :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) lessThan :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) lessEqual :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) greaterThan :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) greaterEqual :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_byte) negate :(xs_byte)value;
/* public */ + (xs_byte) add :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_byte) subtract :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_byte) multiply :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_byte) divide :(xs_byte)left :(xs_byte)right;
/* public */ + (xs_byte) remainder :(xs_byte)left :(xs_byte)right;
@end

@interface XS_ShortOperator : NSObject
/* public */ + (xs_int) compare :(xs_short)left :(xs_short)right;
/* public */ + (xs_boolean) equal :(xs_short)left :(xs_short)right;
/* public */ + (xs_boolean) notEqual :(xs_short)left :(xs_short)right;
/* public */ + (xs_boolean) lessThan :(xs_short)left :(xs_short)right;
/* public */ + (xs_boolean) lessEqual :(xs_short)left :(xs_short)right;
/* public */ + (xs_boolean) greaterThan :(xs_short)left :(xs_short)right;
/* public */ + (xs_boolean) greaterEqual :(xs_short)left :(xs_short)right;
/* public */ + (xs_short) negate :(xs_short)value;
/* public */ + (xs_short) add :(xs_short)left :(xs_short)right;
/* public */ + (xs_short) subtract :(xs_short)left :(xs_short)right;
/* public */ + (xs_short) multiply :(xs_short)left :(xs_short)right;
/* public */ + (xs_short) divide :(xs_short)left :(xs_short)right;
/* public */ + (xs_short) remainder :(xs_short)left :(xs_short)right;
@end

@interface XS_IntOperator : NSObject
/* public */ + (xs_int) compare :(xs_int)left :(xs_int)right;
/* public */ + (xs_boolean) equal :(xs_int)left :(xs_int)right;
/* public */ + (xs_boolean) notEqual :(xs_int)left :(xs_int)right;
/* public */ + (xs_boolean) lessThan :(xs_int)left :(xs_int)right;
/* public */ + (xs_boolean) lessEqual :(xs_int)left :(xs_int)right;
/* public */ + (xs_boolean) greaterThan :(xs_int)left :(xs_int)right;
/* public */ + (xs_boolean) greaterEqual :(xs_int)left :(xs_int)right;
/* public */ + (xs_int) negate :(xs_int)value;
/* public */ + (xs_int) add :(xs_int)left :(xs_int)right;
/* public */ + (xs_int) subtract :(xs_int)left :(xs_int)right;
/* public */ + (xs_int) multiply :(xs_int)left :(xs_int)right;
/* public */ + (xs_int) divide :(xs_int)left :(xs_int)right;
/* public */ + (xs_int) remainder :(xs_int)left :(xs_int)right;
@end

@interface XS_LongOperator : NSObject
/* public */ + (xs_int) compare :(xs_long)left :(xs_long)right;
/* public */ + (xs_boolean) equal :(xs_long)left :(xs_long)right;
/* public */ + (xs_boolean) notEqual :(xs_long)left :(xs_long)right;
/* public */ + (xs_boolean) lessThan :(xs_long)left :(xs_long)right;
/* public */ + (xs_boolean) lessEqual :(xs_long)left :(xs_long)right;
/* public */ + (xs_boolean) greaterThan :(xs_long)left :(xs_long)right;
/* public */ + (xs_boolean) greaterEqual :(xs_long)left :(xs_long)right;
/* public */ + (xs_long) negate :(xs_long)value;
/* public */ + (xs_long) add :(xs_long)left :(xs_long)right;
/* public */ + (xs_long) subtract :(xs_long)left :(xs_long)right;
/* public */ + (xs_long) multiply :(xs_long)left :(xs_long)right;
/* public */ + (xs_long) divide :(xs_long)left :(xs_long)right;
/* public */ + (xs_long) remainder :(xs_long)left :(xs_long)right;
@end

@interface XS_IntegerOperator : NSObject
/* public */ + (xs_int) compare :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) equal :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) notEqual :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) lessThan :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) lessEqual :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) greaterThan :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) greaterEqual :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_integer) negate :(xs_integer)value;
/* public */ + (xs_integer) add :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_integer) subtract :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_integer) multiply :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_integer) divide :(xs_integer)left :(xs_integer)right;
/* public */ + (xs_integer) remainder :(xs_integer)left :(xs_integer)right;
@end

@interface XS_DecimalOperator : NSObject
/* public */ + (xs_int) compare :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) equal :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) notEqual :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) lessThan :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) lessEqual :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) greaterThan :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) greaterEqual :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_decimal) negate :(xs_decimal)value;
/* public */ + (xs_decimal) add :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_decimal) subtract :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_decimal) multiply :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_decimal) divide :(xs_decimal)left :(xs_decimal)right;
/* public */ + (xs_decimal) remainder :(xs_decimal)left :(xs_decimal)right;
@end

@interface XS_FloatOperator : NSObject
/* public */ + (xs_int) compare :(xs_float)left :(xs_float)right;
/* public */ + (xs_boolean) equal :(xs_float)left :(xs_float)right;
/* public */ + (xs_boolean) notEqual :(xs_float)left :(xs_float)right;
/* public */ + (xs_boolean) lessThan :(xs_float)left :(xs_float)right;
/* public */ + (xs_boolean) lessEqual :(xs_float)left :(xs_float)right;
/* public */ + (xs_boolean) greaterThan :(xs_float)left :(xs_float)right;
/* public */ + (xs_boolean) greaterEqual :(xs_float)left :(xs_float)right;
/* public */ + (xs_float) negate :(xs_float)value;
/* public */ + (xs_float) add :(xs_float)left :(xs_float)right;
/* public */ + (xs_float) subtract :(xs_float)left :(xs_float)right;
/* public */ + (xs_float) multiply :(xs_float)left :(xs_float)right;
/* public */ + (xs_float) divide :(xs_float)left :(xs_float)right;
/* public */ + (xs_float) remainder :(xs_float)left :(xs_float)right;
@end

@interface XS_DoubleOperator : NSObject
/* public */ + (xs_int) compare :(xs_double)left :(xs_double)right;
/* public */ + (xs_boolean) equal :(xs_double)left :(xs_double)right;
/* public */ + (xs_boolean) notEqual :(xs_double)left :(xs_double)right;
/* public */ + (xs_boolean) lessThan :(xs_double)left :(xs_double)right;
/* public */ + (xs_boolean) lessEqual :(xs_double)left :(xs_double)right;
/* public */ + (xs_boolean) greaterThan :(xs_double)left :(xs_double)right;
/* public */ + (xs_boolean) greaterEqual :(xs_double)left :(xs_double)right;
/* public */ + (xs_double) negate :(xs_double)value;
/* public */ + (xs_double) add :(xs_double)left :(xs_double)right;
/* public */ + (xs_double) subtract :(xs_double)left :(xs_double)right;
/* public */ + (xs_double) multiply :(xs_double)left :(xs_double)right;
/* public */ + (xs_double) divide :(xs_double)left :(xs_double)right;
/* public */ + (xs_double) remainder :(xs_double)left :(xs_double)right;
@end

@interface XS_ObjectOperator : NSObject
/* public */ + (xs_boolean) equal :(id)left :(id)right;
/* public */ + (xs_boolean) notEqual :(id)left :(id)right;
@end

@interface XS_Base16Binary : NSObject
/* public */ + (NSData*) parse :(NSString*)text;
/* public */ + (NSString*) format :(NSData*)data;
/* public */ + (xs_int) getCharAsInt :(xs_char)c;
/* public */ + (xs_char) getIntAsChar :(xs_int)i;
/* private */ + (XS_FormatException*) badFormat :(NSString*)text;
@end

@interface XS_Base64Binary : NSObject
/* public */ + (NSData*) parse :(NSString*)text;
/* public */ + (NSString*) format :(NSData*)data;
/* public */ + (NSString*) formatPadSafe :(NSData*)data :(xs_boolean)pad :(xs_boolean)safe;
/* public */ + (xs_int) getCharAsInt :(xs_char)c;
/* public */ + (xs_char) getIntAsChar :(xs_int)i :(xs_boolean)safe;
/* private */ + (XS_FormatException*) badFormat :(NSString*)text;
@end

@interface XS_BoundedQueue : NSObject
{
    @private XS_ObjectArray* array;
    @private xs_int getIndex;
    @private xs_int putIndex;
    @private xs_int maxCount;
    @private xs_int count;
    @private XS_ReentrantMutex* mutex;
    @private XS_ConditionVariable* notEmpty;
    @private XS_ConditionVariable* notFull;
}
/* private */ - (id) init;
+ (XS_BoundedQueue*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_BoundedQueue*) getInstance :(xs_int)size;
/* public */ - (void) enqueue :(id)item;
/* public */ - (id) dequeue;
/* private */ + (XS_BoundedQueue*) DC1 :(XS_ObjectArray*)p1 :(xs_int)p2 :(xs_int)p3 :(xs_int)p4 :(XS_ReentrantMutex*)p5 :(XS_ConditionVariable*)p6 :(XS_ConditionVariable*)p7 :(xs_int)p8;
@end

@interface XS_Comparer : NSObject
/* public */ + (XS_Comparer*) new;
/* public */ - (xs_int) apply :(id)a :(id)b;
@end

@interface XS_ConditionVariable : NSObject
{
    @private pthread_cond_t condition;
    @private XS_ReentrantMutex* mutex;
}
/* private */ - (id) init;
+ (XS_ConditionVariable*) new :(XS_ReentrantMutex*)param_mutex;
/* public */ - (void) privateInit :(XS_ReentrantMutex*)param_mutex;
/* public */ - (void) await;
/* public */ - (void) signal;
@end

@interface XS_ArrayIndexException : NSException
/* private */ - (id) init;
/* public */ + (XS_ArrayIndexException*) new;
@end

@interface XS_ExceptionHandled : NSObject
/* public */ + (void) seeBelow :(NSException*)ex;
/* public */ + (void) trustMe :(NSException*)ex;
@end

@interface XS_ExceptionIgnored : NSObject
/* public */ + (void) trustMe :(NSException*)ex;
@end

@interface XS_NotImplementedException : NSException
/* private */ - (id) init;
/* public */ + (XS_NotImplementedException*) new;
@end

@interface XS_NullValueException : NSException
/* private */ - (id) init;
/* public */ + (XS_NullValueException*) new;
@end

@interface XS_FormatException : NSException
{
    @private NSString* message_;
}
/* public */ @property (strong) NSString* message;
/* private */ - (id) init;
/* public */ - (NSString*) message;
/* public */ - (void) setMessage :(NSString*)value;
+ (XS_FormatException*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_FormatException*) withMessage :(NSString*)param_message;
/* public */ + (XS_FormatException*) badFormat :(NSString*)type :(NSString*)value;
/* private */ + (XS_FormatException*) DC1 :(NSString*)p1;
@end

@interface XS_AbstractPropertyException : NSException
/* private */ - (id) init;
/* public */ + (XS_AbstractPropertyException*) new;
@end

@interface XS_AbstractFunctionException : NSException
/* private */ - (id) init;
/* public */ + (XS_AbstractFunctionException*) new;
@end

@interface XS_AssertionException : NSException
{
    @protected NSString* message_;
}
/* public */ @property (readonly, strong) NSString* message;
/* private */ - (id) init;
/* public */ - (NSString*) message;
+ (XS_AssertionException*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_AssertionException*) getInstance :(NSString*)file :(xs_int)line;
/* private */ + (XS_AssertionException*) DC1 :(NSString*)p1;
@end

@interface XS_NullPointerException : NSException
/* private */ - (id) init;
/* public */ + (XS_NullPointerException*) new;
@end

@interface XS_ClassCastException : NSException
/* private */ - (id) init;
/* public */ + (XS_ClassCastException*) new;
@end

@interface XS_WrongTypeException : NSException
/* private */ - (id) init;
/* public */ + (XS_WrongTypeException*) new;
@end

@interface XS_InfinityException : NSException
/* private */ - (id) init;
/* public */ + (XS_InfinityException*) new;
@end

@interface XS_OverflowException : NSException
/* private */ - (id) init;
/* public */ + (XS_OverflowException*) new;
@end

@interface XS_SocketException : NSException
{
    @protected NSException* cause_;
    @protected NSString* message_;
}
/* public */ @property (readonly, strong) NSException* cause;
/* public */ @property (readonly, strong) NSString* message;
/* private */ - (id) init;
/* public */ + (XS_SocketException*) new;
/* public */ - (NSException*) cause;
/* public */ - (NSString*) message;
/* public */ + (XS_SocketException*) withCause :(NSException*)param_cause;
/* public */ + (XS_SocketException*) withMessage :(NSString*)param_message;
/* private */ + (XS_SocketException*) DC1 :(NSException*)p1;
/* private */ + (XS_SocketException*) DC2 :(NSString*)p1;
@end

@interface XS_UnexpectedCaseException : NSException
/* private */ - (id) init;
/* public */ + (XS_UnexpectedCaseException*) new;
@end

@interface XS_ExceptionHelper : NSObject
/* public */ + (NSString*) getReason :(NSException*)cause :(NSString*)message;
@end

@interface XS_IntCounter : NSObject
{
    @private xs_int count_;
}
/* public */ @property xs_int count;
/* private */ - (id) init;
/* public */ + (XS_IntCounter*) new;
/* public */ - (xs_int) count;
/* public */ - (void) setCount :(xs_int)value;
/* public */ - (void) add :(xs_int)n;
@end

@interface XS_LongCounter : NSObject
{
    @private xs_long count_;
}
/* public */ @property xs_long count;
/* private */ - (id) init;
/* public */ + (XS_LongCounter*) new;
/* public */ - (xs_long) count;
/* public */ - (void) setCount :(xs_long)value;
/* public */ - (void) add :(xs_long)n;
@end

@interface XS_Equality : NSObject
/* public */ + (XS_Equality*) new;
/* public */ - (xs_boolean) apply :(id)a :(id)b;
@end

@interface XS_ObjectEquality : XS_Equality
/* private */ + (void) initialize;
/* public */ + (XS_Equality*) INSTANCE;
+ (XS_ObjectEquality*) new;
/* private */ - (void) privateInit;
/* public */ - (xs_boolean) apply :(id)a :(id)b;
@end

@interface XS_GUID : NSObject
{
    @private NSData* bytes;
}
/* private */ - (id) init;
+ (XS_GUID*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_GUID*) newRandom;
/* public */ + (XS_GUID*) fromBinary :(NSData*)data;
/* public */ + (XS_GUID*) fromString :(NSString*)text;
/* public */ - (NSData*) toBinary;
/* public */ - (NSString*) toString32;
/* public */ - (NSString*) toString36;
/* private */ + (NSData*) toVersion4 :(NSData*)param_bytes;
/* private */ + (XS_GUID*) DC1 :(NSData*)p1;
@end

@interface XS_BigEndian : NSObject
/* public */ + (xs_short) getInt16 :(XS_ByteBuffer*)buffer :(xs_int)index;
/* public */ + (xs_int) getInt32 :(XS_ByteBuffer*)buffer :(xs_int)index;
/* public */ + (void) setInt16 :(XS_ByteBuffer*)buffer :(xs_int)index :(xs_short)value;
/* public */ + (void) setInt32 :(XS_ByteBuffer*)buffer :(xs_int)index :(xs_int)value;
@end

@interface XS_LittleEndian : NSObject
/* public */ + (xs_short) getInt16 :(XS_ByteBuffer*)buffer :(xs_int)index;
/* public */ + (xs_int) getInt32 :(XS_ByteBuffer*)buffer :(xs_int)index;
/* public */ + (void) setInt16 :(XS_ByteBuffer*)buffer :(xs_int)index :(xs_short)value;
/* public */ + (void) setInt32 :(XS_ByteBuffer*)buffer :(xs_int)index :(xs_int)value;
@end

@interface XS_ByteMath : NSObject
/* public */ + (xs_byte) abs :(xs_byte)x;
/* public */ + (xs_byte) max :(xs_byte)x :(xs_byte)y;
/* public */ + (xs_byte) min :(xs_byte)x :(xs_byte)y;
@end

@interface XS_ShortMath : NSObject
/* public */ + (xs_short) abs :(xs_short)x;
/* public */ + (xs_short) max :(xs_short)x :(xs_short)y;
/* public */ + (xs_short) min :(xs_short)x :(xs_short)y;
@end

@interface XS_IntMath : NSObject
/* public */ + (xs_int) abs :(xs_int)x;
/* public */ + (xs_int) max :(xs_int)x :(xs_int)y;
/* public */ + (xs_int) min :(xs_int)x :(xs_int)y;
@end

@interface XS_LongMath : NSObject
/* public */ + (xs_long) abs :(xs_long)x;
/* public */ + (xs_long) max :(xs_long)x :(xs_long)y;
/* public */ + (xs_long) min :(xs_long)x :(xs_long)y;
@end

@interface XS_IntegerMath : NSObject
/* private */ + (void) initialize;
/* public */ + (xs_integer) abs :(xs_integer)x;
/* public */ + (xs_integer) max :(xs_integer)x :(xs_integer)y;
/* public */ + (xs_integer) min :(xs_integer)x :(xs_integer)y;
@end

@interface XS_DecimalMath : NSObject
/* private */ + (void) initialize;
/* public */ + (xs_decimal) abs :(xs_decimal)x;
/* public */ + (xs_decimal) max :(xs_decimal)x :(xs_decimal)y;
/* public */ + (xs_decimal) min :(xs_decimal)x :(xs_decimal)y;
/* public */ + (xs_decimal) ceil :(xs_decimal)x;
/* public */ + (xs_decimal) floor :(xs_decimal)x;
/* public */ + (xs_decimal) round :(xs_decimal)value;
/* public */ + (xs_decimal) round :(xs_decimal)value :(xs_int)scale;
@end

@interface XS_FloatMath : NSObject
/* public */ + (xs_float) abs :(xs_float)x;
/* public */ + (xs_float) acos :(xs_float)x;
/* public */ + (xs_float) asin :(xs_float)x;
/* public */ + (xs_float) atan :(xs_float)x;
/* public */ + (xs_float) atan2 :(xs_float)y :(xs_float)x;
/* public */ + (xs_float) ceil :(xs_float)x;
/* public */ + (xs_float) cos :(xs_float)x;
/* public */ + (xs_float) exp :(xs_float)x;
/* public */ + (xs_float) floor :(xs_float)x;
/* public */ + (xs_float) log :(xs_float)x;
/* public */ + (xs_float) max :(xs_float)x :(xs_float)y;
/* public */ + (xs_float) min :(xs_float)x :(xs_float)y;
/* public */ + (xs_float) pow :(xs_float)x :(xs_float)y;
/* public */ + (xs_float) random;
/* public */ + (void) randomSeed :(xs_float)s;
/* public */ + (xs_float) round :(xs_float)x;
/* public */ + (xs_float) sin :(xs_float)x;
/* public */ + (xs_float) sqrt :(xs_float)x;
/* public */ + (xs_float) tan :(xs_float)x;
/* public */ + (xs_float) mod :(xs_float)x :(xs_float)y;
@end

#define XS_FloatMath_E 2.7182818284590452f
#define XS_FloatMath_LN2 0.6931471805599453f
#define XS_FloatMath_LN10 2.3025850929940460f
#define XS_FloatMath_LOG2E 1.4426950408889634f
#define XS_FloatMath_LOG10E 0.4342944819032518f
#define XS_FloatMath_PI 3.1415926535897932f
#define XS_FloatMath_SQRT1_2 0.7071067811865476f
#define XS_FloatMath_SQRT2 1.4142135623730951f

@interface XS_DoubleMath : NSObject
/* public */ + (xs_double) abs :(xs_double)x;
/* public */ + (xs_double) acos :(xs_double)x;
/* public */ + (xs_double) asin :(xs_double)x;
/* public */ + (xs_double) atan :(xs_double)x;
/* public */ + (xs_double) atan2 :(xs_double)y :(xs_double)x;
/* public */ + (xs_double) ceil :(xs_double)x;
/* public */ + (xs_double) cos :(xs_double)x;
/* public */ + (xs_double) exp :(xs_double)x;
/* public */ + (xs_double) floor :(xs_double)x;
/* public */ + (xs_double) log :(xs_double)x;
/* public */ + (xs_double) max :(xs_double)x :(xs_double)y;
/* public */ + (xs_double) min :(xs_double)x :(xs_double)y;
/* public */ + (xs_double) pow :(xs_double)x :(xs_double)y;
/* public */ + (xs_double) random;
/* public */ + (void) randomSeed :(xs_double)s;
/* public */ + (xs_double) round :(xs_double)x;
/* public */ + (xs_double) sin :(xs_double)x;
/* public */ + (xs_double) sqrt :(xs_double)x;
/* public */ + (xs_double) tan :(xs_double)x;
/* public */ + (xs_double) mod :(xs_double)x :(xs_double)y;
@end

#define XS_DoubleMath_E 2.7182818284590452
#define XS_DoubleMath_LN2 0.6931471805599453
#define XS_DoubleMath_LN10 2.3025850929940460
#define XS_DoubleMath_LOG2E 1.4426950408889634
#define XS_DoubleMath_LOG10E 0.4342944819032518
#define XS_DoubleMath_PI 3.1415926535897932
#define XS_DoubleMath_SQRT1_2 0.7071067811865476
#define XS_DoubleMath_SQRT2 1.4142135623730951

@interface XS_NullableString : NSObject
/* public */ + (NSString*) nullValue;
/* public */ + (NSString*) withValue :(NSString*)value;
/* public */ + (xs_boolean) isNull :(NSString*)value;
/* public */ + (NSString*) getValue :(NSString*)value;
/* public */ + (xs_int) compare :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) equal :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) hasValue :(NSString*)left :(NSString*)right;
/* public */ + (xs_boolean) notEqual :(NSString*)left :(NSString*)right;
/* public */ + (NSString*) toString :(NSString*)left;
@end

@interface XS_NullableBinary : NSObject
/* public */ + (NSData*) nullValue;
/* public */ + (NSData*) withValue :(NSData*)value;
/* public */ + (xs_boolean) isNull :(NSData*)value;
/* public */ + (NSData*) getValue :(NSData*)value;
/* public */ + (xs_int) compare :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) equal :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) hasValue :(NSData*)left :(NSData*)right;
/* public */ + (xs_boolean) notEqual :(NSData*)left :(NSData*)right;
/* public */ + (NSString*) toString :(NSData*)left;
@end

@interface XS_NullableBoolean : NSObject
/* public */ + (xs_nullable_boolean) nullValue;
/* public */ + (xs_nullable_boolean) withValue :(xs_boolean)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_boolean)value;
/* public */ + (xs_boolean) getValue :(xs_nullable_boolean)value;
/* public */ + (xs_int) compare :(xs_nullable_boolean)left :(xs_nullable_boolean)right;
/* public */ + (xs_boolean) equal :(xs_nullable_boolean)left :(xs_nullable_boolean)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_boolean)left :(xs_boolean)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_boolean)left :(xs_nullable_boolean)right;
/* public */ + (NSString*) toString :(xs_nullable_boolean)left;
@end

@interface XS_NullableChar : NSObject
/* public */ + (xs_nullable_char) nullValue;
/* public */ + (xs_nullable_char) withValue :(xs_char)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_char)value;
/* public */ + (xs_char) getValue :(xs_nullable_char)value;
/* public */ + (xs_int) compare :(xs_nullable_char)left :(xs_nullable_char)right;
/* public */ + (xs_boolean) equal :(xs_nullable_char)left :(xs_nullable_char)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_char)left :(xs_char)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_char)left :(xs_nullable_char)right;
/* public */ + (NSString*) toString :(xs_nullable_char)left;
@end

@interface XS_NullableByte : NSObject
/* public */ + (xs_nullable_byte) nullValue;
/* public */ + (xs_nullable_byte) withValue :(xs_byte)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_byte)value;
/* public */ + (xs_byte) getValue :(xs_nullable_byte)value;
/* public */ + (xs_int) compare :(xs_nullable_byte)left :(xs_nullable_byte)right;
/* public */ + (xs_boolean) equal :(xs_nullable_byte)left :(xs_nullable_byte)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_byte)left :(xs_byte)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_byte)left :(xs_nullable_byte)right;
/* public */ + (NSString*) toString :(xs_nullable_byte)left;
@end

@interface XS_NullableShort : NSObject
/* public */ + (xs_nullable_short) nullValue;
/* public */ + (xs_nullable_short) withValue :(xs_short)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_short)value;
/* public */ + (xs_short) getValue :(xs_nullable_short)value;
/* public */ + (xs_int) compare :(xs_nullable_short)left :(xs_nullable_short)right;
/* public */ + (xs_boolean) equal :(xs_nullable_short)left :(xs_nullable_short)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_short)left :(xs_short)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_short)left :(xs_nullable_short)right;
/* public */ + (NSString*) toString :(xs_nullable_short)left;
@end

@interface XS_NullableInt : NSObject
/* public */ + (xs_nullable_int) nullValue;
/* public */ + (xs_nullable_int) withValue :(xs_int)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_int)value;
/* public */ + (xs_int) getValue :(xs_nullable_int)value;
/* public */ + (xs_int) compare :(xs_nullable_int)left :(xs_nullable_int)right;
/* public */ + (xs_boolean) equal :(xs_nullable_int)left :(xs_nullable_int)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_int)left :(xs_int)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_int)left :(xs_nullable_int)right;
/* public */ + (NSString*) toString :(xs_nullable_int)left;
@end

@interface XS_NullableLong : NSObject
/* public */ + (xs_nullable_long) nullValue;
/* public */ + (xs_nullable_long) withValue :(xs_long)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_long)value;
/* public */ + (xs_long) getValue :(xs_nullable_long)value;
/* public */ + (xs_int) compare :(xs_nullable_long)left :(xs_nullable_long)right;
/* public */ + (xs_boolean) equal :(xs_nullable_long)left :(xs_nullable_long)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_long)left :(xs_long)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_long)left :(xs_nullable_long)right;
/* public */ + (NSString*) toString :(xs_nullable_long)left;
@end

@interface XS_NullableInteger : NSObject
/* public */ + (xs_nullable_integer) nullValue;
/* public */ + (xs_nullable_integer) withValue :(xs_integer)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_integer)value;
/* public */ + (xs_integer) getValue :(xs_nullable_integer)value;
/* public */ + (xs_int) compare :(xs_nullable_integer)left :(xs_nullable_integer)right;
/* public */ + (xs_boolean) equal :(xs_nullable_integer)left :(xs_nullable_integer)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_integer)left :(xs_integer)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_integer)left :(xs_nullable_integer)right;
/* public */ + (NSString*) toString :(xs_nullable_integer)left;
@end

@interface XS_NullableDecimal : NSObject
/* public */ + (xs_nullable_decimal) nullValue;
/* public */ + (xs_nullable_decimal) withValue :(xs_decimal)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_decimal)value;
/* public */ + (xs_decimal) getValue :(xs_nullable_decimal)value;
/* public */ + (xs_int) compare :(xs_nullable_decimal)left :(xs_nullable_decimal)right;
/* public */ + (xs_boolean) equal :(xs_nullable_decimal)left :(xs_nullable_decimal)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_decimal)left :(xs_decimal)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_decimal)left :(xs_nullable_decimal)right;
/* public */ + (NSString*) toString :(xs_nullable_decimal)left;
@end

@interface XS_NullableFloat : NSObject
/* public */ + (xs_nullable_float) nullValue;
/* public */ + (xs_nullable_float) withValue :(xs_float)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_float)value;
/* public */ + (xs_float) getValue :(xs_nullable_float)value;
/* public */ + (xs_int) compare :(xs_nullable_float)left :(xs_nullable_float)right;
/* public */ + (xs_boolean) equal :(xs_nullable_float)left :(xs_nullable_float)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_float)left :(xs_float)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_float)left :(xs_nullable_float)right;
/* public */ + (NSString*) toString :(xs_nullable_float)left;
@end

@interface XS_NullableDouble : NSObject
/* public */ + (xs_nullable_double) nullValue;
/* public */ + (xs_nullable_double) withValue :(xs_double)value;
/* public */ + (xs_boolean) isNull :(xs_nullable_double)value;
/* public */ + (xs_double) getValue :(xs_nullable_double)value;
/* public */ + (xs_int) compare :(xs_nullable_double)left :(xs_nullable_double)right;
/* public */ + (xs_boolean) equal :(xs_nullable_double)left :(xs_nullable_double)right;
/* public */ + (xs_boolean) hasValue :(xs_nullable_double)left :(xs_double)right;
/* public */ + (xs_boolean) notEqual :(xs_nullable_double)left :(xs_nullable_double)right;
/* public */ + (NSString*) toString :(xs_nullable_double)left;
@end

@interface XS_ObjectFilter : NSObject
/* public */ + (XS_ObjectFilter*) new;
/* public */ - (xs_boolean) apply :(id)x;
@end

@interface XS_PearsonHashing : NSObject
/* private */ + (void) initialize;
/* public */ + (xs_int) hashBinary :(NSData*)data;
/* public */ + (xs_int) hashString :(NSString*)text;
/* private */ + (NSData*) TABLE;
@end

#define XS_PearsonHashing_TABLE [XS_PearsonHashing TABLE]

@interface XS_SchemaFormat : NSObject
/* public */ + (NSString*) formatBoolean :(xs_boolean)value;
/* public */ + (NSString*) formatByte :(xs_byte)value;
/* public */ + (NSString*) formatShort :(xs_short)value;
/* public */ + (NSString*) formatInt :(xs_int)value;
/* public */ + (NSString*) formatLong :(xs_long)value;
/* public */ + (NSString*) formatInteger :(xs_integer)value;
/* public */ + (NSString*) formatDecimal :(xs_decimal)value;
/* public */ + (NSString*) formatFloat :(xs_float)value;
/* public */ + (NSString*) formatDouble :(xs_double)value;
/* public */ + (NSString*) formatUnsignedByte :(xs_int)value;
/* public */ + (NSString*) formatUnsignedShort :(xs_int)value;
/* public */ + (xs_boolean) parseBoolean :(NSString*)text;
/* public */ + (xs_byte) parseByte :(NSString*)text;
/* public */ + (xs_short) parseShort :(NSString*)text;
/* public */ + (xs_int) parseInt :(NSString*)text;
/* public */ + (xs_long) parseLong :(NSString*)text;
/* public */ + (xs_integer) parseInteger :(NSString*)text;
/* public */ + (xs_decimal) parseDecimal :(NSString*)text;
/* public */ + (xs_float) parseFloat :(NSString*)text;
/* public */ + (xs_double) parseDouble :(NSString*)text;
/* public */ + (xs_int) parseUnsignedByte :(NSString*)text;
/* public */ + (xs_int) parseUnsignedShort :(NSString*)text;
@end

@interface XS_ClientSocket : NSObject
{
    @private xs_int my_socket;
}
/* private */ - (id) init;
/* public */ + (XS_ClientSocket*) new;
/* public */ - (void) open :(NSString*)host :(xs_int)port;
/* public */ - (void) close;
/* public */ - (void) write :(NSData*)data;
/* public */ - (void) write :(NSData*)data :(xs_int)offset :(xs_int)length;
@end

@interface XS_UTF8 : NSObject
/* public */ + (NSString*) toString :(NSData*)data;
/* public */ + (NSData*) toBinary :(NSString*)text;
@end

@interface XS_SystemClock : NSObject
/* public */ + (xs_long) milliTime;
/* public */ + (xs_long) microTime;
/* public */ + (xs_long) nanoTime;
@end

@interface XS_SystemError : NSObject
/* public */ + (NSString*) errorCode :(xs_int)code;
/* public */ + (NSString*) getMessage :(xs_int)code;
/* public */ + (NSString*) gaiMessage :(xs_int)code;
/* public */ + (NSString*) tcpMessage :(xs_int)code;
/* public */ + (xs_int) s_errno;
@end

@interface XS_ThreadSleep : NSObject
/* public */ + (void) forSeconds :(xs_long)time;
/* public */ + (void) forMilliseconds :(xs_long)time;
/* public */ + (void) forMicroseconds :(xs_long)time;
/* public */ + (void) forNanoseconds :(xs_long)time;
@end

@interface XS_UnicodePlus : NSObject
/* public */ + (NSString*) toString :(xs_char)c;
@end

@interface XS_UnsignedInt : NSObject
/* public */ + (xs_int) fromByte :(xs_byte)value;
/* public */ + (xs_int) fromShort :(xs_short)value;
@end

@interface XS_ValueIgnored : NSObject
/* public */ + (void) withObject :(id)value;
/* public */ + (void) withString :(NSString*)value;
/* public */ + (void) withBinary :(NSData*)value;
/* public */ + (void) withBoolean :(xs_boolean)value;
/* public */ + (void) withChar :(xs_char)value;
/* public */ + (void) withByte :(xs_byte)value;
/* public */ + (void) withShort :(xs_short)value;
/* public */ + (void) withInt :(xs_int)value;
/* public */ + (void) withLong :(xs_long)value;
/* public */ + (void) withFloat :(xs_float)value;
/* public */ + (void) withDouble :(xs_double)value;
/* public */ + (void) withInteger :(xs_integer)value;
/* public */ + (void) withDecimal :(xs_decimal)value;
@end

@interface XS_VariableUsed : NSObject
/* public */ + (void) withObject :(id)value;
/* public */ + (void) withString :(NSString*)value;
/* public */ + (void) withBinary :(NSData*)value;
/* public */ + (void) withBoolean :(xs_boolean)value;
/* public */ + (void) withChar :(xs_char)value;
/* public */ + (void) withByte :(xs_byte)value;
/* public */ + (void) withShort :(xs_short)value;
/* public */ + (void) withInt :(xs_int)value;
/* public */ + (void) withLong :(xs_long)value;
/* public */ + (void) withFloat :(xs_float)value;
/* public */ + (void) withDouble :(xs_double)value;
/* public */ + (void) withInteger :(xs_integer)value;
/* public */ + (void) withDecimal :(xs_decimal)value;
@end

#endif
