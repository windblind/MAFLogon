// Generated by SAP AFX Compiler (Tue Mar 10 11:04:27 CET 2015)

#ifndef SAP_XS_DECIMAL_H
#define SAP_XS_DECIMAL_H

#include "sap_xs_runtime.h"

@class XS_BigDecimal;

@interface XS_BigDecimal : NSObject
{
    @private xs_int my_big6;
    @private xs_int my_big5;
    @private xs_int my_big4;
    @private xs_int my_big3;
    @private xs_int my_big2;
    @private xs_int my_big1;
    @private xs_byte my_sign;
    @private xs_short my_scale;
}
/* private */ - (id) init;
/* private */ + (void) initialize;
/* private */ + (XS_BigDecimal*) ZERO;
/* private */ + (XS_BigDecimal*) ONE;
/* private */ + (XS_BigDecimal*) TWO;
/* public */ - (xs_int) sign;
/* public */ - (xs_int) scale;
/* public */ - (XS_BigDecimal*) add :(XS_BigDecimal*)p_y;
/* public */ - (XS_BigDecimal*) subtract :(XS_BigDecimal*)p_y;
/* public */ - (XS_BigDecimal*) multiply :(XS_BigDecimal*)p_y;
/* public */ - (XS_BigDecimal*) divide :(XS_BigDecimal*)p_y;
/* public */ - (XS_BigDecimal*) remainder :(XS_BigDecimal*)y;
/* public */ - (XS_BigDecimal*) negate;
/* public */ - (XS_BigDecimal*) abs;
/* public */ - (XS_BigDecimal*) ceiling;
/* public */ - (XS_BigDecimal*) floor;
/* public */ - (XS_BigDecimal*) round;
/* public */ - (XS_BigDecimal*) round :(xs_int)p_scale;
/* public */ - (XS_BigDecimal*) truncate;
/* public */ - (xs_int) compareTo :(XS_BigDecimal*)p_y;
/* public */ - (xs_boolean) equals :(XS_BigDecimal*)y;
/* public */ - (xs_boolean) notEqual :(XS_BigDecimal*)y;
/* public */ - (xs_boolean) lessThan :(XS_BigDecimal*)y;
/* public */ - (xs_boolean) lessEqual :(XS_BigDecimal*)y;
/* public */ - (xs_boolean) greaterThan :(XS_BigDecimal*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_BigDecimal*)y;
/* public */ - (NSString*) toString;
/* public */ + (XS_BigDecimal*) fromByte :(xs_byte)value;
/* public */ + (XS_BigDecimal*) fromShort :(xs_short)value;
/* public */ + (XS_BigDecimal*) fromInt :(xs_int)value;
/* public */ + (XS_BigDecimal*) fromLong :(xs_long)value;
/* public */ + (XS_BigDecimal*) fromFloat :(xs_float)value;
/* public */ + (XS_BigDecimal*) fromDouble :(xs_double)value;
/* public */ + (XS_BigDecimal*) parse :(NSString*)text;
/* public */ - (xs_byte) byteValue;
/* public */ - (xs_short) shortValue;
/* public */ - (xs_int) intValue;
/* public */ - (xs_long) longValue;
/* public */ - (xs_float) floatValue;
/* public */ - (xs_double) doubleValue;
/* private */ - (xs_int) getDigit :(xs_int)i;
/* private */ - (void) setDigit :(xs_int)i :(xs_int)v;
/* private */ - (xs_int) compareAbs :(XS_BigDecimal*)y;
/* private */ + (XS_BigDecimal*) createZero;
/* private */ + (XS_BigDecimal*) makeNumber :(xs_int)p_big6 :(xs_int)p_big5 :(xs_int)p_big4 :(xs_int)p_big3 :(xs_int)p_big2 :(xs_int)p_big1 :(xs_int)p_sign :(xs_int)p_scale;
/* private */ + (XS_BigDecimal*) lowNumber :(xs_int)p_big1;
/* private */ - (XS_BigDecimal*) getDigits;
/* private */ - (xs_boolean) lowOnly;
/* private */ - (XS_BigDecimal*) lowPlus :(xs_int)y;
/* private */ - (XS_BigDecimal*) shiftLeft :(xs_int)n;
/* private */ + (xs_int) highDigit :(xs_long)x;
/* private */ + (xs_int) lowDigit :(xs_long)x;
/* private */ + (xs_long) digitMul :(xs_long)x :(xs_long)y;
/* private */ + (xs_int) digitDiv :(xs_long)x :(xs_long)y;
/* private */ + (xs_int) digitRem :(xs_long)x :(xs_long)y;
/* private */ - (XS_BigDecimal*) withSign :(xs_int)p_sign;
/* private */ - (XS_BigDecimal*) withScale :(xs_int)p_scale :(xs_int)p_mode;
/* private */ - (XS_BigDecimal*) signScale :(xs_int)p_sign :(xs_int)p_scale;
/* private */ + (void) badFormat :(NSString*)text;
/* private */ + (xs_decimal) DEC_10;
/* private */ + (xs_decimal) DEC_100;
/* private */ + (xs_decimal) DEC_1000;
/* private */ + (xs_decimal) DEC_10000;
/* private */ + (xs_decimal) DEC_100000;
/* private */ + (XS_BigDecimal*) DC1 :(xs_int)p1 :(xs_int)p2 :(xs_int)p3 :(xs_int)p4 :(xs_int)p5 :(xs_int)p6 :(xs_short)p7 :(xs_byte)p8;
@end

#define XS_BigDecimal_ROUND_NONE 0
#define XS_BigDecimal_ROUND_DOWN 1
#define XS_BigDecimal_ROUND_EVEN 2
#define XS_BigDecimal_ROUND_UP 3
#define XS_BigDecimal_DIGIT_SIZE 6
#define XS_BigDecimal_SINGLE_ZERO 0
#define XS_BigDecimal_DOUBLE_ZERO 0
#define XS_BigDecimal_SINGLE_LIMIT 1000000
#define XS_BigDecimal_DOUBLE_LIMIT XS_LONG(1000000000000)
#define XS_BigDecimal_LOW_INDEX 1
#define XS_BigDecimal_HIGH_INDEX 6
#define XS_BigDecimal_MIN_SBYTE -128
#define XS_BigDecimal_MAX_SBYTE 127
#define XS_BigDecimal_MIN_INT16 -32768
#define XS_BigDecimal_MAX_INT16 32767
#define XS_BigDecimal_XS_INTEGER NO
#define XS_BigDecimal_XS_DECIMAL YES
#define XS_BigDecimal_DEC_10 [XS_BigDecimal DEC_10]
#define XS_BigDecimal_DEC_100 [XS_BigDecimal DEC_100]
#define XS_BigDecimal_DEC_1000 [XS_BigDecimal DEC_1000]
#define XS_BigDecimal_DEC_10000 [XS_BigDecimal DEC_10000]
#define XS_BigDecimal_DEC_100000 [XS_BigDecimal DEC_100000]

#endif
