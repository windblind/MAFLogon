// Generated by SAP AFX Compiler (Tue Mar 10 11:04:28 CET 2015)

#ifndef SAP_XS_DATA1_H
#define SAP_XS_DATA1_H

#include "sap_xs_runtime.h"

@class XS_DataVersion;
@class XS_SystemFlags;
@class XS_DataException;
@class XS_DataFormatException;
@class XS_DataNetworkException;
@class XS_DataQueryException;
@class XS_DataServiceException;
@class XS_DataStorageException;
@class XS_DataStreamException;
@class XS_DataTypeException;
@class XS_RequestOptions;
@class XS_DataType;
@class XS_StringValueNotEmpty;
@class XS_DataValue;
@class XS_StringValue;
@class XS_BinaryValue;
@class XS_BooleanValue;
@class XS_CharValue;
@class XS_ByteValue;
@class XS_ShortValue;
@class XS_IntValue;
@class XS_LongValue;
@class XS_IntegerValue;
@class XS_DecimalValue;
@class XS_FloatValue;
@class XS_DoubleValue;
@class XS_UnsignedByte;
@class XS_UnsignedShort;
@class XS_GuidValue;
@class XS_ByteStream;
@class XS_ByteStreamFromBinary;
@class XS_CharStream;
@class XS_CharStreamFromString;
@class XS_CharStreamFromBytes;
@class XS_DayOfWeek;
@class XS_MonthOfYear;
@class XS_LocalDate;
@class XS_LocalTime;
@class XS_LocalDateTime;
@class XS_GlobalDateTime;
@class XS_DayTimeDuration;
@class XS_YearMonthDuration;
@class XS_DateNumber;
@class XS_TimeNumber;
@class XS_DateTimeFormat;
@class XS_DateTimeParser;
@class XS_DataComparer;
@class XS_DataEquality;
@class XS_ListBase;
@class XS_ObjectList;
@class XS_BooleanList;
@class XS_CharList;
@class XS_ByteList;
@class XS_ShortList;
@class XS_IntList;
@class XS_LongList;
@class XS_IntegerList;
@class XS_DecimalList;
@class XS_FloatList;
@class XS_DoubleList;
@class XS_StringList;
@class XS_BinaryList;
@class XS_Map;
@class XS_ObjectMap;
@class XS_StringMap;
@class XS_StringSet;
@class XS_DataTypeList;
@class XS_DataTypeMap;
@class XS_BasicTypes;
@class XS_EnumValue;
@class XS_EnumValueList;
@class XS_EnumValueMap;
@class XS_TypeFacets;
@class XS_UnknownValue;
@class XS_PointCoordinates;
@class XS_MultiPointCoordinates;
@class XS_CurveCoordinates;
@class XS_MultiCurveCoordinates;
@class XS_PolygonCoordinates;
@class XS_MultiPolygonCoordinates;
@class XS_GeographyValue;
@class XS_GeographyValueList;
@class XS_GeographyPoint;
@class XS_GeographyMultiPoint;
@class XS_GeographyLineString;
@class XS_GeographyMultiLineString;
@class XS_GeographyPolygon;
@class XS_GeographyMultiPolygon;
@class XS_GeographyCollection;
@class XS_GeometryValue;
@class XS_GeometryValueList;
@class XS_GeometryPoint;
@class XS_GeometryMultiPoint;
@class XS_GeometryLineString;
@class XS_GeometryMultiLineString;
@class XS_GeometryPolygon;
@class XS_GeometryMultiPolygon;
@class XS_GeometryCollection;
@class XS_Parameter;
@class XS_ParameterList;
@class XS_Annotation;
@class XS_AnnotationList;
@class XS_AnnotationMap;
@class XS_AnnotationTerm;
@class XS_AnnotationTermList;
@class XS_AnnotationTermMap;
@class XS_PropertyInfo;
@class XS_PropertyInfoList;
@class XS_PropertyInfoMap;
@class XS_CustomPath;
@class XS_CustomPathList;
@class XS_DataStatistics;
@class XS_DataStatistic;
@class XS_DataValueList;
@class XS_DataValueMap;
@class XS_SimpleType;
@class XS_SimpleTypeList;
@class XS_SimpleTypeMap;
@class XS_EnumType;
@class XS_ComplexType;
@class XS_ComplexTypeList;
@class XS_ComplexTypeMap;
@class XS_ComplexValue;
@class XS_ComplexValueList;
@class XS_EntitySet;
@class XS_EntitySetList;
@class XS_EntitySetMap;
@class XS_EntityType;
@class XS_EntityTypeList;
@class XS_EntityTypeMap;
@class XS_EntityValue;
@class XS_EntityValueList;
@class XS_ChangedLink;
@class XS_ChangedLinkList;
@class XS_StreamLink;
@class XS_DataMethod;
@class XS_DataMethodList;
@class XS_DataMethodMap;
@class XS_EntityContainer;
@class XS_EntityContainerList;
@class XS_EntityContainerMap;
@class XS_DataSchema;
@class XS_DataSchemaList;
@class XS_DataSchemaMap;
@class XS_MethodCall;
@class XS_PathValue;
@class XS_AnnotationPath;
@class XS_PropertyPath;
@class XS_StructuralPropertyPath;
@class XS_NavigationPropertyPath;
@class XS_SystemKey;
@class XS_DeltaStream;
@class XS_StatementCache;
@class XS_DataFormat;
@class XS_DataContext;
@class XS_DeferredValue;
@class XS_ErrorResponse;
@class XS_ErrorResponseList;
@class XS_UrlConventions;
@class XS_LoginCredentials;

@interface XS_DataVersion : NSObject
/* public */ + (XS_DataVersion*) new;
@end

#define XS_DataVersion_ODATA_V2 200
#define XS_DataVersion_ODATA_V3 300
#define XS_DataVersion_ODATA_V4 400

/* internal */ @interface XS_SystemFlags : NSObject
/* public */ + (XS_SystemFlags*) new;
@end

#define XS_SystemFlags_CACHE_SELECT 1
#define XS_SystemFlags_CACHED_SELECT 2
#define XS_SystemFlags_IS_LOCAL 1
#define XS_SystemFlags_IS_SYSTEM 2
#define XS_SystemFlags_IS_NEW 1
#define XS_SystemFlags_IS_CREATED 2
#define XS_SystemFlags_IS_UPDATED 4
#define XS_SystemFlags_IS_DELETED 8
#define XS_SystemFlags_IS_PARTIAL 16
#define XS_SystemFlags_IS_PENDING 32
#define XS_SystemFlags_IN_UPLOAD 64
#define XS_SystemFlags_IN_DOWNLOAD 128
#define XS_SystemFlags_IN_SYNC_TRAN 256

@interface XS_DataException : NSException
{
    @protected NSException* cause_;
    @protected NSString* message_;
}
/* public */ @property (readonly, strong) NSException* cause;
/* public */ @property (readonly, strong) NSString* message;
/* private */ - (id) init;
/* public */ - (NSException*) cause;
/* public */ - (NSString*) message;
+ (XS_DataException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataException*) withCause :(NSException*)param_cause;
/* public */ + (XS_DataException*) withMessage :(NSString*)param_message;
/* private */ + (XS_DataException*) DC1 :(NSException*)p1;
/* private */ + (XS_DataException*) DC2 :(NSString*)p1;
@end

@interface XS_DataFormatException : XS_DataException
/* private */ - (id) init;
+ (XS_DataFormatException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataFormatException*) withMessage :(NSString*)param_message;
/* public */ + (XS_DataFormatException*) badFormat :(NSString*)type :(NSString*)value;
/* private */ + (XS_DataFormatException*) DC1 :(NSString*)p1;
@end

@interface XS_DataNetworkException : XS_DataException
/* private */ - (id) init;
+ (XS_DataNetworkException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataNetworkException*) withCause :(NSException*)param_cause;
/* public */ + (XS_DataNetworkException*) withMessage :(NSString*)param_message;
/* private */ + (XS_DataNetworkException*) DC1 :(NSException*)p1;
/* private */ + (XS_DataNetworkException*) DC2 :(NSString*)p1;
@end

@interface XS_DataQueryException : XS_DataException
/* private */ - (id) init;
+ (XS_DataQueryException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataQueryException*) withCause :(NSException*)param_cause;
/* public */ + (XS_DataQueryException*) withMessage :(NSString*)param_message;
/* private */ + (XS_DataQueryException*) DC1 :(NSException*)p1;
/* private */ + (XS_DataQueryException*) DC2 :(NSString*)p1;
@end

@interface XS_DataServiceException : XS_DataException
{
    @protected xs_int status_;
    @protected XS_ErrorResponse* response_;
}
/* public */ @property (readonly) xs_int status;
/* public */ @property (readonly, strong) XS_ErrorResponse* response;
/* private */ - (id) init;
/* public */ - (xs_int) status;
/* public */ - (XS_ErrorResponse*) response;
+ (XS_DataServiceException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataServiceException*) withCause :(NSException*)param_cause;
/* public */ + (XS_DataServiceException*) withMessage :(NSString*)param_message;
/* public */ + (XS_DataServiceException*) withStatus :(xs_int)param_status :(NSString*)param_message;
/* public */ + (XS_DataServiceException*) withResponse :(xs_int)param_status :(NSString*)param_message :(XS_ErrorResponse*)param_response;
/* private */ + (XS_DataServiceException*) DC1 :(NSException*)p1;
/* private */ + (XS_DataServiceException*) DC2 :(NSString*)p1;
/* private */ + (XS_DataServiceException*) DC4 :(NSString*)p1 :(XS_ErrorResponse*)p2 :(xs_int)p3;
/* private */ + (XS_DataServiceException*) DC3 :(NSString*)p1 :(xs_int)p2;
@end

@interface XS_DataStorageException : XS_DataException
/* private */ - (id) init;
+ (XS_DataStorageException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataStorageException*) withCause :(NSException*)param_cause;
/* public */ + (XS_DataStorageException*) withMessage :(NSString*)param_message;
/* public */ + (XS_DataStorageException*) withCauseAndMessage :(NSException*)param_cause :(NSString*)param_message;
/* private */ + (XS_DataStorageException*) DC1 :(NSException*)p1;
/* private */ + (XS_DataStorageException*) DC3 :(NSException*)p1 :(NSString*)p2;
/* private */ + (XS_DataStorageException*) DC2 :(NSString*)p1;
@end

@interface XS_DataStreamException : XS_DataException
/* private */ - (id) init;
+ (XS_DataStreamException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataStreamException*) withCause :(NSException*)param_cause;
/* public */ + (XS_DataStreamException*) withMessage :(NSString*)param_message;
/* private */ + (XS_DataStreamException*) DC1 :(NSException*)p1;
/* private */ + (XS_DataStreamException*) DC2 :(NSString*)p1;
@end

@interface XS_DataTypeException : XS_DataException
/* private */ - (id) init;
+ (XS_DataTypeException*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataTypeException*) withMessage :(NSString*)param_message;
/* private */ + (XS_DataTypeException*) DC1 :(NSString*)p1;
@end

@interface XS_RequestOptions : NSObject
{
    @private xs_boolean isOffline_;
    @private xs_boolean isOnline_;
    @private xs_boolean throwError_;
}
/* public */ @property xs_boolean isOffline;
/* public */ @property xs_boolean isOnline;
/* public */ @property xs_boolean throwError;
/* private */ - (id) init;
/* public */ + (XS_RequestOptions*) new;
/* public */ - (xs_boolean) isOffline;
/* public */ - (void) setIsOffline :(xs_boolean)value;
/* public */ - (xs_boolean) isOnline;
/* public */ - (void) setIsOnline :(xs_boolean)value;
/* public */ - (xs_boolean) throwError;
/* public */ - (void) setThrowError :(xs_boolean)value;
@end

@interface XS_DataType : NSObject
{
    @private xs_int my_code_;
    @private NSString* my_name_;
    @private XS_DataType* my_item_;
    @private XS_DataType* my_base_;
}
/* protected */ @property xs_int my_code;
/* protected */ @property (strong) NSString* my_name;
/* protected */ @property (strong) XS_DataType* my_item;
/* protected */ @property (strong) XS_DataType* my_base;
/* public */ @property (readonly) xs_int code;
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (readonly, strong) XS_DataType* baseType;
/* public */ @property (readonly, strong) XS_DataType* itemType;
/* public */ @property (readonly) xs_boolean isBasic;
/* public */ @property (readonly) xs_boolean isBasicList;
/* public */ @property (readonly) xs_boolean isNumber;
/* public */ @property (readonly) xs_boolean isDerived;
/* public */ @property (readonly) xs_boolean isComplex;
/* public */ @property (readonly) xs_boolean isComplexList;
/* public */ @property (readonly) xs_boolean isEntity;
/* public */ @property (readonly) xs_boolean isEntityList;
/* public */ @property (readonly) xs_boolean isEnum;
/* public */ @property (readonly) xs_boolean isGuid;
/* public */ @property (readonly) xs_boolean isStream;
/* public */ @property (readonly) xs_boolean isList;
/* public */ @property (readonly) xs_boolean isCalendar;
/* public */ @property (readonly) xs_boolean isGeography;
/* public */ @property (readonly) xs_boolean isGeometry;
/* public */ @property (readonly) xs_boolean isPath;
/* public */ @property (readonly) xs_boolean isUnsigned;
/* private */ - (id) init;
/* protected */ - (xs_int) my_code;
/* protected */ - (void) setMy_code :(xs_int)value;
/* protected */ - (NSString*) my_name;
/* protected */ - (void) setMy_name :(NSString*)value;
/* protected */ - (XS_DataType*) my_item;
/* protected */ - (void) setMy_item :(XS_DataType*)value;
/* protected */ - (XS_DataType*) my_base;
/* protected */ - (void) setMy_base :(XS_DataType*)value;
/* public */ - (xs_int) code;
/* public */ - (NSString*) name;
/* public */ - (XS_DataType*) baseType;
/* public */ - (XS_DataType*) itemType;
/* public */ - (xs_boolean) isBasic;
/* public */ - (xs_boolean) isBasicList;
/* public */ - (xs_boolean) isNumber;
/* public */ - (xs_boolean) isDerived;
/* public */ - (xs_boolean) isComplex;
/* public */ - (xs_boolean) isComplexList;
/* public */ - (xs_boolean) isEntity;
/* public */ - (xs_boolean) isEntityList;
/* public */ - (xs_boolean) isEnum;
/* public */ - (xs_boolean) isGuid;
/* public */ - (xs_boolean) isStream;
/* public */ - (xs_boolean) isList;
/* public */ - (xs_boolean) isCalendar;
/* public */ - (xs_boolean) isGeography;
/* public */ - (xs_boolean) isGeometry;
/* public */ - (xs_boolean) isPath;
/* public */ - (xs_boolean) isUnsigned;
+ (XS_DataType*) new;
/* protected */ - (void) privateInit;
/* public */ + (XS_DataType*) getBasic :(xs_int)param_code :(NSString*)param_name;
/* public */ + (XS_DataType*) getList :(xs_int)param_code :(XS_DataType*)item;
/* public */ + (XS_DataType*) forCode :(xs_int)param_code;
/* public */ + (XS_DataType*) forName :(NSString*)param_name;
/* public */ + (XS_DataType*) listOf :(XS_DataType*)item;
/* public */ - (NSString*) toString;
/* private */ + (XS_DataType*) DC2 :(xs_int)p1 :(XS_DataType*)p2 :(NSString*)p3;
/* private */ + (XS_DataType*) DC1 :(xs_int)p1 :(NSString*)p2;
@end

#define XS_DataType_UNKNOWN 0
#define XS_DataType_STRING 1
#define XS_DataType_BINARY 2
#define XS_DataType_BOOLEAN 3
#define XS_DataType_CHAR 4
#define XS_DataType_BYTE 5
#define XS_DataType_SHORT 6
#define XS_DataType_INT 7
#define XS_DataType_LONG 8
#define XS_DataType_INTEGER 9
#define XS_DataType_DECIMAL 10
#define XS_DataType_FLOAT 11
#define XS_DataType_DOUBLE 12
#define XS_DataType_UNSIGNED_BYTE 13
#define XS_DataType_UNSIGNED_SHORT 14
#define XS_DataType_UNSIGNED_INT 15
#define XS_DataType_UNSIGNED_LONG 16
#define XS_DataType_ENUM_VALUE 17
#define XS_DataType_GUID_VALUE 18
#define XS_DataType_BYTE_STREAM 19
#define XS_DataType_CHAR_STREAM 20
#define XS_DataType_STREAM_LINK 21
#define XS_DataType_LOCAL_DATE 22
#define XS_DataType_LOCAL_TIME 23
#define XS_DataType_LOCAL_DATE_TIME 24
#define XS_DataType_GLOBAL_DATE_TIME 25
#define XS_DataType_DAY_TIME_DURATION 26
#define XS_DataType_YEAR_MONTH_DURATION 27
#define XS_DataType_GEOGRAPHY_VALUE 31
#define XS_DataType_GEOGRAPHY_POINT 32
#define XS_DataType_GEOGRAPHY_MULTI_POINT 33
#define XS_DataType_GEOGRAPHY_LINE_STRING 34
#define XS_DataType_GEOGRAPHY_MULTI_LINE_STRING 35
#define XS_DataType_GEOGRAPHY_POLYGON 36
#define XS_DataType_GEOGRAPHY_MULTI_POLYGON 37
#define XS_DataType_GEOGRAPHY_COLLECTION 38
#define XS_DataType_GEOMETRY_VALUE 41
#define XS_DataType_GEOMETRY_POINT 42
#define XS_DataType_GEOMETRY_MULTI_POINT 43
#define XS_DataType_GEOMETRY_LINE_STRING 44
#define XS_DataType_GEOMETRY_MULTI_LINE_STRING 45
#define XS_DataType_GEOMETRY_POLYGON 46
#define XS_DataType_GEOMETRY_MULTI_POLYGON 47
#define XS_DataType_GEOMETRY_COLLECTION 48
#define XS_DataType_EDM_PRIMITIVE 49
#define XS_DataType_OBJECT 50
#define XS_DataType_COMPLEX_VALUE 51
#define XS_DataType_ENTITY_VALUE 52
#define XS_DataType_LIST 60
#define XS_DataType_STRING_LIST 61
#define XS_DataType_BINARY_LIST 62
#define XS_DataType_BOOLEAN_LIST 63
#define XS_DataType_CHAR_LIST 64
#define XS_DataType_BYTE_LIST 65
#define XS_DataType_SHORT_LIST 66
#define XS_DataType_INT_LIST 67
#define XS_DataType_LONG_LIST 68
#define XS_DataType_INTEGER_LIST 69
#define XS_DataType_DECIMAL_LIST 70
#define XS_DataType_FLOAT_LIST 71
#define XS_DataType_DOUBLE_LIST 72
#define XS_DataType_OBJECT_LIST 73
#define XS_DataType_COMPLEX_VALUE_LIST 74
#define XS_DataType_ENTITY_VALUE_LIST 75
#define XS_DataType_DATA_VALUE_LIST 76
#define XS_DataType_PATH_VALUE 80
#define XS_DataType_ANNOTATION_PATH 81
#define XS_DataType_STRUCTURAL_PROPERTY_PATH 82
#define XS_DataType_NAVIGATION_PROPERTY_PATH 83
#define XS_DataType_QUERY_PATH 91
#define XS_DataType_QUERY_FILTER 92
#define XS_DataType_QUERY_FUNCTION_CALL 93
#define XS_DataType_QUERY_OPERATOR_CALL 94
#define XS_DataType_QUERY_SELECT_ITEM 95
#define XS_DataType_QUERY_EXPAND_ITEM 96

@interface XS_StringValueNotEmpty : XS_ObjectFilter
/* private */ + (void) initialize;
/* public */ + (XS_StringValueNotEmpty*) new;
/* public */ + (XS_ObjectFilter*) FILTER;
/* public */ - (xs_boolean) apply :(id)x;
@end

@interface XS_DataValue : NSObject
{
    @protected XS_DataType* dataType_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ + (XS_DataValue*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* public */ + (XS_DataValue*) cloneMutable :(XS_DataValue*)value;
/* public */ + (void) checkValue :(XS_DataValue*)value :(xs_int)tc;
@end

@interface XS_StringValue : XS_DataValue
{
    @protected NSString* value_;
}
/* public */ @property (readonly, strong) NSString* value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (NSString*) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_StringValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_StringValue*)x :(XS_StringValue*)y;
/* public */ + (xs_boolean) equal :(XS_StringValue*)x :(XS_StringValue*)y;
/* public */ + (XS_StringValue*) of :(NSString*)param_value;
/* public */ + (XS_StringValue*) ofNullable :(NSString*)param_value;
/* public */ + (NSString*) toNullable :(XS_DataValue*)param_value;
/* public */ + (NSString*) getString :(XS_DataValue*)param_value;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_StringValue*) DC1 :(NSString*)p1;
@end

@interface XS_BinaryValue : XS_DataValue
{
    @private NSData* value_;
}
/* public */ @property (readonly, strong) NSData* value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (NSData*) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_BinaryValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_BinaryValue*)x :(XS_BinaryValue*)y;
/* public */ + (xs_boolean) equal :(XS_BinaryValue*)x :(XS_BinaryValue*)y;
/* public */ + (XS_BinaryValue*) of :(NSData*)param_value;
/* public */ + (XS_BinaryValue*) ofNullable :(NSData*)param_value;
/* public */ + (NSData*) toNullable :(XS_DataValue*)param_value;
/* public */ + (NSData*) getBinary :(XS_DataValue*)param_value;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_BinaryValue*) DC1 :(NSData*)p1;
@end

@interface XS_BooleanValue : XS_DataValue
{
    @protected xs_boolean value_;
}
/* public */ @property (readonly) xs_boolean value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_boolean) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_BooleanValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_BooleanValue*)x :(XS_BooleanValue*)y;
/* public */ + (xs_boolean) equal :(XS_BooleanValue*)x :(XS_BooleanValue*)y;
/* public */ + (XS_BooleanValue*) of :(xs_boolean)param_value;
/* public */ + (XS_BooleanValue*) ofNullable :(xs_nullable_boolean)param_value;
/* public */ + (xs_nullable_boolean) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_boolean) getBoolean :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_BooleanValue*) DC1 :(xs_boolean)p1;
@end

@interface XS_CharValue : XS_DataValue
{
    @protected xs_char value_;
}
/* public */ @property (readonly) xs_char value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_char) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_CharValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_CharValue*)x :(XS_CharValue*)y;
/* public */ + (xs_boolean) equal :(XS_CharValue*)x :(XS_CharValue*)y;
/* public */ + (XS_CharValue*) of :(xs_char)param_value;
/* public */ + (XS_CharValue*) ofNullable :(xs_nullable_char)param_value;
/* public */ + (xs_nullable_char) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_char) getChar :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_CharValue*) DC1 :(xs_char)p1;
@end

@interface XS_ByteValue : XS_DataValue
{
    @protected xs_byte value_;
}
/* public */ @property (readonly) xs_byte value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_byte) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_ByteValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_ByteValue*)x :(XS_ByteValue*)y;
/* public */ + (xs_boolean) equal :(XS_ByteValue*)x :(XS_ByteValue*)y;
/* public */ + (XS_ByteValue*) of :(xs_byte)param_value;
/* public */ + (XS_ByteValue*) ofNullable :(xs_nullable_byte)param_value;
/* public */ + (xs_nullable_byte) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_byte) getByte :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_ByteValue*) DC1 :(xs_byte)p1;
@end

@interface XS_ShortValue : XS_DataValue
{
    @protected xs_short value_;
}
/* public */ @property (readonly) xs_short value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_short) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_ShortValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_ShortValue*)x :(XS_ShortValue*)y;
/* public */ + (xs_boolean) equal :(XS_ShortValue*)x :(XS_ShortValue*)y;
/* public */ + (XS_ShortValue*) of :(xs_short)param_value;
/* public */ + (XS_ShortValue*) ofNullable :(xs_nullable_short)param_value;
/* public */ + (xs_nullable_short) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_short) getShort :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_ShortValue*) DC1 :(xs_short)p1;
@end

@interface XS_IntValue : XS_DataValue
{
    @protected xs_int value_;
}
/* public */ @property (readonly) xs_int value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_int) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_IntValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_IntValue*)x :(XS_IntValue*)y;
/* public */ + (xs_boolean) equal :(XS_IntValue*)x :(XS_IntValue*)y;
/* public */ + (XS_IntValue*) of :(xs_int)param_value;
/* public */ + (XS_IntValue*) ofNullable :(xs_nullable_int)param_value;
/* public */ + (xs_nullable_int) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_int) getInt :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_IntValue*) DC1 :(xs_int)p1;
@end

@interface XS_LongValue : XS_DataValue
{
    @protected xs_long value_;
}
/* public */ @property (readonly) xs_long value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_long) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_LongValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_LongValue*)x :(XS_LongValue*)y;
/* public */ + (xs_boolean) equal :(XS_LongValue*)x :(XS_LongValue*)y;
/* public */ + (XS_LongValue*) of :(xs_long)param_value;
/* public */ + (XS_LongValue*) ofNullable :(xs_nullable_long)param_value;
/* public */ + (xs_nullable_long) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_long) getLong :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_LongValue*) DC1 :(xs_long)p1;
@end

@interface XS_IntegerValue : XS_DataValue
{
    @protected xs_integer value_;
}
/* public */ @property (readonly) xs_integer value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ - (xs_integer) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_IntegerValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_IntegerValue*)x :(XS_IntegerValue*)y;
/* public */ + (xs_boolean) equal :(XS_IntegerValue*)x :(XS_IntegerValue*)y;
/* public */ + (XS_IntegerValue*) of :(xs_integer)param_value;
/* public */ + (XS_IntegerValue*) ofNullable :(xs_nullable_integer)param_value;
/* public */ + (xs_nullable_integer) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_integer) getInteger :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_IntegerValue*) DC1 :(xs_integer)p1;
@end

@interface XS_DecimalValue : XS_DataValue
{
    @protected xs_decimal value_;
}
/* public */ @property (readonly) xs_decimal value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ - (xs_decimal) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_DecimalValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_DecimalValue*)x :(XS_DecimalValue*)y;
/* public */ + (xs_boolean) equal :(XS_DecimalValue*)x :(XS_DecimalValue*)y;
/* public */ + (XS_DecimalValue*) of :(xs_decimal)param_value;
/* public */ + (XS_DecimalValue*) ofNullable :(xs_nullable_decimal)param_value;
/* public */ + (xs_nullable_decimal) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_decimal) getDecimal :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_DecimalValue*) DC1 :(xs_decimal)p1;
@end

@interface XS_FloatValue : XS_DataValue
{
    @protected xs_float value_;
}
/* public */ @property (readonly) xs_float value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_float) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_FloatValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_FloatValue*)x :(XS_FloatValue*)y;
/* public */ + (xs_boolean) equal :(XS_FloatValue*)x :(XS_FloatValue*)y;
/* public */ + (XS_FloatValue*) of :(xs_float)param_value;
/* public */ + (XS_FloatValue*) ofNullable :(xs_nullable_float)param_value;
/* public */ + (xs_nullable_float) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_float) getFloat :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_FloatValue*) DC1 :(xs_float)p1;
@end

@interface XS_DoubleValue : XS_DataValue
{
    @protected xs_double value_;
}
/* public */ @property (readonly) xs_double value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_double) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_DoubleValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_DoubleValue*)x :(XS_DoubleValue*)y;
/* public */ + (xs_boolean) equal :(XS_DoubleValue*)x :(XS_DoubleValue*)y;
/* public */ + (XS_DoubleValue*) of :(xs_double)param_value;
/* public */ + (XS_DoubleValue*) ofNullable :(xs_nullable_double)param_value;
/* public */ + (xs_nullable_double) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_double) getDouble :(XS_DataValue*)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_DoubleValue*) DC1 :(xs_double)p1;
@end

@interface XS_UnsignedByte : XS_DataValue
{
    @protected xs_int value_;
}
/* public */ @property (readonly) xs_int value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_int) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_UnsignedByte*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_UnsignedByte*)x :(XS_UnsignedByte*)y;
/* public */ + (xs_boolean) equal :(XS_UnsignedByte*)x :(XS_UnsignedByte*)y;
/* public */ + (XS_UnsignedByte*) of :(xs_int)param_value;
/* public */ + (XS_UnsignedByte*) ofNullable :(xs_nullable_int)param_value;
/* public */ + (xs_nullable_int) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_int) getInt :(XS_DataValue*)param_value;
/* public */ + (xs_int) toInt :(xs_byte)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_UnsignedByte*) DC1 :(xs_int)p1;
@end

@interface XS_UnsignedShort : XS_DataValue
{
    @protected xs_int value_;
}
/* public */ @property (readonly) xs_int value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (xs_int) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_UnsignedShort*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_UnsignedShort*)x :(XS_UnsignedShort*)y;
/* public */ + (xs_boolean) equal :(XS_UnsignedShort*)x :(XS_UnsignedShort*)y;
/* public */ + (XS_UnsignedShort*) of :(xs_int)param_value;
/* public */ + (XS_UnsignedShort*) ofNullable :(xs_nullable_int)param_value;
/* public */ + (xs_nullable_int) toNullable :(XS_DataValue*)param_value;
/* public */ + (xs_int) getInt :(XS_DataValue*)param_value;
/* public */ + (xs_int) toInt :(xs_short)param_value;
/* public */ - (NSString*) toString;
/* private */ + (XS_UnsignedShort*) DC1 :(xs_int)p1;
@end

@interface XS_GuidValue : XS_DataValue
{
    @protected XS_GUID* value_;
}
/* public */ @property (readonly, strong) XS_GUID* value;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (XS_GUID*) value;
/* public */ - (XS_DataType*) dataType;
+ (XS_GuidValue*) new;
/* private */ - (void) privateInit;
/* public */ + (xs_int) compare :(XS_GuidValue*)x :(XS_GuidValue*)y;
/* public */ + (xs_boolean) equal :(XS_GuidValue*)x :(XS_GuidValue*)y;
/* public */ + (XS_GuidValue*) of :(XS_GUID*)param_value;
/* public */ + (XS_GuidValue*) parse :(NSString*)param_value;
/* public */ + (XS_GuidValue*) random;
/* public */ - (NSString*) toString;
/* public */ - (NSData*) toBinary;
/* public */ - (NSString*) toString32;
/* public */ - (NSString*) toString36;
/* private */ + (XS_GuidValue*) DC1 :(XS_GUID*)p1;
@end

@interface XS_ByteStream : XS_DataValue
{
    @private NSString* mediaType_;
    @private NSString* entityTag_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) NSString* mediaType;
/* public */ @property (strong) NSString* entityTag;
/* private */ - (id) init;
/* public */ + (XS_ByteStream*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (NSString*) mediaType;
/* public */ - (void) setMediaType :(NSString*)value;
/* public */ - (NSString*) entityTag;
/* public */ - (void) setEntityTag :(NSString*)value;
/* public */ - (void) close;
/* public */ - (void) flush;
/* public */ - (xs_int) readByte;
/* public */ - (NSData*) readBinary :(xs_int)length;
/* public */ - (xs_int) read :(XS_ByteBuffer*)buffer :(xs_int)length;
/* public */ - (void) undoRead :(xs_byte)b;
/* public */ - (void) writeByte :(xs_byte)data;
/* public */ - (void) writeBinary :(NSData*)data :(xs_int)offset :(xs_int)length;
/* public */ - (void) write :(XS_ByteBuffer*)data :(xs_int)offset :(xs_int)length;
/* public */ + (XS_ByteStream*) fromBinary :(NSData*)data;
/* public */ + (XS_ByteStream*) fromBinary :(NSData*)data :(xs_int)offset :(xs_int)length;
/* public */ - (NSString*) toString;
@end

/* internal */ @interface XS_ByteStreamFromBinary : XS_ByteStream
{
    @private NSData* my_binary;
    @private xs_int my_offset;
    @private xs_int my_length;
}
/* private */ - (id) init;
+ (XS_ByteStreamFromBinary*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_ByteStream*) getInstance :(NSData*)data :(xs_int)offset :(xs_int)length;
/* public */ - (xs_int) readByte;
/* private */ + (XS_ByteStreamFromBinary*) DC1 :(NSData*)p1 :(xs_int)p2 :(xs_int)p3;
@end

@interface XS_CharStream : XS_DataValue
{
    @private NSString* mediaType_;
    @private NSString* entityTag_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) NSString* mediaType;
/* public */ @property (strong) NSString* entityTag;
/* private */ - (id) init;
/* public */ + (XS_CharStream*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (NSString*) mediaType;
/* public */ - (void) setMediaType :(NSString*)value;
/* public */ - (NSString*) entityTag;
/* public */ - (void) setEntityTag :(NSString*)value;
/* public */ - (void) close;
/* public */ - (void) flush;
/* public */ - (xs_int) readChar;
/* public */ - (NSString*) readString :(xs_int)length;
/* public */ - (xs_int) read :(XS_CharBuffer*)buffer :(xs_int)length;
/* public */ - (void) undoRead :(xs_char)c;
/* public */ - (void) writeChar :(xs_char)text;
/* public */ - (void) writeString :(NSString*)text :(xs_int)offset :(xs_int)length;
/* public */ - (void) write :(XS_CharBuffer*)text :(xs_int)offset :(xs_int)length;
/* public */ + (XS_CharStream*) fromString :(NSString*)text;
/* public */ + (XS_CharStream*) fromString :(NSString*)text :(xs_int)offset :(xs_int)length;
/* public */ + (XS_CharStream*) fromBytes :(XS_ByteStream*)input;
/* public */ - (NSString*) toString;
@end

/* internal */ @interface XS_CharStreamFromString : XS_CharStream
{
    @private NSString* my_string;
    @private xs_int my_offset;
    @private xs_int my_length;
}
/* private */ - (id) init;
+ (XS_CharStreamFromString*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_CharStreamFromString*) getInstance :(NSString*)text :(xs_int)offset :(xs_int)length;
/* public */ - (xs_int) readChar;
/* public */ - (void) undoRead :(xs_char)c;
/* private */ + (XS_CharStreamFromString*) DC1 :(xs_int)p1 :(xs_int)p2 :(NSString*)p3;
@end

/* internal */ @interface XS_CharStreamFromBytes : XS_CharStream
{
    @private XS_ByteStream* my_input;
    @private xs_int my_next1;
    @private xs_int my_next2;
}
/* private */ - (id) init;
+ (XS_CharStreamFromBytes*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_CharStreamFromBytes*) getInstance :(XS_ByteStream*)bytes;
/* public */ - (void) close;
/* public */ - (xs_int) readChar;
/* public */ - (void) undoRead :(xs_char)c;
/* private */ + (XS_CharStreamFromBytes*) DC1 :(XS_ByteStream*)p1;
@end

@interface XS_DayOfWeek : NSObject
/* public */ + (XS_DayOfWeek*) new;
@end

#define XS_DayOfWeek_MONDAY 1
#define XS_DayOfWeek_TUESDAY 2
#define XS_DayOfWeek_WEDNESDAY 3
#define XS_DayOfWeek_THURSDAY 4
#define XS_DayOfWeek_FRIDAY 5
#define XS_DayOfWeek_SATURDAY 6
#define XS_DayOfWeek_SUNDAY 7

@interface XS_MonthOfYear : NSObject
/* public */ + (XS_MonthOfYear*) new;
@end

#define XS_MonthOfYear_JANUARY 1
#define XS_MonthOfYear_FEBRUARY 2
#define XS_MonthOfYear_MARCH 3
#define XS_MonthOfYear_APRIL 4
#define XS_MonthOfYear_MAY 5
#define XS_MonthOfYear_JUNE 6
#define XS_MonthOfYear_JULY 7
#define XS_MonthOfYear_AUGUST 8
#define XS_MonthOfYear_SEPTEMBER 9
#define XS_MonthOfYear_OCTOBER 10
#define XS_MonthOfYear_NOVEMBER 11
#define XS_MonthOfYear_DECEMBER 12

@interface XS_LocalDate : XS_DataValue
{
    @private xs_int my_year;
    @private xs_byte my_month;
    @private xs_byte my_day;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly) xs_int year;
/* public */ @property (readonly) xs_int month;
/* public */ @property (readonly) xs_int day;
/* public */ @property (readonly) xs_int dayOfWeek;
/* public */ @property (readonly) xs_int dayOfYear;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) year;
/* public */ - (xs_int) month;
/* public */ - (xs_int) day;
/* public */ - (xs_int) dayOfWeek;
/* public */ - (xs_int) dayOfYear;
+ (XS_LocalDate*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_LocalDate*) of :(xs_int)param_year :(xs_int)param_month :(xs_int)param_day;
/* public */ + (XS_LocalDate*) now;
/* public */ - (XS_LocalDate*) plusYears :(xs_int)years;
/* public */ - (XS_LocalDate*) plusMonths :(xs_int)months;
/* public */ - (XS_LocalDate*) plusWeeks :(xs_int)weeks;
/* public */ - (XS_LocalDate*) plusDays :(xs_int)days;
/* public */ - (xs_double) minus :(XS_LocalDate*)other;
/* public */ - (xs_int) compareTo :(XS_LocalDate*)other;
/* public */ + (xs_int) compare :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ - (xs_boolean) equals :(id)other;
/* public */ + (xs_boolean) equal :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ - (xs_boolean) notEqual :(XS_LocalDate*)other;
/* public */ + (xs_boolean) notEqual :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ - (xs_boolean) lessThan :(XS_LocalDate*)other;
/* public */ + (xs_boolean) lessThan :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ - (xs_boolean) lessEqual :(XS_LocalDate*)other;
/* public */ + (xs_boolean) lessEqual :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ - (xs_boolean) greaterThan :(XS_LocalDate*)other;
/* public */ + (xs_boolean) greaterThan :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_LocalDate*)other;
/* public */ + (xs_boolean) greaterEqual :(XS_LocalDate*)x :(XS_LocalDate*)y;
/* public */ + (XS_LocalDate*) parse :(NSString*)text;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_LocalDate*) DC1 :(xs_byte)p1 :(xs_byte)p2 :(xs_int)p3;
@end

@interface XS_LocalTime : XS_DataValue
{
    @private xs_byte my_hour;
    @private xs_byte my_minute;
    @private xs_byte my_second;
    @private xs_int my_nano;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly) xs_int hour;
/* public */ @property (readonly) xs_int minute;
/* public */ @property (readonly) xs_int second;
/* public */ @property (readonly) xs_int nano;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) hour;
/* public */ - (xs_int) minute;
/* public */ - (xs_int) second;
/* public */ - (xs_int) nano;
+ (XS_LocalTime*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_LocalTime*) of :(xs_int)param_hour :(xs_int)param_minute :(xs_int)param_second :(xs_int)param_nano;
/* public */ + (XS_LocalTime*) now;
/* public */ - (XS_LocalTime*) plusHours :(xs_long)hours;
/* public */ - (XS_LocalTime*) plusMinutes :(xs_long)minutes;
/* public */ - (XS_LocalTime*) plusSeconds :(xs_long)seconds;
/* public */ - (XS_LocalTime*) plusNanos :(xs_long)nanos;
/* public */ - (xs_double) minus :(XS_LocalTime*)other;
/* public */ - (xs_int) compareTo :(XS_LocalTime*)other;
/* public */ + (xs_int) compare :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ - (xs_boolean) equals :(id)other;
/* public */ + (xs_boolean) equal :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ - (xs_boolean) notEqual :(XS_LocalTime*)other;
/* public */ + (xs_boolean) notEqual :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ - (xs_boolean) lessThan :(XS_LocalTime*)other;
/* public */ + (xs_boolean) lessThan :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ - (xs_boolean) lessEqual :(XS_LocalTime*)other;
/* public */ + (xs_boolean) lessEqual :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ - (xs_boolean) greaterThan :(XS_LocalTime*)other;
/* public */ + (xs_boolean) greaterThan :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_LocalTime*)other;
/* public */ + (xs_boolean) greaterEqual :(XS_LocalTime*)x :(XS_LocalTime*)y;
/* public */ + (XS_LocalTime*) parse :(NSString*)text;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_LocalTime*) DC1 :(xs_byte)p1 :(xs_byte)p2 :(xs_int)p3 :(xs_byte)p4;
@end

@interface XS_LocalDateTime : XS_DataValue
{
    @private xs_int my_nano;
    @private xs_int my_year;
    @private xs_byte my_month;
    @private xs_byte my_day;
    @private xs_byte my_hour;
    @private xs_byte my_minute;
    @private xs_byte my_second;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly) xs_int year;
/* public */ @property (readonly) xs_int month;
/* public */ @property (readonly) xs_int day;
/* public */ @property (readonly) xs_int dayOfWeek;
/* public */ @property (readonly) xs_int dayOfYear;
/* public */ @property (readonly) xs_int hour;
/* public */ @property (readonly) xs_int minute;
/* public */ @property (readonly) xs_int second;
/* public */ @property (readonly) xs_int nano;
/* public */ @property (readonly, strong) XS_LocalDate* date;
/* public */ @property (readonly, strong) XS_LocalTime* time;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) year;
/* public */ - (xs_int) month;
/* public */ - (xs_int) day;
/* public */ - (xs_int) dayOfWeek;
/* public */ - (xs_int) dayOfYear;
/* public */ - (xs_int) hour;
/* public */ - (xs_int) minute;
/* public */ - (xs_int) second;
/* public */ - (xs_int) nano;
/* public */ - (XS_LocalDate*) date;
/* public */ - (XS_LocalTime*) time;
+ (XS_LocalDateTime*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_LocalDateTime*) of :(xs_int)param_year :(xs_int)param_month :(xs_int)param_day :(xs_int)param_hour :(xs_int)param_minute :(xs_int)param_second :(xs_int)param_nano;
/* public */ + (XS_LocalDateTime*) now;
/* public */ - (XS_LocalDateTime*) plusYears :(xs_int)years;
/* public */ - (XS_LocalDateTime*) plusMonths :(xs_int)months;
/* public */ - (XS_LocalDateTime*) plusWeeks :(xs_int)weeks;
/* public */ - (XS_LocalDateTime*) plusDays :(xs_int)days;
/* public */ - (XS_LocalDateTime*) plusHours :(xs_long)hours;
/* public */ - (XS_LocalDateTime*) plusMinutes :(xs_long)minutes;
/* public */ - (XS_LocalDateTime*) plusSeconds :(xs_long)seconds;
/* public */ - (XS_LocalDateTime*) plusNanos :(xs_long)nanos;
/* public */ + (xs_long) millisBetween :(XS_LocalDateTime*)a :(XS_LocalDateTime*)b;
/* public */ - (xs_double) minus :(XS_LocalDateTime*)other;
/* public */ - (xs_int) compareTo :(XS_LocalDateTime*)other;
/* public */ + (xs_int) compare :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ - (xs_boolean) equals :(id)other;
/* public */ + (xs_boolean) equal :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ - (xs_boolean) notEqual :(XS_LocalDateTime*)other;
/* public */ + (xs_boolean) notEqual :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ - (xs_boolean) lessThan :(XS_LocalDateTime*)other;
/* public */ + (xs_boolean) lessThan :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ - (xs_boolean) lessEqual :(XS_LocalDateTime*)other;
/* public */ + (xs_boolean) lessEqual :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ - (xs_boolean) greaterThan :(XS_LocalDateTime*)other;
/* public */ + (xs_boolean) greaterThan :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_LocalDateTime*)other;
/* public */ + (xs_boolean) greaterEqual :(XS_LocalDateTime*)x :(XS_LocalDateTime*)y;
/* public */ + (XS_LocalDateTime*) parse :(NSString*)text;
/* public */ - (XS_GlobalDateTime*) toGlobal :(xs_int)offset;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_LocalDateTime*) DC1 :(xs_byte)p1 :(xs_byte)p2 :(xs_byte)p3 :(xs_byte)p4 :(xs_int)p5 :(xs_byte)p6 :(xs_int)p7;
@end

@interface XS_GlobalDateTime : XS_DataValue
{
    @private xs_int my_nano;
    @private xs_int my_year;
    @private xs_byte my_month;
    @private xs_byte my_day;
    @private xs_byte my_hour;
    @private xs_byte my_minute;
    @private xs_byte my_second;
    @private xs_short my_offset;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly) xs_int year;
/* public */ @property (readonly) xs_int month;
/* public */ @property (readonly) xs_int day;
/* public */ @property (readonly) xs_int dayOfWeek;
/* public */ @property (readonly) xs_int dayOfYear;
/* public */ @property (readonly) xs_int hour;
/* public */ @property (readonly) xs_int minute;
/* public */ @property (readonly) xs_int second;
/* public */ @property (readonly) xs_int nano;
/* public */ @property (readonly) xs_int offset;
/* public */ @property (readonly, strong) XS_LocalDate* date;
/* public */ @property (readonly, strong) XS_LocalTime* time;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) year;
/* public */ - (xs_int) month;
/* public */ - (xs_int) day;
/* public */ - (xs_int) dayOfWeek;
/* public */ - (xs_int) dayOfYear;
/* public */ - (xs_int) hour;
/* public */ - (xs_int) minute;
/* public */ - (xs_int) second;
/* public */ - (xs_int) nano;
/* public */ - (xs_int) offset;
/* public */ - (XS_LocalDate*) date;
/* public */ - (XS_LocalTime*) time;
+ (XS_GlobalDateTime*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_GlobalDateTime*) of :(xs_int)param_year :(xs_int)param_month :(xs_int)param_day :(xs_int)param_hour :(xs_int)param_minute :(xs_int)param_second :(xs_int)param_nano :(xs_int)param_offset;
/* public */ - (XS_GlobalDateTime*) normalize;
/* public */ + (XS_GlobalDateTime*) now;
/* public */ - (xs_double) minus :(XS_GlobalDateTime*)other;
/* public */ - (XS_GlobalDateTime*) plusYears :(xs_int)years;
/* public */ - (XS_GlobalDateTime*) plusMonths :(xs_int)months;
/* public */ - (XS_GlobalDateTime*) plusWeeks :(xs_int)weeks;
/* public */ - (XS_GlobalDateTime*) plusDays :(xs_int)days;
/* public */ - (XS_GlobalDateTime*) plusHours :(xs_long)hours;
/* public */ - (XS_GlobalDateTime*) plusMinutes :(xs_long)minutes;
/* public */ - (XS_GlobalDateTime*) plusSeconds :(xs_long)seconds;
/* public */ + (xs_long) millisBetween :(XS_GlobalDateTime*)a :(XS_GlobalDateTime*)b;
/* public */ - (XS_GlobalDateTime*) plusNanos :(xs_long)nanos;
/* public */ - (xs_int) compareTo :(XS_GlobalDateTime*)other;
/* public */ + (xs_int) compare :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ - (xs_boolean) equals :(id)other;
/* public */ + (xs_boolean) equal :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ - (xs_boolean) notEqual :(XS_GlobalDateTime*)other;
/* public */ + (xs_boolean) notEqual :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ - (xs_boolean) lessThan :(XS_GlobalDateTime*)other;
/* public */ + (xs_boolean) lessThan :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ - (xs_boolean) lessEqual :(XS_GlobalDateTime*)other;
/* public */ + (xs_boolean) lessEqual :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ - (xs_boolean) greaterThan :(XS_GlobalDateTime*)other;
/* public */ + (xs_boolean) greaterThan :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_GlobalDateTime*)other;
/* public */ + (xs_boolean) greaterEqual :(XS_GlobalDateTime*)x :(XS_GlobalDateTime*)y;
/* public */ + (XS_GlobalDateTime*) parse :(NSString*)text;
/* public */ - (XS_LocalDateTime*) toLocal;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_GlobalDateTime*) DC1 :(xs_byte)p1 :(xs_byte)p2 :(xs_byte)p3 :(xs_byte)p4 :(xs_int)p5 :(xs_short)p6 :(xs_byte)p7 :(xs_int)p8;
@end

@interface XS_DayTimeDuration : XS_DataValue
{
    @private xs_byte my_sign;
    @private xs_int my_days;
    @private xs_int my_hours;
    @private xs_int my_minutes;
    @private xs_int my_seconds;
    @private xs_int my_nanos;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly) xs_int sign;
/* public */ @property (readonly) xs_int days;
/* public */ @property (readonly) xs_int hours;
/* public */ @property (readonly) xs_int minutes;
/* public */ @property (readonly) xs_int seconds;
/* public */ @property (readonly) xs_int nanos;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) sign;
/* public */ - (xs_int) days;
/* public */ - (xs_int) hours;
/* public */ - (xs_int) minutes;
/* public */ - (xs_int) seconds;
/* public */ - (xs_int) nanos;
+ (XS_DayTimeDuration*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_DayTimeDuration*) of :(xs_int)param_sign :(xs_int)param_days :(xs_int)param_hours :(xs_int)param_minutes :(xs_int)param_seconds :(xs_int)param_nanos;
/* public */ - (XS_DayTimeDuration*) normalize;
/* public */ - (xs_int) compareTo :(XS_DayTimeDuration*)other;
/* public */ + (xs_int) compare :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ - (xs_boolean) equals :(id)other;
/* public */ + (xs_boolean) equal :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ - (xs_boolean) notEqual :(XS_DayTimeDuration*)other;
/* public */ + (xs_boolean) notEqual :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ - (xs_boolean) lessThan :(XS_DayTimeDuration*)other;
/* public */ + (xs_boolean) lessThan :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ - (xs_boolean) lessEqual :(XS_DayTimeDuration*)other;
/* public */ + (xs_boolean) lessEqual :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ - (xs_boolean) greaterThan :(XS_DayTimeDuration*)other;
/* public */ + (xs_boolean) greaterThan :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_DayTimeDuration*)other;
/* public */ + (xs_boolean) greaterEqual :(XS_DayTimeDuration*)x :(XS_DayTimeDuration*)y;
/* public */ + (XS_DayTimeDuration*) parse :(NSString*)text;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_DayTimeDuration*) DC1 :(xs_int)p1 :(xs_int)p2 :(xs_int)p3 :(xs_int)p4 :(xs_int)p5 :(xs_byte)p6;
@end

@interface XS_YearMonthDuration : XS_DataValue
{
    @private xs_byte my_sign;
    @private xs_int my_years;
    @private xs_int my_months;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly) xs_int sign;
/* public */ @property (readonly) xs_int years;
/* public */ @property (readonly) xs_int months;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) sign;
/* public */ - (xs_int) years;
/* public */ - (xs_int) months;
+ (XS_YearMonthDuration*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_YearMonthDuration*) of :(xs_int)param_sign :(xs_int)param_years :(xs_int)param_months;
/* public */ - (XS_YearMonthDuration*) normalize;
/* public */ - (xs_int) compareTo :(XS_YearMonthDuration*)other;
/* public */ + (xs_int) compare :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ - (xs_boolean) equals :(id)other;
/* public */ + (xs_boolean) equal :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ - (xs_boolean) notEqual :(XS_YearMonthDuration*)other;
/* public */ + (xs_boolean) notEqual :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ - (xs_boolean) lessThan :(XS_YearMonthDuration*)other;
/* public */ + (xs_boolean) lessThan :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ - (xs_boolean) lessEqual :(XS_YearMonthDuration*)other;
/* public */ + (xs_boolean) lessEqual :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ - (xs_boolean) greaterThan :(XS_YearMonthDuration*)other;
/* public */ + (xs_boolean) greaterThan :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ - (xs_boolean) greaterEqual :(XS_YearMonthDuration*)other;
/* public */ + (xs_boolean) greaterEqual :(XS_YearMonthDuration*)x :(XS_YearMonthDuration*)y;
/* public */ + (XS_YearMonthDuration*) parse :(NSString*)text;
/* public */ - (xs_int) hashCode;
/* public */ - (NSString*) toString;
/* private */ + (XS_YearMonthDuration*) DC1 :(xs_int)p1 :(xs_byte)p2 :(xs_int)p3;
@end

/* internal */ @interface XS_DateNumber : NSObject
/* public */ + (xs_long) fromFields :(xs_int)year :(xs_int)month :(xs_int)day;
/* public */ + (xs_int) daysInMonth :(xs_int)year :(xs_int)month;
/* public */ + (XS_LocalDate*) toLocalDate :(xs_long)g;
@end

/* internal */ @interface XS_TimeNumber : NSObject
/* public */ + (xs_long) fromFields :(xs_int)h :(xs_int)m :(xs_int)s :(xs_long)n :(xs_int)z;
/* public */ + (xs_int) getMillis :(xs_int)h :(xs_int)m :(xs_int)s :(xs_int)n :(xs_int)z;
/* public */ + (xs_int) getSeconds :(xs_int)h :(xs_int)m :(xs_int)s :(xs_int)z;
/* public */ + (XS_LocalTime*) toLocalTime :(xs_long)nanos;
@end

#define XS_TimeNumber_NANOS_PER_DAY XS_LONG(86400000000000)
#define XS_TimeNumber_NANOS_PER_HOUR XS_LONG(3600000000000)
#define XS_TimeNumber_NANOS_PER_MINUTE XS_LONG(60000000000)
#define XS_TimeNumber_NANOS_PER_SECOND XS_LONG(1000000000)
#define XS_TimeNumber_MILLIS_PER_DAY XS_LONG(86400000)
#define XS_TimeNumber_SECONDS_PER_DAY XS_LONG(86400)
#define XS_TimeNumber_DOUBLE_NANOS_PER_DAY 86400000000000.0
#define XS_TimeNumber_DOUBLE_SECONDS_PER_DAY 86400.0

/* internal */ @interface XS_DateTimeFormat : NSObject
/* public */ + (xs_int) nanoLength :(xs_int)n;
/* public */ + (xs_int) zoneLength :(xs_int)z;
/* public */ + (void) dateAppend :(XS_CharBuffer*)b :(xs_int)y :(xs_int)m :(xs_int)d;
/* public */ + (void) timeAppend :(XS_CharBuffer*)b :(xs_int)h :(xs_int)m :(xs_int)s :(xs_int)n;
/* public */ + (void) nanoAppend :(XS_CharBuffer*)b :(xs_int)n;
/* public */ + (void) zoneAppend :(XS_CharBuffer*)b :(xs_int)z;
/* public */ + (void) append2 :(XS_CharBuffer*)b :(xs_int)x;
/* public */ + (void) append3 :(XS_CharBuffer*)b :(xs_int)x;
/* public */ + (void) append4 :(XS_CharBuffer*)b :(xs_int)y;
/* public */ + (xs_char) digit :(xs_int)n;
@end

/* internal */ @interface XS_DateTimeParser : NSObject
{
    @private NSString* kind_;
    @private NSString* text_;
    @private xs_int index_;
}
/* public */ @property (strong) NSString* kind;
/* public */ @property (strong) NSString* text;
/* public */ @property xs_int index;
/* private */ - (id) init;
/* public */ - (NSString*) kind;
/* public */ - (void) setKind :(NSString*)value;
/* public */ - (NSString*) text;
/* public */ - (void) setText :(NSString*)value;
/* public */ - (xs_int) index;
/* public */ - (void) setIndex :(xs_int)value;
+ (XS_DateTimeParser*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_DateTimeParser*) getInstance :(NSString*)param_kind :(NSString*)param_text;
/* public */ - (void) badValue;
/* public */ - (void) assertDone;
/* public */ - (void) assertNext :(xs_char)c;
/* public */ - (xs_boolean) hasMore;
/* public */ - (xs_boolean) isDigit :(xs_char)c;
/* public */ - (xs_boolean) lookingAt :(xs_char)c;
/* public */ - (xs_int) nextNumber :(xs_int)minCount :(xs_int)maxCount :(xs_int)minValue :(xs_int)maxValue;
/* public */ - (xs_int) nextNumberN;
/* public */ - (xs_int) nextNumberP;
/* public */ - (xs_int) nextNumberX :(xs_int)minCount :(xs_int)maxCount :(xs_int)minValue :(xs_int)maxValue :(xs_boolean)getNanos;
/* private */ + (XS_DateTimeParser*) DC1 :(xs_int)p1 :(NSString*)p2 :(NSString*)p3;
@end

@interface XS_DataComparer : XS_Comparer
/* private */ + (void) initialize;
/* public */ + (XS_DataComparer*) new;
/* public */ + (XS_Comparer*) INSTANCE;
/* public */ - (xs_int) apply :(id)x :(id)y;
@end

@interface XS_DataEquality : XS_Equality
/* private */ + (void) initialize;
/* public */ + (XS_DataEquality*) new;
/* public */ + (XS_Equality*) INSTANCE;
/* public */ - (xs_boolean) apply :(id)x :(id)y;
@end

@interface XS_ListBase : XS_DataValue
{
    @private XS_ObjectArray* array_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_ObjectArray* array;
/* public */ @property (readonly) xs_int length;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ObjectArray*) array;
/* public */ - (void) setArray :(XS_ObjectArray*)value;
/* public */ - (xs_int) length;
+ (XS_ListBase*) new;
/* public */ - (void) privateInit;
+ (XS_ListBase*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* protected */ - (void) init :(xs_int)capacity;
/* public */ - (void) clear;
/* public */ - (void) removeAt :(xs_int)index;
/* public */ - (void) removeRange :(xs_int)start :(xs_int)end;
/* public */ - (void) reverse;
/* public */ - (NSString*) toString;
@end

@interface XS_ObjectList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_ObjectList*) new;
/* public */ - (void) privateInit;
+ (XS_ObjectList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ObjectList*) add :(id)item;
/* public */ - (void) addAll :(XS_ObjectList*)other;
/* public */ - (id) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(id)item;
/* public */ - (xs_boolean) has :(id)item;
/* public */ - (xs_int) firstIndexOf :(id)item;
/* public */ - (xs_int) lastIndexOf :(id)item;
/* public */ - (void) insert :(xs_int)index :(id)item;
/* public */ - (xs_boolean) remove :(id)item;
/* public */ - (XS_ObjectList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_ObjectList*) share :(XS_ListBase*)list;
@end

@interface XS_BooleanList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_BooleanList*) new;
/* public */ - (void) privateInit;
+ (XS_BooleanList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_BooleanList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_BooleanList*) add :(xs_boolean)item;
/* public */ - (XS_BooleanList*) addNullable :(xs_nullable_boolean)item;
/* public */ - (void) addAll :(XS_BooleanList*)other;
/* public */ - (xs_boolean) get :(xs_int)index;
/* public */ - (xs_nullable_boolean) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_boolean)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_boolean)item;
/* public */ - (xs_boolean) has :(xs_boolean)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_boolean)item;
/* public */ - (xs_int) firstIndexOf :(xs_boolean)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_boolean)item;
/* public */ - (xs_int) lastIndexOf :(xs_boolean)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_boolean)item;
/* public */ - (void) insert :(xs_int)index :(xs_boolean)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_boolean)item;
/* public */ - (xs_boolean) remove :(xs_boolean)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_boolean)item;
/* public */ - (XS_BooleanList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_BooleanList*) share :(XS_ListBase*)list;
@end

@interface XS_CharList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_CharList*) new;
/* public */ - (void) privateInit;
+ (XS_CharList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_CharList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_CharList*) add :(xs_char)item;
/* public */ - (XS_CharList*) addNullable :(xs_nullable_char)item;
/* public */ - (void) addAll :(XS_CharList*)other;
/* public */ - (xs_char) get :(xs_int)index;
/* public */ - (xs_nullable_char) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_char)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_char)item;
/* public */ - (xs_boolean) has :(xs_char)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_char)item;
/* public */ - (xs_int) firstIndexOf :(xs_char)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_char)item;
/* public */ - (xs_int) lastIndexOf :(xs_char)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_char)item;
/* public */ - (void) insert :(xs_int)index :(xs_char)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_char)item;
/* public */ - (xs_boolean) remove :(xs_char)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_char)item;
/* public */ - (XS_CharList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_CharList*) share :(XS_ListBase*)list;
@end

@interface XS_ByteList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_ByteList*) new;
/* public */ - (void) privateInit;
+ (XS_ByteList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_ByteList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ByteList*) add :(xs_byte)item;
/* public */ - (XS_ByteList*) addNullable :(xs_nullable_byte)item;
/* public */ - (void) addAll :(XS_ByteList*)other;
/* public */ - (xs_byte) get :(xs_int)index;
/* public */ - (xs_nullable_byte) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_byte)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_byte)item;
/* public */ - (xs_boolean) has :(xs_byte)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_byte)item;
/* public */ - (xs_int) firstIndexOf :(xs_byte)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_byte)item;
/* public */ - (xs_int) lastIndexOf :(xs_byte)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_byte)item;
/* public */ - (void) insert :(xs_int)index :(xs_byte)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_byte)item;
/* public */ - (xs_boolean) remove :(xs_byte)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_byte)item;
/* public */ - (XS_ByteList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_ByteList*) share :(XS_ListBase*)list;
@end

@interface XS_ShortList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_ShortList*) new;
/* public */ - (void) privateInit;
+ (XS_ShortList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_ShortList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ShortList*) add :(xs_short)item;
/* public */ - (XS_ShortList*) addNullable :(xs_nullable_short)item;
/* public */ - (void) addAll :(XS_ShortList*)other;
/* public */ - (xs_short) get :(xs_int)index;
/* public */ - (xs_nullable_short) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_short)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_short)item;
/* public */ - (xs_boolean) has :(xs_short)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_short)item;
/* public */ - (xs_int) firstIndexOf :(xs_short)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_short)item;
/* public */ - (xs_int) lastIndexOf :(xs_short)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_short)item;
/* public */ - (void) insert :(xs_int)index :(xs_short)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_short)item;
/* public */ - (xs_boolean) remove :(xs_short)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_short)item;
/* public */ - (XS_ShortList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_ShortList*) share :(XS_ListBase*)list;
@end

@interface XS_IntList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_IntList*) new;
/* public */ - (void) privateInit;
+ (XS_IntList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_IntList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_IntList*) add :(xs_int)item;
/* public */ - (XS_IntList*) addNullable :(xs_nullable_int)item;
/* public */ - (void) addAll :(XS_IntList*)other;
/* public */ - (xs_int) get :(xs_int)index;
/* public */ - (xs_nullable_int) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_int)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_int)item;
/* public */ - (xs_boolean) has :(xs_int)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_int)item;
/* public */ - (xs_int) firstIndexOf :(xs_int)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_int)item;
/* public */ - (xs_int) lastIndexOf :(xs_int)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_int)item;
/* public */ - (void) insert :(xs_int)index :(xs_int)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_int)item;
/* public */ - (xs_boolean) remove :(xs_int)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_int)item;
/* public */ - (XS_IntList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_IntList*) share :(XS_ListBase*)list;
@end

@interface XS_LongList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_LongList*) new;
/* public */ - (void) privateInit;
+ (XS_LongList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_LongList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_LongList*) add :(xs_long)item;
/* public */ - (XS_LongList*) addNullable :(xs_nullable_long)item;
/* public */ - (void) addAll :(XS_LongList*)other;
/* public */ - (xs_long) get :(xs_int)index;
/* public */ - (xs_nullable_long) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_long)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_long)item;
/* public */ - (xs_boolean) has :(xs_long)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_long)item;
/* public */ - (xs_int) firstIndexOf :(xs_long)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_long)item;
/* public */ - (xs_int) lastIndexOf :(xs_long)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_long)item;
/* public */ - (void) insert :(xs_int)index :(xs_long)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_long)item;
/* public */ - (xs_boolean) remove :(xs_long)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_long)item;
/* public */ - (XS_LongList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_LongList*) share :(XS_ListBase*)list;
@end

@interface XS_IntegerList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_IntegerList*) new;
/* public */ - (void) privateInit;
+ (XS_IntegerList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_IntegerList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_IntegerList*) add :(xs_integer)item;
/* public */ - (XS_IntegerList*) addNullable :(xs_nullable_integer)item;
/* public */ - (void) addAll :(XS_IntegerList*)other;
/* public */ - (xs_integer) get :(xs_int)index;
/* public */ - (xs_nullable_integer) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_integer)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_integer)item;
/* public */ - (xs_boolean) has :(xs_integer)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_integer)item;
/* public */ - (xs_int) firstIndexOf :(xs_integer)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_integer)item;
/* public */ - (xs_int) lastIndexOf :(xs_integer)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_integer)item;
/* public */ - (void) insert :(xs_int)index :(xs_integer)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_integer)item;
/* public */ - (xs_boolean) remove :(xs_integer)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_integer)item;
/* public */ - (XS_IntegerList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_IntegerList*) share :(XS_ListBase*)list;
@end

@interface XS_DecimalList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_DecimalList*) new;
/* public */ - (void) privateInit;
+ (XS_DecimalList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_DecimalList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_DecimalList*) add :(xs_decimal)item;
/* public */ - (XS_DecimalList*) addNullable :(xs_nullable_decimal)item;
/* public */ - (void) addAll :(XS_DecimalList*)other;
/* public */ - (xs_decimal) get :(xs_int)index;
/* public */ - (xs_nullable_decimal) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_decimal)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_decimal)item;
/* public */ - (xs_boolean) has :(xs_decimal)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_decimal)item;
/* public */ - (xs_int) firstIndexOf :(xs_decimal)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_decimal)item;
/* public */ - (xs_int) lastIndexOf :(xs_decimal)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_decimal)item;
/* public */ - (void) insert :(xs_int)index :(xs_decimal)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_decimal)item;
/* public */ - (xs_boolean) remove :(xs_decimal)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_decimal)item;
/* public */ - (XS_DecimalList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_DecimalList*) share :(XS_ListBase*)list;
@end

@interface XS_FloatList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_FloatList*) new;
/* public */ - (void) privateInit;
+ (XS_FloatList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_FloatList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_FloatList*) add :(xs_float)item;
/* public */ - (XS_FloatList*) addNullable :(xs_nullable_float)item;
/* public */ - (void) addAll :(XS_FloatList*)other;
/* public */ - (xs_float) get :(xs_int)index;
/* public */ - (xs_nullable_float) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_float)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_float)item;
/* public */ - (xs_boolean) has :(xs_float)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_float)item;
/* public */ - (xs_int) firstIndexOf :(xs_float)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_float)item;
/* public */ - (xs_int) lastIndexOf :(xs_float)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_float)item;
/* public */ - (void) insert :(xs_int)index :(xs_float)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_float)item;
/* public */ - (xs_boolean) remove :(xs_float)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_float)item;
/* public */ - (XS_FloatList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_FloatList*) share :(XS_ListBase*)list;
@end

@interface XS_DoubleList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_DoubleList*) new;
/* public */ - (void) privateInit;
+ (XS_DoubleList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_DoubleList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_DoubleList*) add :(xs_double)item;
/* public */ - (XS_DoubleList*) addNullable :(xs_nullable_double)item;
/* public */ - (void) addAll :(XS_DoubleList*)other;
/* public */ - (xs_double) get :(xs_int)index;
/* public */ - (xs_nullable_double) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_double)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_double)item;
/* public */ - (xs_boolean) has :(xs_double)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_double)item;
/* public */ - (xs_int) firstIndexOf :(xs_double)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_double)item;
/* public */ - (xs_int) lastIndexOf :(xs_double)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_double)item;
/* public */ - (void) insert :(xs_int)index :(xs_double)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_double)item;
/* public */ - (xs_boolean) remove :(xs_double)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_double)item;
/* public */ - (XS_DoubleList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_DoubleList*) share :(XS_ListBase*)list;
@end

@interface XS_StringList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ - (NSString*) concat;
/* public */ - (NSString*) join :(NSString*)separator;
/* public */ + (XS_StringList*) split :(NSString*)value :(NSString*)separator;
/* public */ + (XS_StringList*) split :(NSString*)value :(NSString*)separator :(xs_int)limit;
/* public */ - (XS_StringList*) filter :(XS_ObjectFilter*)f;
+ (XS_StringList*) new;
/* public */ - (void) privateInit;
+ (XS_StringList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_StringList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_StringList*) add :(NSString*)item;
/* public */ - (XS_StringList*) addNullable :(NSString*)item;
/* public */ - (void) addAll :(XS_StringList*)other;
/* public */ - (NSString*) get :(xs_int)index;
/* public */ - (NSString*) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(NSString*)item;
/* public */ - (void) setNullable :(xs_int)index :(NSString*)item;
/* public */ - (xs_boolean) has :(NSString*)item;
/* public */ - (xs_boolean) hasNullable :(NSString*)item;
/* public */ - (xs_int) firstIndexOf :(NSString*)item;
/* public */ - (xs_int) firstIndexOfNullable :(NSString*)item;
/* public */ - (xs_int) lastIndexOf :(NSString*)item;
/* public */ - (xs_int) lastIndexOfNullable :(NSString*)item;
/* public */ - (void) insert :(xs_int)index :(NSString*)item;
/* public */ - (void) insertNullable :(xs_int)index :(NSString*)item;
/* public */ - (xs_boolean) remove :(NSString*)item;
/* public */ - (xs_boolean) removeNullable :(NSString*)item;
/* public */ - (XS_StringList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_StringList*) share :(XS_ListBase*)list;
@end

@interface XS_BinaryList : XS_ListBase
/* public */ @property (readonly, strong) XS_DataType* dataType;
+ (XS_BinaryList*) new;
/* public */ - (void) privateInit;
+ (XS_BinaryList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_BinaryList*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_BinaryList*) add :(NSData*)item;
/* public */ - (XS_BinaryList*) addNullable :(NSData*)item;
/* public */ - (void) addAll :(XS_BinaryList*)other;
/* public */ - (NSData*) get :(xs_int)index;
/* public */ - (NSData*) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(NSData*)item;
/* public */ - (void) setNullable :(xs_int)index :(NSData*)item;
/* public */ - (xs_boolean) has :(NSData*)item;
/* public */ - (xs_boolean) hasNullable :(NSData*)item;
/* public */ - (xs_int) firstIndexOf :(NSData*)item;
/* public */ - (xs_int) firstIndexOfNullable :(NSData*)item;
/* public */ - (xs_int) lastIndexOf :(NSData*)item;
/* public */ - (xs_int) lastIndexOfNullable :(NSData*)item;
/* public */ - (void) insert :(xs_int)index :(NSData*)item;
/* public */ - (void) insertNullable :(xs_int)index :(NSData*)item;
/* public */ - (xs_boolean) remove :(NSData*)item;
/* public */ - (xs_boolean) removeNullable :(NSData*)item;
/* public */ - (XS_BinaryList*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_BinaryList*) share :(XS_ListBase*)list;
@end

@interface XS_Map : NSObject
/* public */ + (XS_Map*) new;
@end

@interface XS_ObjectMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_ObjectMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (id) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(id)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_ObjectList*) values;
@end

@interface XS_StringMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_StringMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (NSString*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(NSString*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_StringList*) values;
@end

@interface XS_StringSet : NSObject
{
    @private XS_StringMap* map_;
}
/* public */ @property (strong) XS_StringMap* map;
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_StringSet*) new;
/* public */ - (XS_StringMap*) map;
/* public */ - (void) setMap :(XS_StringMap*)value;
/* public */ - (xs_int) count;
/* public */ - (void) add :(NSString*)value;
/* public */ - (void) clear;
/* public */ - (xs_boolean) has :(NSString*)value;
/* public */ - (void) remove :(NSString*)value;
/* public */ - (XS_StringList*) values;
@end

@interface XS_DataTypeList : XS_ListBase
+ (XS_DataTypeList*) new;
/* public */ - (void) privateInit;
+ (XS_DataTypeList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_DataTypeList*) add :(XS_DataType*)item;
/* public */ - (void) addAll :(XS_DataTypeList*)other;
/* public */ - (XS_DataType*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_DataType*)item;
/* public */ - (xs_boolean) has :(XS_DataType*)item;
/* public */ - (xs_int) firstIndexOf :(XS_DataType*)item;
/* public */ - (xs_int) lastIndexOf :(XS_DataType*)item;
/* public */ - (void) insert :(xs_int)index :(XS_DataType*)item;
/* public */ - (xs_boolean) remove :(XS_DataType*)item;
/* public */ - (XS_DataTypeList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_DataTypeList*) share :(XS_ListBase*)list;
@end

@interface XS_DataTypeMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_DataTypeMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_DataType*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_DataType*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_DataTypeList*) values;
@end

/* internal */ @interface XS_BasicTypes : NSObject
{
    @private XS_DataTypeList* my_list;
    @private XS_DataTypeMap* my_map;
}
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ + (XS_BasicTypes*) singleton;
+ (XS_BasicTypes*) new;
/* private */ - (void) privateInit;
/* public */ + (XS_BasicTypes*) myInit;
/* public */ - (XS_DataType*) byCode :(xs_int)code;
/* public */ - (XS_DataType*) byName :(NSString*)name;
/* private */ + (XS_BasicTypes*) DC1 :(XS_DataTypeList*)p1 :(XS_DataTypeMap*)p2;
@end

@interface XS_EnumValue : XS_DataValue
{
    @private XS_EnumType* my_type;
    @private xs_long my_number;
    @private NSString* my_string;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* public */ - (XS_DataType*) dataType;
+ (XS_EnumValue*) new :(xs_long)num :(NSString*)str :(XS_EnumType*)type;
/* public */ - (void) privateInit :(xs_long)num :(NSString*)str :(XS_EnumType*)type;
/* public */ + (xs_int) compare :(XS_EnumValue*)x :(XS_EnumValue*)y;
/* public */ + (xs_boolean) equal :(XS_EnumValue*)x :(XS_EnumValue*)y;
/* public */ - (XS_DataValue*) getValue;
/* public */ - (xs_byte) byteValue;
/* public */ - (xs_short) shortValue;
/* public */ - (xs_int) intValue;
/* public */ - (xs_long) longValue;
/* public */ - (NSString*) toString;
@end

@interface XS_EnumValueList : XS_ListBase
+ (XS_EnumValueList*) new;
/* public */ - (void) privateInit;
+ (XS_EnumValueList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_EnumValueList*) add :(XS_EnumValue*)item;
/* public */ - (void) addAll :(XS_EnumValueList*)other;
/* public */ - (XS_EnumValue*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_EnumValue*)item;
/* public */ - (xs_boolean) has :(XS_EnumValue*)item;
/* public */ - (xs_int) firstIndexOf :(XS_EnumValue*)item;
/* public */ - (xs_int) lastIndexOf :(XS_EnumValue*)item;
/* public */ - (void) insert :(xs_int)index :(XS_EnumValue*)item;
/* public */ - (xs_boolean) remove :(XS_EnumValue*)item;
/* public */ - (XS_EnumValueList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_EnumValueList*) share :(XS_ListBase*)list;
@end

@interface XS_EnumValueMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_EnumValueMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_EnumValue*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_EnumValue*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_EnumValueList*) values;
@end

@interface XS_TypeFacets : NSObject
{
    @private xs_nullable_boolean isNullable_;
    @private xs_nullable_boolean isUnicode_;
    @private xs_nullable_boolean readOnly_;
    @private xs_nullable_boolean fixedLength_;
    @private xs_nullable_int maxLength_;
    @private xs_nullable_int precision_;
    @private xs_nullable_int scale_;
    @private xs_nullable_int srid_;
    @private XS_DataValue* defaultValue_;
}
/* public */ @property xs_nullable_boolean isNullable;
/* public */ @property xs_nullable_boolean isUnicode;
/* public */ @property xs_nullable_boolean readOnly;
/* public */ @property xs_nullable_boolean fixedLength;
/* public */ @property xs_nullable_int maxLength;
/* public */ @property xs_nullable_int precision;
/* public */ @property xs_nullable_int scale;
/* public */ @property xs_nullable_int srid;
/* public */ @property (strong) XS_DataValue* defaultValue;
/* private */ - (id) init;
/* public */ + (XS_TypeFacets*) new;
/* public */ - (xs_nullable_boolean) isNullable;
/* public */ - (void) setIsNullable :(xs_nullable_boolean)value;
/* public */ - (xs_nullable_boolean) isUnicode;
/* public */ - (void) setIsUnicode :(xs_nullable_boolean)value;
/* public */ - (xs_nullable_boolean) readOnly;
/* public */ - (void) setReadOnly :(xs_nullable_boolean)value;
/* public */ - (xs_nullable_boolean) fixedLength;
/* public */ - (void) setFixedLength :(xs_nullable_boolean)value;
/* public */ - (xs_nullable_int) maxLength;
/* public */ - (void) setMaxLength :(xs_nullable_int)value;
/* public */ - (xs_nullable_int) precision;
/* public */ - (void) setPrecision :(xs_nullable_int)value;
/* public */ - (xs_nullable_int) scale;
/* public */ - (void) setScale :(xs_nullable_int)value;
/* public */ - (xs_nullable_int) srid;
/* public */ - (void) setSrid :(xs_nullable_int)value;
/* public */ - (XS_DataValue*) defaultValue;
/* public */ - (void) setDefaultValue :(XS_DataValue*)value;
@end

#define XS_TypeFacets_ANY_PRECISION 0
#define XS_TypeFacets_MAXIMUM_LENGTH 2147483647
#define XS_TypeFacets_INTEGRAL_SCALE 0
#define XS_TypeFacets_VARIABLE_SCALE 2147483647
#define XS_TypeFacets_VARIABLE_SRID 2147483647

/* internal */ @interface XS_UnknownValue : XS_DataValue
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ + (XS_UnknownValue*) new;
/* public */ - (XS_DataType*) dataType;
@end

@interface XS_PointCoordinates : XS_ListBase
/* public */ @property xs_double x;
/* public */ @property xs_double y;
/* public */ @property xs_double z;
/* public */ @property xs_double altitude;
/* public */ @property xs_double latitude;
/* public */ @property xs_double longitude;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ - (xs_double) x;
/* public */ - (void) setX :(xs_double)value;
/* public */ - (xs_double) y;
/* public */ - (void) setY :(xs_double)value;
/* public */ - (xs_double) z;
/* public */ - (void) setZ :(xs_double)value;
/* public */ - (xs_double) altitude;
/* public */ - (void) setAltitude :(xs_double)value;
/* public */ - (xs_double) latitude;
/* public */ - (void) setLatitude :(xs_double)value;
/* public */ - (xs_double) longitude;
/* public */ - (void) setLongitude :(xs_double)value;
+ (XS_PointCoordinates*) new;
/* public */ - (void) privateInit;
+ (XS_PointCoordinates*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ + (XS_PointCoordinates*) fromList :(NSEnumerator*)values :(xs_int)length;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PointCoordinates*) add :(xs_double)item;
/* public */ - (XS_PointCoordinates*) addNullable :(xs_nullable_double)item;
/* public */ - (void) addAll :(XS_PointCoordinates*)other;
/* public */ - (xs_double) get :(xs_int)index;
/* public */ - (xs_nullable_double) getNullable :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(xs_double)item;
/* public */ - (void) setNullable :(xs_int)index :(xs_nullable_double)item;
/* public */ - (xs_boolean) has :(xs_double)item;
/* public */ - (xs_boolean) hasNullable :(xs_nullable_double)item;
/* public */ - (xs_int) firstIndexOf :(xs_double)item;
/* public */ - (xs_int) firstIndexOfNullable :(xs_nullable_double)item;
/* public */ - (xs_int) lastIndexOf :(xs_double)item;
/* public */ - (xs_int) lastIndexOfNullable :(xs_nullable_double)item;
/* public */ - (void) insert :(xs_int)index :(xs_double)item;
/* public */ - (void) insertNullable :(xs_int)index :(xs_nullable_double)item;
/* public */ - (xs_boolean) remove :(xs_double)item;
/* public */ - (xs_boolean) removeNullable :(xs_nullable_double)item;
/* public */ - (XS_PointCoordinates*) slice :(xs_int)start :(xs_int)end;
/* public */ - (void) sort;
/* public */ + (XS_PointCoordinates*) share :(XS_ListBase*)list;
@end

@interface XS_MultiPointCoordinates : XS_ListBase
+ (XS_MultiPointCoordinates*) new;
/* public */ - (void) privateInit;
+ (XS_MultiPointCoordinates*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_MultiPointCoordinates*) add :(XS_PointCoordinates*)item;
/* public */ - (void) addAll :(XS_MultiPointCoordinates*)other;
/* public */ - (XS_PointCoordinates*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_PointCoordinates*)item;
/* public */ - (xs_boolean) has :(XS_PointCoordinates*)item;
/* public */ - (xs_int) firstIndexOf :(XS_PointCoordinates*)item;
/* public */ - (xs_int) lastIndexOf :(XS_PointCoordinates*)item;
/* public */ - (void) insert :(xs_int)index :(XS_PointCoordinates*)item;
/* public */ - (xs_boolean) remove :(XS_PointCoordinates*)item;
/* public */ - (XS_MultiPointCoordinates*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_MultiPointCoordinates*) share :(XS_ListBase*)list;
@end

@interface XS_CurveCoordinates : XS_ListBase
+ (XS_CurveCoordinates*) new;
/* public */ - (void) privateInit;
+ (XS_CurveCoordinates*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_CurveCoordinates*) add :(XS_PointCoordinates*)item;
/* public */ - (void) addAll :(XS_CurveCoordinates*)other;
/* public */ - (XS_PointCoordinates*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_PointCoordinates*)item;
/* public */ - (xs_boolean) has :(XS_PointCoordinates*)item;
/* public */ - (xs_int) firstIndexOf :(XS_PointCoordinates*)item;
/* public */ - (xs_int) lastIndexOf :(XS_PointCoordinates*)item;
/* public */ - (void) insert :(xs_int)index :(XS_PointCoordinates*)item;
/* public */ - (xs_boolean) remove :(XS_PointCoordinates*)item;
/* public */ - (XS_CurveCoordinates*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_CurveCoordinates*) share :(XS_ListBase*)list;
@end

@interface XS_MultiCurveCoordinates : XS_ListBase
+ (XS_MultiCurveCoordinates*) new;
/* public */ - (void) privateInit;
+ (XS_MultiCurveCoordinates*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_MultiCurveCoordinates*) add :(XS_CurveCoordinates*)item;
/* public */ - (void) addAll :(XS_MultiCurveCoordinates*)other;
/* public */ - (XS_CurveCoordinates*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_CurveCoordinates*)item;
/* public */ - (xs_boolean) has :(XS_CurveCoordinates*)item;
/* public */ - (xs_int) firstIndexOf :(XS_CurveCoordinates*)item;
/* public */ - (xs_int) lastIndexOf :(XS_CurveCoordinates*)item;
/* public */ - (void) insert :(xs_int)index :(XS_CurveCoordinates*)item;
/* public */ - (xs_boolean) remove :(XS_CurveCoordinates*)item;
/* public */ - (XS_MultiCurveCoordinates*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_MultiCurveCoordinates*) share :(XS_ListBase*)list;
@end

@interface XS_PolygonCoordinates : XS_ListBase
+ (XS_PolygonCoordinates*) new;
/* public */ - (void) privateInit;
+ (XS_PolygonCoordinates*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_PolygonCoordinates*) add :(XS_MultiPointCoordinates*)item;
/* public */ - (void) addAll :(XS_PolygonCoordinates*)other;
/* public */ - (XS_MultiPointCoordinates*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_MultiPointCoordinates*)item;
/* public */ - (xs_boolean) has :(XS_MultiPointCoordinates*)item;
/* public */ - (xs_int) firstIndexOf :(XS_MultiPointCoordinates*)item;
/* public */ - (xs_int) lastIndexOf :(XS_MultiPointCoordinates*)item;
/* public */ - (void) insert :(xs_int)index :(XS_MultiPointCoordinates*)item;
/* public */ - (xs_boolean) remove :(XS_MultiPointCoordinates*)item;
/* public */ - (XS_PolygonCoordinates*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_PolygonCoordinates*) share :(XS_ListBase*)list;
@end

@interface XS_MultiPolygonCoordinates : XS_ListBase
+ (XS_MultiPolygonCoordinates*) new;
/* public */ - (void) privateInit;
+ (XS_MultiPolygonCoordinates*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_MultiPolygonCoordinates*) add :(XS_PolygonCoordinates*)item;
/* public */ - (void) addAll :(XS_MultiPolygonCoordinates*)other;
/* public */ - (XS_PolygonCoordinates*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_PolygonCoordinates*)item;
/* public */ - (xs_boolean) has :(XS_PolygonCoordinates*)item;
/* public */ - (xs_int) firstIndexOf :(XS_PolygonCoordinates*)item;
/* public */ - (xs_int) lastIndexOf :(XS_PolygonCoordinates*)item;
/* public */ - (void) insert :(xs_int)index :(XS_PolygonCoordinates*)item;
/* public */ - (xs_boolean) remove :(XS_PolygonCoordinates*)item;
/* public */ - (XS_MultiPolygonCoordinates*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_MultiPolygonCoordinates*) share :(XS_ListBase*)list;
@end

@interface XS_GeographyValue : XS_DataValue
{
    @private xs_int srsCode_;
    @private NSString* srsName_;
}
/* public */ @property xs_int srsCode;
/* public */ @property (strong) NSString* srsName;
/* private */ - (id) init;
/* public */ + (XS_GeographyValue*) new;
/* public */ - (xs_int) srsCode;
/* public */ - (void) setSrsCode :(xs_int)value;
/* public */ - (NSString*) srsName;
/* public */ - (void) setSrsName :(NSString*)value;
/* public */ + (XS_GeographyValue*) parseAny :(NSString*)text :(XS_DataType*)type;
/* public */ - (NSString*) toString;
@end

#define XS_GeographyValue_DEFAULT_SRID 4326

@interface XS_GeographyValueList : XS_ListBase
+ (XS_GeographyValueList*) new;
/* public */ - (void) privateInit;
+ (XS_GeographyValueList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_GeographyValueList*) add :(XS_GeographyValue*)item;
/* public */ - (void) addAll :(XS_GeographyValueList*)other;
/* public */ - (XS_GeographyValue*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_GeographyValue*)item;
/* public */ - (xs_boolean) has :(XS_GeographyValue*)item;
/* public */ - (xs_int) firstIndexOf :(XS_GeographyValue*)item;
/* public */ - (xs_int) lastIndexOf :(XS_GeographyValue*)item;
/* public */ - (void) insert :(xs_int)index :(XS_GeographyValue*)item;
/* public */ - (xs_boolean) remove :(XS_GeographyValue*)item;
/* public */ - (XS_GeographyValueList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_GeographyValueList*) share :(XS_ListBase*)list;
@end

@interface XS_GeographyPoint : XS_GeographyValue
{
    @private XS_PointCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_PointCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeographyPoint*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PointCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_PointCoordinates*)value;
/* public */ + (XS_GeographyPoint*) parse :(NSString*)text;
@end

@interface XS_GeographyMultiPoint : XS_GeographyValue
{
    @private XS_MultiPointCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_MultiPointCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeographyMultiPoint*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_MultiPointCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_MultiPointCoordinates*)value;
/* public */ + (XS_GeographyMultiPoint*) parse :(NSString*)text;
@end

@interface XS_GeographyLineString : XS_GeographyValue
{
    @private XS_CurveCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_CurveCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeographyLineString*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_CurveCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_CurveCoordinates*)value;
/* public */ + (XS_GeographyLineString*) parse :(NSString*)text;
@end

@interface XS_GeographyMultiLineString : XS_GeographyValue
{
    @private XS_MultiCurveCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_MultiCurveCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeographyMultiLineString*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_MultiCurveCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_MultiCurveCoordinates*)value;
/* public */ + (XS_GeographyMultiLineString*) parse :(NSString*)text;
@end

@interface XS_GeographyPolygon : XS_GeographyValue
{
    @private XS_PolygonCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_PolygonCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeographyPolygon*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PolygonCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_PolygonCoordinates*)value;
/* public */ + (XS_GeographyPolygon*) parse :(NSString*)text;
@end

@interface XS_GeographyMultiPolygon : XS_GeographyValue
{
    @private XS_MultiPolygonCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_MultiPolygonCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeographyMultiPolygon*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_MultiPolygonCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_MultiPolygonCoordinates*)value;
/* public */ + (XS_GeographyMultiPolygon*) parse :(NSString*)text;
@end

@interface XS_GeographyCollection : XS_GeographyValue
{
    @private XS_GeographyValueList* geographies_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_GeographyValueList* geographies;
/* private */ - (id) init;
/* public */ + (XS_GeographyCollection*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_GeographyValueList*) geographies;
/* public */ - (void) setGeographies :(XS_GeographyValueList*)value;
/* public */ + (XS_GeographyCollection*) parse :(NSString*)text;
@end

@interface XS_GeometryValue : XS_DataValue
{
    @private xs_int srsCode_;
    @private NSString* srsName_;
}
/* public */ @property xs_int srsCode;
/* public */ @property (strong) NSString* srsName;
/* private */ - (id) init;
/* public */ + (XS_GeometryValue*) new;
/* public */ - (xs_int) srsCode;
/* public */ - (void) setSrsCode :(xs_int)value;
/* public */ - (NSString*) srsName;
/* public */ - (void) setSrsName :(NSString*)value;
/* public */ + (XS_GeometryValue*) parseAny :(NSString*)text :(XS_DataType*)type;
/* public */ - (NSString*) toString;
@end

#define XS_GeometryValue_DEFAULT_SRID 0

@interface XS_GeometryValueList : XS_ListBase
+ (XS_GeometryValueList*) new;
/* public */ - (void) privateInit;
+ (XS_GeometryValueList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_GeometryValueList*) add :(XS_GeometryValue*)item;
/* public */ - (void) addAll :(XS_GeometryValueList*)other;
/* public */ - (XS_GeometryValue*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_GeometryValue*)item;
/* public */ - (xs_boolean) has :(XS_GeometryValue*)item;
/* public */ - (xs_int) firstIndexOf :(XS_GeometryValue*)item;
/* public */ - (xs_int) lastIndexOf :(XS_GeometryValue*)item;
/* public */ - (void) insert :(xs_int)index :(XS_GeometryValue*)item;
/* public */ - (xs_boolean) remove :(XS_GeometryValue*)item;
/* public */ - (XS_GeometryValueList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_GeometryValueList*) share :(XS_ListBase*)list;
@end

@interface XS_GeometryPoint : XS_GeometryValue
{
    @private XS_PointCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_PointCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeometryPoint*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PointCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_PointCoordinates*)value;
/* public */ + (XS_GeometryPoint*) parse :(NSString*)text;
@end

@interface XS_GeometryMultiPoint : XS_GeometryValue
{
    @private XS_MultiPointCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_MultiPointCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeometryMultiPoint*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_MultiPointCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_MultiPointCoordinates*)value;
/* public */ + (XS_GeometryMultiPoint*) parse :(NSString*)text;
@end

@interface XS_GeometryLineString : XS_GeometryValue
{
    @private XS_CurveCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_CurveCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeometryLineString*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_CurveCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_CurveCoordinates*)value;
/* public */ + (XS_GeometryLineString*) parse :(NSString*)text;
@end

@interface XS_GeometryMultiLineString : XS_GeometryValue
{
    @private XS_MultiCurveCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_MultiCurveCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeometryMultiLineString*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_MultiCurveCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_MultiCurveCoordinates*)value;
/* public */ + (XS_GeometryMultiLineString*) parse :(NSString*)text;
@end

@interface XS_GeometryPolygon : XS_GeometryValue
{
    @private XS_PolygonCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_PolygonCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeometryPolygon*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PolygonCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_PolygonCoordinates*)value;
/* public */ + (XS_GeometryPolygon*) parse :(NSString*)text;
@end

@interface XS_GeometryMultiPolygon : XS_GeometryValue
{
    @private XS_MultiPolygonCoordinates* coordinates_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_MultiPolygonCoordinates* coordinates;
/* private */ - (id) init;
/* public */ + (XS_GeometryMultiPolygon*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_MultiPolygonCoordinates*) coordinates;
/* public */ - (void) setCoordinates :(XS_MultiPolygonCoordinates*)value;
/* public */ + (XS_GeometryMultiPolygon*) parse :(NSString*)text;
@end

@interface XS_GeometryCollection : XS_GeometryValue
{
    @private XS_GeometryValueList* geometries_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_GeometryValueList* geometries;
/* private */ - (id) init;
/* public */ + (XS_GeometryCollection*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_GeometryValueList*) geometries;
/* public */ - (void) setGeometries :(XS_GeometryValueList*)value;
/* public */ + (XS_GeometryCollection*) parse :(NSString*)text;
@end

@interface XS_Parameter : NSObject
{
    @private NSString* name_;
    @private XS_DataType* type_;
    @private xs_int mode_;
    @private XS_DataValue* value_;
    @private XS_TypeFacets* typeFacets_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
}
/* public */ @property (strong) NSString* name;
/* public */ @property (strong) XS_DataType* type;
/* public */ @property xs_int mode;
/* public */ @property (strong) XS_DataValue* value;
/* public */ @property (strong) XS_TypeFacets* typeFacets;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (readonly) xs_boolean isNullable;
/* public */ @property (readonly) xs_boolean isUnicode;
/* public */ @property (readonly) xs_boolean fixedLength;
/* public */ @property (readonly) xs_int maxLength;
/* public */ @property (readonly) xs_int precision;
/* public */ @property (readonly) xs_int scale;
/* public */ @property (readonly) xs_int srid;
/* public */ @property (readonly, strong) XS_DataValue* defaultValue;
/* private */ - (id) init;
/* public */ + (XS_Parameter*) new;
/* public */ - (NSString*) name;
/* public */ - (void) setName :(NSString*)value;
/* public */ - (XS_DataType*) type;
/* public */ - (void) setType :(XS_DataType*)value;
/* public */ - (xs_int) mode;
/* public */ - (void) setMode :(xs_int)value;
/* public */ - (XS_DataValue*) value;
/* public */ - (void) setValue :(XS_DataValue*)value;
/* public */ - (XS_TypeFacets*) typeFacets;
/* public */ - (void) setTypeFacets :(XS_TypeFacets*)value;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (xs_boolean) isNullable;
/* public */ - (xs_boolean) isUnicode;
/* public */ - (xs_boolean) fixedLength;
/* public */ - (xs_int) maxLength;
/* public */ - (xs_int) precision;
/* public */ - (xs_int) scale;
/* public */ - (xs_int) srid;
/* public */ - (XS_DataValue*) defaultValue;
@end

#define XS_Parameter_MODE_IN 1
#define XS_Parameter_MODE_OUT 2
#define XS_Parameter_MODE_IN_OUT 3

@interface XS_ParameterList : XS_ListBase
/* public */ - (XS_ParameterList*) parameter :(NSString*)name :(XS_DataValue*)value;
+ (XS_ParameterList*) new;
/* public */ - (void) privateInit;
+ (XS_ParameterList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_ParameterList*) add :(XS_Parameter*)item;
/* public */ - (void) addAll :(XS_ParameterList*)other;
/* public */ - (XS_Parameter*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_Parameter*)item;
/* public */ - (xs_boolean) has :(XS_Parameter*)item;
/* public */ - (xs_int) firstIndexOf :(XS_Parameter*)item;
/* public */ - (xs_int) lastIndexOf :(XS_Parameter*)item;
/* public */ - (void) insert :(xs_int)index :(XS_Parameter*)item;
/* public */ - (xs_boolean) remove :(XS_Parameter*)item;
/* public */ - (XS_ParameterList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_ParameterList*) share :(XS_ListBase*)list;
/* private */ + (XS_Parameter*) DC1 :(NSString*)p1 :(XS_DataValue*)p2;
@end

@interface XS_Annotation : NSObject
{
    @private XS_AnnotationTerm* term_;
    @private XS_DataValue* value_;
    @private NSString* qualifier_;
}
/* public */ @property (strong) XS_AnnotationTerm* term;
/* public */ @property (strong) XS_DataValue* value;
/* public */ @property (strong) NSString* qualifier;
/* private */ - (id) init;
/* public */ + (XS_Annotation*) new;
/* public */ - (XS_AnnotationTerm*) term;
/* public */ - (void) setTerm :(XS_AnnotationTerm*)value;
/* public */ - (XS_DataValue*) value;
/* public */ - (void) setValue :(XS_DataValue*)value;
/* public */ - (NSString*) qualifier;
/* public */ - (void) setQualifier :(NSString*)value;
@end

@interface XS_AnnotationList : XS_ListBase
+ (XS_AnnotationList*) new;
/* public */ - (void) privateInit;
+ (XS_AnnotationList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_AnnotationList*) add :(XS_Annotation*)item;
/* public */ - (void) addAll :(XS_AnnotationList*)other;
/* public */ - (XS_Annotation*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_Annotation*)item;
/* public */ - (xs_boolean) has :(XS_Annotation*)item;
/* public */ - (xs_int) firstIndexOf :(XS_Annotation*)item;
/* public */ - (xs_int) lastIndexOf :(XS_Annotation*)item;
/* public */ - (void) insert :(xs_int)index :(XS_Annotation*)item;
/* public */ - (xs_boolean) remove :(XS_Annotation*)item;
/* public */ - (XS_AnnotationList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_AnnotationList*) share :(XS_ListBase*)list;
@end

@interface XS_AnnotationMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_AnnotationMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_Annotation*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_Annotation*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_AnnotationList*) values;
@end

@interface XS_AnnotationTerm : NSObject
{
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @private XS_DataType* type_;
    @private XS_AnnotationTerm* baseTerm_;
    @private XS_DataValue* defaultValue_;
    @private XS_StringList* appliesTo_;
    @private XS_TypeFacets* facets_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
}
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property (strong) XS_DataType* type;
/* public */ @property (strong) XS_AnnotationTerm* baseTerm;
/* public */ @property (strong) XS_DataValue* defaultValue;
/* public */ @property (strong) XS_StringList* appliesTo;
/* public */ @property (strong) XS_TypeFacets* facets;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* private */ - (id) init;
/* public */ + (XS_AnnotationTerm*) new;
/* public */ - (NSString*) name;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (XS_DataType*) type;
/* public */ - (void) setType :(XS_DataType*)value;
/* public */ - (XS_AnnotationTerm*) baseTerm;
/* public */ - (void) setBaseTerm :(XS_AnnotationTerm*)value;
/* public */ - (XS_DataValue*) defaultValue;
/* public */ - (void) setDefaultValue :(XS_DataValue*)value;
/* public */ - (XS_StringList*) appliesTo;
/* public */ - (void) setAppliesTo :(XS_StringList*)value;
/* public */ - (XS_TypeFacets*) facets;
/* public */ - (void) setFacets :(XS_TypeFacets*)value;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
@end

@interface XS_AnnotationTermList : XS_ListBase
+ (XS_AnnotationTermList*) new;
/* public */ - (void) privateInit;
+ (XS_AnnotationTermList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_AnnotationTermList*) add :(XS_AnnotationTerm*)item;
/* public */ - (void) addAll :(XS_AnnotationTermList*)other;
/* public */ - (XS_AnnotationTerm*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_AnnotationTerm*)item;
/* public */ - (xs_boolean) has :(XS_AnnotationTerm*)item;
/* public */ - (xs_int) firstIndexOf :(XS_AnnotationTerm*)item;
/* public */ - (xs_int) lastIndexOf :(XS_AnnotationTerm*)item;
/* public */ - (void) insert :(xs_int)index :(XS_AnnotationTerm*)item;
/* public */ - (xs_boolean) remove :(XS_AnnotationTerm*)item;
/* public */ - (XS_AnnotationTermList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_AnnotationTermList*) share :(XS_ListBase*)list;
@end

@interface XS_AnnotationTermMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_AnnotationTermMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_AnnotationTerm*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_AnnotationTerm*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_AnnotationTermList*) values;
@end

@interface XS_PropertyInfo : XS_DataValue
{
    @private xs_int id_;
    @private NSString* name_;
    @private XS_DataType* type_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
    @private XS_CustomPath* customPath_;
    @private XS_TypeFacets* typeFacets_;
    @private NSString* column_;
    @private xs_boolean isKey_;
    @private XS_EntitySet* offlineLinks_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property xs_int id;
/* public */ @property (strong) NSString* name;
/* public */ @property (strong) XS_DataType* type;
/* public */ @property (readonly, strong) XS_ComplexType* complexType;
/* public */ @property (readonly, strong) XS_EntityType* entityType;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (strong) XS_CustomPath* customPath;
/* public */ @property (strong) XS_TypeFacets* typeFacets;
/* public */ @property (strong) NSString* column;
/* public */ @property xs_boolean isKey;
/* public */ @property (readonly) xs_boolean isPersistent;
/* public */ @property (readonly) xs_boolean isStream;
/* public */ @property (readonly) xs_boolean isStructural;
/* public */ @property (readonly) xs_boolean isNavigation;
/* public */ @property (readonly) xs_boolean isNullable;
/* public */ @property (readonly) xs_boolean isUnicode;
/* public */ @property (readonly) xs_boolean readOnly;
/* public */ @property (readonly) xs_boolean fixedLength;
/* public */ @property (readonly) xs_int maxLength;
/* public */ @property (readonly) xs_int precision;
/* public */ @property (readonly) xs_int scale;
/* public */ @property (readonly) xs_int srid;
/* public */ @property (readonly, strong) XS_DataValue* defaultValue;
/* internal */ @property (strong) XS_EntitySet* offlineLinks;
/* private */ - (id) init;
/* public */ + (XS_PropertyInfo*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (xs_int) id;
/* public */ - (void) setId :(xs_int)value;
/* public */ - (NSString*) name;
/* public */ - (void) setName :(NSString*)value;
/* public */ - (XS_DataType*) type;
/* public */ - (void) setType :(XS_DataType*)value;
/* public */ - (XS_ComplexType*) complexType;
/* public */ - (XS_EntityType*) entityType;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_CustomPath*) customPath;
/* public */ - (void) setCustomPath :(XS_CustomPath*)value;
/* public */ - (XS_TypeFacets*) typeFacets;
/* public */ - (void) setTypeFacets :(XS_TypeFacets*)value;
/* public */ - (NSString*) column;
/* public */ - (void) setColumn :(NSString*)value;
/* public */ - (xs_boolean) isKey;
/* public */ - (void) setIsKey :(xs_boolean)value;
/* public */ - (xs_boolean) isPersistent;
/* public */ - (xs_boolean) isStream;
/* public */ - (xs_boolean) isStructural;
/* public */ - (xs_boolean) isNavigation;
/* public */ - (xs_boolean) isNullable;
/* public */ - (xs_boolean) isUnicode;
/* public */ - (xs_boolean) readOnly;
/* public */ - (xs_boolean) fixedLength;
/* public */ - (xs_int) maxLength;
/* public */ - (xs_int) precision;
/* public */ - (xs_int) scale;
/* public */ - (xs_int) srid;
/* public */ - (XS_DataValue*) defaultValue;
/* internal */ - (XS_EntitySet*) offlineLinks;
/* internal */ - (void) setOfflineLinks :(XS_EntitySet*)value;
/* public */ - (XS_Annotation*) getAnnotation :(NSString*)term;
/* public */ - (NSString*) toString;
@end

@interface XS_PropertyInfoList : XS_ListBase
+ (XS_PropertyInfoList*) new;
/* public */ - (void) privateInit;
+ (XS_PropertyInfoList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_PropertyInfoList*) add :(XS_PropertyInfo*)item;
/* public */ - (void) addAll :(XS_PropertyInfoList*)other;
/* public */ - (XS_PropertyInfo*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_PropertyInfo*)item;
/* public */ - (xs_boolean) has :(XS_PropertyInfo*)item;
/* public */ - (xs_int) firstIndexOf :(XS_PropertyInfo*)item;
/* public */ - (xs_int) lastIndexOf :(XS_PropertyInfo*)item;
/* public */ - (void) insert :(xs_int)index :(XS_PropertyInfo*)item;
/* public */ - (xs_boolean) remove :(XS_PropertyInfo*)item;
/* public */ - (XS_PropertyInfoList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_PropertyInfoList*) share :(XS_ListBase*)list;
@end

@interface XS_PropertyInfoMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_PropertyInfoMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_PropertyInfo*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_PropertyInfo*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_PropertyInfoList*) values;
@end

@interface XS_CustomPath : NSObject
{
    @private XS_PropertyInfo* __weak myProperty_;
    @private NSString* atomElement_;
    @private NSString* atomChild_;
    @private xs_boolean keepInContent_;
}
/* public */ @property (weak) XS_PropertyInfo* myProperty;
/* public */ @property (strong) NSString* atomElement;
/* public */ @property (strong) NSString* atomChild;
/* public */ @property xs_boolean keepInContent;
/* private */ - (id) init;
/* public */ + (XS_CustomPath*) new;
/* public */ - (XS_PropertyInfo*) myProperty;
/* public */ - (void) setMyProperty :(XS_PropertyInfo*)value;
/* public */ - (NSString*) atomElement;
/* public */ - (void) setAtomElement :(NSString*)value;
/* public */ - (NSString*) atomChild;
/* public */ - (void) setAtomChild :(NSString*)value;
/* public */ - (xs_boolean) keepInContent;
/* public */ - (void) setKeepInContent :(xs_boolean)value;
/* public */ + (XS_CustomPath*) fromTarget :(NSString*)path;
/* private */ + (XS_CustomPath*) DC1 :(NSString*)p1 :(NSString*)p2;
/* private */ + (XS_CustomPath*) DC2 :(NSString*)p1;
@end

@interface XS_CustomPathList : XS_ListBase
/* public */ - (XS_CustomPath*) forCode :(xs_int)code;
+ (XS_CustomPathList*) new;
/* public */ - (void) privateInit;
+ (XS_CustomPathList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_CustomPathList*) add :(XS_CustomPath*)item;
/* public */ - (void) addAll :(XS_CustomPathList*)other;
/* public */ - (XS_CustomPath*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_CustomPath*)item;
/* public */ - (xs_boolean) has :(XS_CustomPath*)item;
/* public */ - (xs_int) firstIndexOf :(XS_CustomPath*)item;
/* public */ - (xs_int) lastIndexOf :(XS_CustomPath*)item;
/* public */ - (void) insert :(xs_int)index :(XS_CustomPath*)item;
/* public */ - (xs_boolean) remove :(XS_CustomPath*)item;
/* public */ - (XS_CustomPathList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_CustomPathList*) share :(XS_ListBase*)list;
@end

@interface XS_DataStatistics : NSObject
/* private */ + (void) initialize;
/* internal */ + (XS_ObjectMap*) statsMap;
/* internal */ + (void) setStatsMap :(XS_ObjectMap*)value;
/* public */ + (void) logAll;
/* public */ + (void) writeAll :(XS_CharBuffer*)buffer;
/* public */ + (void) resetAll;
/* public */ + (XS_DataStatistic*) getStatistic :(NSString*)component :(NSString*)statistic :(NSString*)unit;
/* private */ + (XS_DataStatistic*) DC1 :(NSString*)p1 :(NSString*)p2 :(NSString*)p3;
@end

@interface XS_DataStatistic : NSObject
{
    @private NSString* my_component_;
    @private NSString* my_statistic_;
    @private NSString* my_unit_;
    @private xs_int my_calls_;
    @private xs_long my_total_;
    @private xs_long my_minimum_;
    @private xs_long my_maximum_;
}
/* internal */ @property (strong) NSString* my_component;
/* internal */ @property (strong) NSString* my_statistic;
/* internal */ @property (strong) NSString* my_unit;
/* internal */ @property xs_int my_calls;
/* internal */ @property xs_long my_total;
/* internal */ @property xs_long my_minimum;
/* internal */ @property xs_long my_maximum;
/* public */ @property (readonly, strong) NSString* component;
/* public */ @property (readonly, strong) NSString* statistic;
/* public */ @property (readonly, strong) NSString* unit;
/* public */ @property (readonly) xs_int calls;
/* public */ @property (readonly) xs_long total;
/* public */ @property (readonly) xs_long minimum;
/* public */ @property (readonly) xs_long maximum;
/* private */ - (id) init;
/* public */ + (XS_DataStatistic*) new;
/* internal */ - (NSString*) my_component;
/* internal */ - (void) setMy_component :(NSString*)value;
/* internal */ - (NSString*) my_statistic;
/* internal */ - (void) setMy_statistic :(NSString*)value;
/* internal */ - (NSString*) my_unit;
/* internal */ - (void) setMy_unit :(NSString*)value;
/* internal */ - (xs_int) my_calls;
/* internal */ - (void) setMy_calls :(xs_int)value;
/* internal */ - (xs_long) my_total;
/* internal */ - (void) setMy_total :(xs_long)value;
/* internal */ - (xs_long) my_minimum;
/* internal */ - (void) setMy_minimum :(xs_long)value;
/* internal */ - (xs_long) my_maximum;
/* internal */ - (void) setMy_maximum :(xs_long)value;
/* public */ - (NSString*) component;
/* public */ - (NSString*) statistic;
/* public */ - (NSString*) unit;
/* public */ - (xs_int) calls;
/* public */ - (xs_long) total;
/* public */ - (xs_long) minimum;
/* public */ - (xs_long) maximum;
/* public */ + (XS_DataStatistic*) getInstance :(NSString*)param_component :(NSString*)param_statistic :(NSString*)param_unit;
/* public */ - (void) add :(xs_long)count;
/* public */ - (void) write :(XS_CharBuffer*)buffer;
/* public */ - (void) reset;
/* public */ + (XS_DataStatistic*) createDatabaseTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) deleteDatabaseTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) createTableTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) createIndexTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) createEntityTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) updateEntityTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) deleteEntityTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) queryResultBytes :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) offlineResultBytes :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) onlineResultBytes :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) queryResultBytes_gzip :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) offlineResultBytes_gzip :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) onlineResultBytes_gzip :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) queryResultRows :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) offlineResultRows :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) onlineResultRows :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) executeQueryTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) offlineQueryTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) onlineQueryTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) followedNextLink :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) createLinkTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) updateLinkTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) deleteLinkTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) loadMetadataTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) fetchMetadataSize :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) fetchMetadataSize_gzip :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) fetchMetadataTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) parseMetadataTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) uploadTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) downloadPhaseTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) createRegistrationTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) updateRegistrationTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) deleteRegistrationTime :(NSString*)param_component;
/* public */ + (XS_DataStatistic*) byteInstance :(NSString*)param_component :(NSString*)param_statistic;
/* public */ + (XS_DataStatistic*) linkInstance :(NSString*)param_component :(NSString*)param_statistic;
/* public */ + (XS_DataStatistic*) rowInstance :(NSString*)param_component :(NSString*)param_statistic;
/* public */ + (XS_DataStatistic*) timeInstance :(NSString*)param_component :(NSString*)param_statistic;
@end

@interface XS_DataValueList : XS_ListBase
{
    @private XS_DataType* my_type;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_DataValueList*) withType :(XS_DataType*)type;
+ (XS_DataValueList*) new;
/* public */ - (void) privateInit;
+ (XS_DataValueList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_DataValueList*) add :(XS_DataValue*)item;
/* public */ - (void) addAll :(XS_DataValueList*)other;
/* public */ - (XS_DataValue*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_DataValue*)item;
/* public */ - (xs_boolean) has :(XS_DataValue*)item;
/* public */ - (xs_int) firstIndexOf :(XS_DataValue*)item;
/* public */ - (xs_int) lastIndexOf :(XS_DataValue*)item;
/* public */ - (void) insert :(xs_int)index :(XS_DataValue*)item;
/* public */ - (xs_boolean) remove :(XS_DataValue*)item;
/* public */ - (XS_DataValueList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_DataValueList*) share :(XS_ListBase*)list;
@end

@interface XS_DataValueMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_DataValueMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_DataValue*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_DataValue*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_DataValueList*) values;
@end

@interface XS_SimpleType : XS_DataType
{
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
    @private XS_TypeFacets* typeFacets_;
}
/* public */ @property (readonly) xs_int code;
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property (strong) XS_DataType* derivedFrom;
/* public */ @property (readonly) xs_boolean isDerived;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (strong) XS_TypeFacets* typeFacets;
/* private */ - (id) init;
/* public */ + (XS_SimpleType*) new;
/* public */ - (xs_int) code;
/* public */ - (NSString*) name;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (XS_DataType*) derivedFrom;
/* public */ - (void) setDerivedFrom :(XS_DataType*)value;
/* public */ - (xs_boolean) isDerived;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_TypeFacets*) typeFacets;
/* public */ - (void) setTypeFacets :(XS_TypeFacets*)value;
/* public */ - (XS_Annotation*) getAnnotation :(NSString*)term;
@end

@interface XS_SimpleTypeList : XS_ListBase
+ (XS_SimpleTypeList*) new;
/* public */ - (void) privateInit;
+ (XS_SimpleTypeList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_SimpleTypeList*) add :(XS_SimpleType*)item;
/* public */ - (void) addAll :(XS_SimpleTypeList*)other;
/* public */ - (XS_SimpleType*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_SimpleType*)item;
/* public */ - (xs_boolean) has :(XS_SimpleType*)item;
/* public */ - (xs_int) firstIndexOf :(XS_SimpleType*)item;
/* public */ - (xs_int) lastIndexOf :(XS_SimpleType*)item;
/* public */ - (void) insert :(xs_int)index :(XS_SimpleType*)item;
/* public */ - (xs_boolean) remove :(XS_SimpleType*)item;
/* public */ - (XS_SimpleTypeList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_SimpleTypeList*) share :(XS_ListBase*)list;
@end

@interface XS_SimpleTypeMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_SimpleTypeMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_SimpleType*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_SimpleType*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_SimpleTypeList*) values;
@end

@interface XS_EnumType : XS_SimpleType
{
    @private xs_boolean isFlags_;
    @private XS_EnumValueList* memberList_;
    @private XS_EnumValueMap* memberMap_;
}
/* public */ @property (readonly) xs_int code;
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property xs_boolean isFlags;
/* public */ @property (strong) XS_EnumValueList* memberList;
/* public */ @property (strong) XS_EnumValueMap* memberMap;
/* private */ - (id) init;
/* public */ + (XS_EnumType*) new;
/* public */ - (xs_int) code;
/* public */ - (NSString*) name;
/* public */ - (xs_boolean) isFlags;
/* public */ - (void) setIsFlags :(xs_boolean)value;
/* public */ - (XS_EnumValueList*) memberList;
/* public */ - (void) setMemberList :(XS_EnumValueList*)value;
/* public */ - (XS_EnumValueMap*) memberMap;
/* public */ - (void) setMemberMap :(XS_EnumValueMap*)value;
/* public */ - (XS_EnumValue*) getMember :(NSString*)param_name;
/* public */ - (XS_EnumValue*) withByte :(xs_byte)value;
/* public */ - (XS_EnumValue*) withShort :(xs_short)value;
/* public */ - (XS_EnumValue*) withInt :(xs_int)value;
/* public */ - (XS_EnumValue*) withLong :(xs_long)value;
/* private */ - (XS_EnumValue*) withNumber :(xs_long)value;
@end

@interface XS_ComplexType : XS_DataType
{
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @private XS_ComplexTypeList* subtypes_;
    @private xs_boolean isAbstract_;
    @private xs_boolean isOpenType_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
    @private XS_PropertyInfoList* propertyList_;
    @private XS_PropertyInfoMap* propertyMap_;
    @private XS_PropertyInfoList* streamProperties_;
    @private XS_PropertyInfoList* complexProperties_;
    @private XS_PropertyInfoList* structuralProperties_;
    @private XS_PropertyInfoList* navigationProperties_;
}
/* public */ @property (readonly) xs_int code;
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property (weak) XS_ComplexType* supertype;
/* public */ @property (strong) XS_ComplexTypeList* subtypes;
/* public */ @property (readonly) xs_boolean hasSupertype;
/* public */ @property (readonly) xs_boolean hasSubtypes;
/* public */ @property xs_boolean isAbstract;
/* public */ @property xs_boolean isOpenType;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (strong) XS_PropertyInfoList* propertyList;
/* public */ @property (strong) XS_PropertyInfoMap* propertyMap;
/* public */ @property (strong) XS_PropertyInfoList* streamProperties;
/* public */ @property (strong) XS_PropertyInfoList* complexProperties;
/* public */ @property (strong) XS_PropertyInfoList* structuralProperties;
/* public */ @property (strong) XS_PropertyInfoList* navigationProperties;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ + (XS_ComplexType*) new;
/* public */ + (XS_ComplexType*) ABSTRACT_BASE;
/* public */ - (xs_int) code;
/* public */ - (NSString*) name;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (XS_ComplexType*) supertype;
/* public */ - (void) setSupertype :(XS_ComplexType*)value;
/* public */ - (XS_ComplexTypeList*) subtypes;
/* public */ - (void) setSubtypes :(XS_ComplexTypeList*)value;
/* public */ - (xs_boolean) hasSupertype;
/* public */ - (xs_boolean) hasSubtypes;
/* public */ - (xs_boolean) isAbstract;
/* public */ - (void) setIsAbstract :(xs_boolean)value;
/* public */ - (xs_boolean) isOpenType;
/* public */ - (void) setIsOpenType :(xs_boolean)value;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_PropertyInfoList*) propertyList;
/* public */ - (void) setPropertyList :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoMap*) propertyMap;
/* public */ - (void) setPropertyMap :(XS_PropertyInfoMap*)value;
/* public */ - (XS_PropertyInfoList*) streamProperties;
/* public */ - (void) setStreamProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) complexProperties;
/* public */ - (void) setComplexProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) structuralProperties;
/* public */ - (void) setStructuralProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) navigationProperties;
/* public */ - (void) setNavigationProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_Annotation*) getAnnotation :(NSString*)term;
/* public */ - (XS_PropertyInfo*) getProperty :(NSString*)param_name;
/* private */ + (XS_ComplexType*) DC1 :(XS_PropertyInfoList*)p1 :(xs_boolean)p2 :(NSString*)p3 :(XS_PropertyInfoList*)p4 :(XS_PropertyInfoList*)p5 :(XS_PropertyInfoMap*)p6 :(NSString*)p7 :(XS_PropertyInfoList*)p8 :(XS_PropertyInfoList*)p9;
@end

@interface XS_ComplexTypeList : XS_ListBase
+ (XS_ComplexTypeList*) new;
/* public */ - (void) privateInit;
+ (XS_ComplexTypeList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_ComplexTypeList*) add :(XS_ComplexType*)item;
/* public */ - (void) addAll :(XS_ComplexTypeList*)other;
/* public */ - (XS_ComplexType*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_ComplexType*)item;
/* public */ - (xs_boolean) has :(XS_ComplexType*)item;
/* public */ - (xs_int) firstIndexOf :(XS_ComplexType*)item;
/* public */ - (xs_int) lastIndexOf :(XS_ComplexType*)item;
/* public */ - (void) insert :(xs_int)index :(XS_ComplexType*)item;
/* public */ - (xs_boolean) remove :(XS_ComplexType*)item;
/* public */ - (XS_ComplexTypeList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_ComplexTypeList*) share :(XS_ListBase*)list;
@end

@interface XS_ComplexTypeMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_ComplexTypeMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_ComplexType*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_ComplexType*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_ComplexTypeList*) values;
@end

@interface XS_ComplexValue : XS_DataValue
{
    @private NSString* my_path_;
    @private XS_DataValueList* my_data_;
    @private XS_BooleanList* my_has_;
    @private XS_DataValueMap* my_open_;
    @private XS_ComplexType* my_type_;
    @private XS_DataValueMap* dynamicProperties_;
}
/* protected */ @property (strong) NSString* my_path;
/* protected */ @property (strong) XS_DataValueList* my_data;
/* protected */ @property (strong) XS_BooleanList* my_has;
/* protected */ @property (strong) XS_DataValueMap* my_open;
/* protected */ @property (strong) XS_ComplexType* my_type;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly, strong) XS_ComplexType* complexType;
/* public */ @property (strong) XS_DataValueMap* dynamicProperties;
/* public */ @property (strong) NSString* valuePath;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* protected */ - (NSString*) my_path;
/* protected */ - (void) setMy_path :(NSString*)value;
/* protected */ - (XS_DataValueList*) my_data;
/* protected */ - (void) setMy_data :(XS_DataValueList*)value;
/* protected */ - (XS_BooleanList*) my_has;
/* protected */ - (void) setMy_has :(XS_BooleanList*)value;
/* protected */ - (XS_DataValueMap*) my_open;
/* protected */ - (void) setMy_open :(XS_DataValueMap*)value;
/* protected */ - (XS_ComplexType*) my_type;
/* protected */ - (void) setMy_type :(XS_ComplexType*)value;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ComplexType*) complexType;
/* public */ - (XS_DataValueMap*) dynamicProperties;
/* public */ - (void) setDynamicProperties :(XS_DataValueMap*)value;
/* public */ - (NSString*) valuePath;
/* public */ - (void) setValuePath :(NSString*)value;
+ (XS_ComplexValue*) new;
/* protected */ - (void) privateInit;
+ (XS_ComplexValue*) new :(XS_ComplexType*)type;
/* protected */ - (void) privateInit :(XS_ComplexType*)type;
/* protected */ - (void) init :(XS_ComplexType*)type;
/* public */ - (XS_DataValue*) getValue :(XS_PropertyInfo*)pi;
/* public */ - (XS_ListBase*) getList :(XS_PropertyInfo*)pi;
/* public */ - (NSString*) getString :(XS_PropertyInfo*)pi;
/* public */ - (NSData*) getBinary :(XS_PropertyInfo*)pi;
/* public */ - (xs_boolean) getBoolean :(XS_PropertyInfo*)pi;
/* public */ - (xs_char) getChar :(XS_PropertyInfo*)pi;
/* public */ - (xs_byte) getByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_short) getShort :(XS_PropertyInfo*)pi;
/* public */ - (xs_int) getInt :(XS_PropertyInfo*)pi;
/* public */ - (xs_long) getLong :(XS_PropertyInfo*)pi;
/* public */ - (xs_integer) getInteger :(XS_PropertyInfo*)pi;
/* public */ - (xs_decimal) getDecimal :(XS_PropertyInfo*)pi;
/* public */ - (xs_float) getFloat :(XS_PropertyInfo*)pi;
/* public */ - (xs_double) getDouble :(XS_PropertyInfo*)pi;
/* public */ - (xs_int) getUnsignedByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_int) getUnsignedShort :(XS_PropertyInfo*)pi;
/* public */ - (NSString*) getNullableString :(XS_PropertyInfo*)pi;
/* public */ - (NSData*) getNullableBinary :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_boolean) getNullableBoolean :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_char) getNullableChar :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_byte) getNullableByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_short) getNullableShort :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_int) getNullableInt :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_long) getNullableLong :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_integer) getNullableInteger :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_decimal) getNullableDecimal :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_float) getNullableFloat :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_double) getNullableDouble :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_int) getNullableUnsignedByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_int) getNullableUnsignedShort :(XS_PropertyInfo*)pi;
/* public */ - (XS_ComplexValue*) getComplex :(XS_PropertyInfo*)pi;
/* public */ - (XS_ComplexValueList*) getComplexList :(XS_PropertyInfo*)pi;
/* public */ - (XS_EntityValue*) getEntity :(XS_PropertyInfo*)pi;
/* public */ - (XS_EntityValueList*) getEntityList :(XS_PropertyInfo*)pi;
/* public */ - (XS_LocalDate*) getLocalDate :(XS_PropertyInfo*)pi;
/* public */ - (XS_LocalTime*) getLocalTime :(XS_PropertyInfo*)pi;
/* public */ - (XS_LocalDateTime*) getLocalDateTime :(XS_PropertyInfo*)pi;
/* public */ - (XS_GlobalDateTime*) getGlobalDateTime :(XS_PropertyInfo*)pi;
/* public */ - (XS_DayTimeDuration*) getDayTimeDuration :(XS_PropertyInfo*)pi;
/* public */ - (XS_YearMonthDuration*) getYearMonthDuration :(XS_PropertyInfo*)pi;
/* private */ - (void) checkPropertyGet :(XS_PropertyInfo*)pi :(XS_DataValue*)dv;
/* private */ - (xs_boolean) checkPropertyType :(XS_DataValue*)dv :(XS_PropertyInfo*)pi;
/* public */ - (void) checkPropertySet :(XS_PropertyInfo*)pi :(XS_DataValue*)dv;
/* public */ - (void) setValue :(XS_PropertyInfo*)pi :(XS_DataValue*)value;
/* public */ - (void) setList :(XS_PropertyInfo*)pi :(XS_ListBase*)value;
/* public */ - (void) setString :(XS_PropertyInfo*)pi :(NSString*)value;
/* public */ - (void) setBinary :(XS_PropertyInfo*)pi :(NSData*)value;
/* public */ - (void) setBoolean :(XS_PropertyInfo*)pi :(xs_boolean)value;
/* public */ - (void) setChar :(XS_PropertyInfo*)pi :(xs_char)value;
/* public */ - (void) setByte :(XS_PropertyInfo*)pi :(xs_byte)value;
/* public */ - (void) setShort :(XS_PropertyInfo*)pi :(xs_short)value;
/* public */ - (void) setInt :(XS_PropertyInfo*)pi :(xs_int)value;
/* public */ - (void) setLong :(XS_PropertyInfo*)pi :(xs_long)value;
/* public */ - (void) setInteger :(XS_PropertyInfo*)pi :(xs_integer)value;
/* public */ - (void) setDecimal :(XS_PropertyInfo*)pi :(xs_decimal)value;
/* public */ - (void) setFloat :(XS_PropertyInfo*)pi :(xs_float)value;
/* public */ - (void) setDouble :(XS_PropertyInfo*)pi :(xs_double)value;
/* public */ - (void) setUnsignedByte :(XS_PropertyInfo*)pi :(xs_int)value;
/* public */ - (void) setUnsignedShort :(XS_PropertyInfo*)pi :(xs_int)value;
/* public */ - (void) setNullableString :(XS_PropertyInfo*)pi :(NSString*)value;
/* public */ - (void) setNullableBinary :(XS_PropertyInfo*)pi :(NSData*)value;
/* public */ - (void) setNullableBoolean :(XS_PropertyInfo*)pi :(xs_nullable_boolean)value;
/* public */ - (void) setNullableChar :(XS_PropertyInfo*)pi :(xs_nullable_char)value;
/* public */ - (void) setNullableByte :(XS_PropertyInfo*)pi :(xs_nullable_byte)value;
/* public */ - (void) setNullableShort :(XS_PropertyInfo*)pi :(xs_nullable_short)value;
/* public */ - (void) setNullableInt :(XS_PropertyInfo*)pi :(xs_nullable_int)value;
/* public */ - (void) setNullableLong :(XS_PropertyInfo*)pi :(xs_nullable_long)value;
/* public */ - (void) setNullableInteger :(XS_PropertyInfo*)pi :(xs_nullable_integer)value;
/* public */ - (void) setNullableDecimal :(XS_PropertyInfo*)pi :(xs_nullable_decimal)value;
/* public */ - (void) setNullableFloat :(XS_PropertyInfo*)pi :(xs_nullable_float)value;
/* public */ - (void) setNullableDouble :(XS_PropertyInfo*)pi :(xs_nullable_double)value;
/* public */ - (void) setNullableUnsignedByte :(XS_PropertyInfo*)pi :(xs_nullable_int)value;
/* public */ - (void) setNullableUnsignedShort :(XS_PropertyInfo*)pi :(xs_nullable_int)value;
/* public */ - (void) setComplex :(XS_PropertyInfo*)pi :(XS_ComplexValue*)value;
/* public */ - (void) setComplexList :(XS_PropertyInfo*)pi :(XS_ComplexValueList*)value;
/* public */ - (void) setEntity :(XS_PropertyInfo*)pi :(XS_EntityValue*)value;
/* public */ - (void) setEntityList :(XS_PropertyInfo*)pi :(XS_EntityValueList*)value;
/* public */ - (void) setLocalDate :(XS_PropertyInfo*)pi :(XS_LocalDate*)value;
/* public */ - (void) setLocalTime :(XS_PropertyInfo*)pi :(XS_LocalTime*)value;
/* public */ - (void) setLocalDateTime :(XS_PropertyInfo*)pi :(XS_LocalDateTime*)value;
/* public */ - (void) setGlobalDateTime :(XS_PropertyInfo*)pi :(XS_GlobalDateTime*)value;
/* public */ - (void) setDayTimeDuration :(XS_PropertyInfo*)pi :(XS_DayTimeDuration*)value;
/* public */ - (void) setYearMonthDuration :(XS_PropertyInfo*)pi :(XS_YearMonthDuration*)value;
/* public */ + (XS_ComplexValue*) ofType :(XS_ComplexType*)type;
/* public */ - (XS_StreamLink*) getStreamLink :(XS_PropertyInfo*)pi;
/* public */ - (xs_boolean) hasValue :(XS_PropertyInfo*)pi;
/* public */ + (xs_boolean) equal :(XS_ComplexValue*)a :(XS_ComplexValue*)b;
/* public */ - (NSString*) toString;
/* public */ + (XS_DataValueList*) dataFor :(XS_ComplexType*)type;
/* public */ + (XS_BooleanList*) hasInit :(XS_ComplexType*)type;
@end

@interface XS_ComplexValueList : XS_ListBase
{
    @private XS_DataType* my_type;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ComplexValueList*) withType :(XS_DataType*)type;
+ (XS_ComplexValueList*) new;
/* public */ - (void) privateInit;
+ (XS_ComplexValueList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_ComplexValueList*) add :(XS_ComplexValue*)item;
/* public */ - (void) addAll :(XS_ComplexValueList*)other;
/* public */ - (XS_ComplexValue*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_ComplexValue*)item;
/* public */ - (xs_boolean) has :(XS_ComplexValue*)item;
/* public */ - (xs_int) firstIndexOf :(XS_ComplexValue*)item;
/* public */ - (xs_int) lastIndexOf :(XS_ComplexValue*)item;
/* public */ - (void) insert :(xs_int)index :(XS_ComplexValue*)item;
/* public */ - (xs_boolean) remove :(XS_ComplexValue*)item;
/* public */ - (XS_ComplexValueList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_ComplexValueList*) share :(XS_ListBase*)list;
@end

@interface XS_EntitySet : NSObject
{
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @private xs_int systemFlags_;
    @private XS_EntityType* entityType_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
    @protected XS_EntitySetMap* pathBindings_;
    @private xs_boolean isSingleton_;
}
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property xs_int systemFlags;
/* public */ @property (strong) XS_EntityType* entityType;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (readonly, strong) XS_EntitySetMap* pathBindings;
/* public */ @property xs_boolean isSingleton;
/* private */ - (id) init;
/* public */ + (XS_EntitySet*) new;
/* public */ - (NSString*) name;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (xs_int) systemFlags;
/* public */ - (void) setSystemFlags :(xs_int)value;
/* public */ - (XS_EntityType*) entityType;
/* public */ - (void) setEntityType :(XS_EntityType*)value;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_EntitySetMap*) pathBindings;
/* public */ - (xs_boolean) isSingleton;
/* public */ - (void) setIsSingleton :(xs_boolean)value;
/* public */ - (XS_Annotation*) getAnnotation :(NSString*)term;
@end

@interface XS_EntitySetList : XS_ListBase
+ (XS_EntitySetList*) new;
/* public */ - (void) privateInit;
+ (XS_EntitySetList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_EntitySetList*) add :(XS_EntitySet*)item;
/* public */ - (void) addAll :(XS_EntitySetList*)other;
/* public */ - (XS_EntitySet*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_EntitySet*)item;
/* public */ - (xs_boolean) has :(XS_EntitySet*)item;
/* public */ - (xs_int) firstIndexOf :(XS_EntitySet*)item;
/* public */ - (xs_int) lastIndexOf :(XS_EntitySet*)item;
/* public */ - (void) insert :(xs_int)index :(XS_EntitySet*)item;
/* public */ - (xs_boolean) remove :(XS_EntitySet*)item;
/* public */ - (XS_EntitySetList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_EntitySetList*) share :(XS_ListBase*)list;
@end

@interface XS_EntitySetMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_EntitySetMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_EntitySet*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_EntitySet*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_EntitySetList*) values;
@end

@interface XS_EntityType : XS_DataType
{
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @private XS_EntityTypeList* subtypes_;
    @private xs_boolean isAbstract_;
    @private xs_boolean isOpenType_;
    @private xs_boolean isMedia_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
    @private XS_PropertyInfoList* propertyList_;
    @private XS_PropertyInfoMap* propertyMap_;
    @private XS_PropertyInfoList* keyProperties_;
    @private XS_PropertyInfoList* streamProperties_;
    @private XS_PropertyInfoList* complexProperties_;
    @private XS_PropertyInfoList* structuralProperties_;
    @private XS_PropertyInfoList* navigationProperties_;
    @private XS_CustomPathList* customPaths_;
}
/* public */ @property (readonly) xs_int code;
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property (weak) XS_EntityType* supertype;
/* public */ @property (strong) XS_EntityTypeList* subtypes;
/* public */ @property (readonly) xs_boolean hasSupertype;
/* public */ @property (readonly) xs_boolean hasSubtypes;
/* public */ @property xs_boolean isAbstract;
/* public */ @property xs_boolean isOpenType;
/* public */ @property xs_boolean isMedia;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (strong) XS_PropertyInfoList* propertyList;
/* public */ @property (strong) XS_PropertyInfoMap* propertyMap;
/* public */ @property (strong) XS_PropertyInfoList* keyProperties;
/* public */ @property (strong) XS_PropertyInfoList* streamProperties;
/* public */ @property (strong) XS_PropertyInfoList* complexProperties;
/* public */ @property (strong) XS_PropertyInfoList* structuralProperties;
/* public */ @property (strong) XS_PropertyInfoList* navigationProperties;
/* public */ @property (strong) XS_CustomPathList* customPaths;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ + (XS_EntityType*) new;
/* public */ + (XS_EntityType*) ABSTRACT_BASE;
/* public */ - (xs_int) code;
/* public */ - (NSString*) name;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (XS_EntityType*) supertype;
/* public */ - (void) setSupertype :(XS_EntityType*)value;
/* public */ - (XS_EntityTypeList*) subtypes;
/* public */ - (void) setSubtypes :(XS_EntityTypeList*)value;
/* public */ - (xs_boolean) hasSupertype;
/* public */ - (xs_boolean) hasSubtypes;
/* public */ - (xs_boolean) isAbstract;
/* public */ - (void) setIsAbstract :(xs_boolean)value;
/* public */ - (xs_boolean) isOpenType;
/* public */ - (void) setIsOpenType :(xs_boolean)value;
/* public */ - (xs_boolean) isMedia;
/* public */ - (void) setIsMedia :(xs_boolean)value;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_PropertyInfoList*) propertyList;
/* public */ - (void) setPropertyList :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoMap*) propertyMap;
/* public */ - (void) setPropertyMap :(XS_PropertyInfoMap*)value;
/* public */ - (XS_PropertyInfoList*) keyProperties;
/* public */ - (void) setKeyProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) streamProperties;
/* public */ - (void) setStreamProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) complexProperties;
/* public */ - (void) setComplexProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) structuralProperties;
/* public */ - (void) setStructuralProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_PropertyInfoList*) navigationProperties;
/* public */ - (void) setNavigationProperties :(XS_PropertyInfoList*)value;
/* public */ - (XS_CustomPathList*) customPaths;
/* public */ - (void) setCustomPaths :(XS_CustomPathList*)value;
/* public */ - (XS_Annotation*) getAnnotation :(NSString*)term;
/* public */ - (XS_PropertyInfo*) getProperty :(NSString*)param_name;
/* private */ + (XS_EntityType*) DC1 :(XS_PropertyInfoList*)p1 :(XS_CustomPathList*)p2 :(xs_boolean)p3 :(XS_PropertyInfoList*)p4 :(NSString*)p5 :(XS_PropertyInfoList*)p6 :(XS_PropertyInfoList*)p7 :(XS_PropertyInfoMap*)p8 :(NSString*)p9 :(XS_PropertyInfoList*)p10 :(XS_PropertyInfoList*)p11;
@end

@interface XS_EntityTypeList : XS_ListBase
+ (XS_EntityTypeList*) new;
/* public */ - (void) privateInit;
+ (XS_EntityTypeList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_EntityTypeList*) add :(XS_EntityType*)item;
/* public */ - (void) addAll :(XS_EntityTypeList*)other;
/* public */ - (XS_EntityType*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_EntityType*)item;
/* public */ - (xs_boolean) has :(XS_EntityType*)item;
/* public */ - (xs_int) firstIndexOf :(XS_EntityType*)item;
/* public */ - (xs_int) lastIndexOf :(XS_EntityType*)item;
/* public */ - (void) insert :(xs_int)index :(XS_EntityType*)item;
/* public */ - (xs_boolean) remove :(XS_EntityType*)item;
/* public */ - (XS_EntityTypeList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_EntityTypeList*) share :(XS_ListBase*)list;
@end

@interface XS_EntityTypeMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_EntityTypeMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_EntityType*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_EntityType*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_EntityTypeList*) values;
@end

@interface XS_EntityValue : XS_DataValue
{
    @private NSString* my_id_;
    @private xs_long my_key_;
    @private NSString* my_path_;
    @private NSString* my_read_;
    @private NSString* my_edit_;
    @private XS_DataValueList* my_data_;
    @private XS_EntityValue* my_old_;
    @private XS_BooleanList* my_has_;
    @private XS_DataValueMap* my_open_;
    @private XS_EntitySet* my_set_;
    @private XS_EntityType* my_type_;
    @private NSString* my_etag_;
    @private NSString* my_media_type_;
    @private NSString* my_media_etag_;
    @private NSString* my_media_read_;
    @private NSString* my_media_edit_;
    @private XS_DataValueMap* dynamicProperties_;
    @private xs_int systemFlags_;
}
/* protected */ @property (strong) NSString* my_id;
/* protected */ @property xs_long my_key;
/* protected */ @property (strong) NSString* my_path;
/* protected */ @property (strong) NSString* my_read;
/* protected */ @property (strong) NSString* my_edit;
/* protected */ @property (strong) XS_DataValueList* my_data;
/* protected */ @property (strong) XS_EntityValue* my_old;
/* protected */ @property (strong) XS_BooleanList* my_has;
/* protected */ @property (strong) XS_DataValueMap* my_open;
/* protected */ @property (strong) XS_EntitySet* my_set;
/* protected */ @property (strong) XS_EntityType* my_type;
/* protected */ @property (strong) NSString* my_etag;
/* protected */ @property (strong) NSString* my_media_type;
/* protected */ @property (strong) NSString* my_media_etag;
/* protected */ @property (strong) NSString* my_media_read;
/* protected */ @property (strong) NSString* my_media_edit;
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (readonly, strong) XS_EntityType* entityType;
/* public */ @property (strong) XS_DataValueMap* dynamicProperties;
/* public */ @property (readonly, strong) XS_EntitySet* entitySet;
/* public */ @property (strong) NSString* entityId;
/* public */ @property (strong) NSString* valuePath;
/* public */ @property (strong) NSString* entityTag;
/* public */ @property (strong) NSString* readLink;
/* public */ @property (strong) NSString* editLink;
/* public */ @property (strong) NSString* mediaType;
/* public */ @property (strong) NSString* mediaEntityTag;
/* public */ @property (strong) NSString* mediaReadLink;
/* public */ @property (strong) NSString* mediaEditLink;
/* public */ @property xs_long systemKey;
/* public */ @property (readonly, strong) XS_DataValueList* keyValues;
/* public */ @property (strong) XS_EntityValue* oldValues;
/* public */ @property xs_int systemFlags;
/* public */ @property xs_boolean isNew;
/* public */ @property xs_boolean isCreated;
/* public */ @property xs_boolean isUpdated;
/* public */ @property xs_boolean isDeleted;
/* public */ @property xs_boolean isPartial;
/* public */ @property xs_boolean isPending;
/* internal */ @property xs_boolean inSyncTran;
/* internal */ @property xs_boolean inDownload;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* protected */ - (NSString*) my_id;
/* protected */ - (void) setMy_id :(NSString*)value;
/* protected */ - (xs_long) my_key;
/* protected */ - (void) setMy_key :(xs_long)value;
/* protected */ - (NSString*) my_path;
/* protected */ - (void) setMy_path :(NSString*)value;
/* protected */ - (NSString*) my_read;
/* protected */ - (void) setMy_read :(NSString*)value;
/* protected */ - (NSString*) my_edit;
/* protected */ - (void) setMy_edit :(NSString*)value;
/* protected */ - (XS_DataValueList*) my_data;
/* protected */ - (void) setMy_data :(XS_DataValueList*)value;
/* protected */ - (XS_EntityValue*) my_old;
/* protected */ - (void) setMy_old :(XS_EntityValue*)value;
/* protected */ - (XS_BooleanList*) my_has;
/* protected */ - (void) setMy_has :(XS_BooleanList*)value;
/* protected */ - (XS_DataValueMap*) my_open;
/* protected */ - (void) setMy_open :(XS_DataValueMap*)value;
/* protected */ - (XS_EntitySet*) my_set;
/* protected */ - (void) setMy_set :(XS_EntitySet*)value;
/* protected */ - (XS_EntityType*) my_type;
/* protected */ - (void) setMy_type :(XS_EntityType*)value;
/* protected */ - (NSString*) my_etag;
/* protected */ - (void) setMy_etag :(NSString*)value;
/* protected */ - (NSString*) my_media_type;
/* protected */ - (void) setMy_media_type :(NSString*)value;
/* protected */ - (NSString*) my_media_etag;
/* protected */ - (void) setMy_media_etag :(NSString*)value;
/* protected */ - (NSString*) my_media_read;
/* protected */ - (void) setMy_media_read :(NSString*)value;
/* protected */ - (NSString*) my_media_edit;
/* protected */ - (void) setMy_media_edit :(NSString*)value;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_EntityType*) entityType;
/* public */ - (XS_DataValueMap*) dynamicProperties;
/* public */ - (void) setDynamicProperties :(XS_DataValueMap*)value;
/* public */ - (XS_EntitySet*) entitySet;
/* public */ - (NSString*) entityId;
/* public */ - (void) setEntityId :(NSString*)value;
/* public */ - (NSString*) valuePath;
/* public */ - (void) setValuePath :(NSString*)value;
/* public */ - (NSString*) entityTag;
/* public */ - (void) setEntityTag :(NSString*)value;
/* public */ - (NSString*) readLink;
/* public */ - (void) setReadLink :(NSString*)value;
/* public */ - (NSString*) editLink;
/* public */ - (void) setEditLink :(NSString*)value;
/* public */ - (NSString*) mediaType;
/* public */ - (void) setMediaType :(NSString*)value;
/* public */ - (NSString*) mediaEntityTag;
/* public */ - (void) setMediaEntityTag :(NSString*)value;
/* public */ - (NSString*) mediaReadLink;
/* public */ - (void) setMediaReadLink :(NSString*)value;
/* public */ - (NSString*) mediaEditLink;
/* public */ - (void) setMediaEditLink :(NSString*)value;
/* public */ - (xs_long) systemKey;
/* public */ - (void) setSystemKey :(xs_long)value;
/* public */ - (XS_DataValueList*) keyValues;
/* public */ - (XS_EntityValue*) oldValues;
/* public */ - (void) setOldValues :(XS_EntityValue*)value;
/* public */ - (xs_int) systemFlags;
/* public */ - (void) setSystemFlags :(xs_int)value;
/* public */ - (xs_boolean) isNew;
/* public */ - (void) setIsNew :(xs_boolean)value;
/* public */ - (xs_boolean) isCreated;
/* public */ - (void) setIsCreated :(xs_boolean)value;
/* public */ - (xs_boolean) isUpdated;
/* public */ - (void) setIsUpdated :(xs_boolean)value;
/* public */ - (xs_boolean) isDeleted;
/* public */ - (void) setIsDeleted :(xs_boolean)value;
/* public */ - (xs_boolean) isPartial;
/* public */ - (void) setIsPartial :(xs_boolean)value;
/* public */ - (xs_boolean) isPending;
/* public */ - (void) setIsPending :(xs_boolean)value;
/* internal */ - (xs_boolean) inSyncTran;
/* internal */ - (void) setInSyncTran :(xs_boolean)value;
/* internal */ - (xs_boolean) inDownload;
/* internal */ - (void) setInDownload :(xs_boolean)value;
+ (XS_EntityValue*) new;
/* protected */ - (void) privateInit;
+ (XS_EntityValue*) new :(XS_EntityType*)type;
/* protected */ - (void) privateInit :(XS_EntityType*)type;
/* protected */ - (void) init :(XS_EntityType*)type;
/* public */ - (XS_DataValue*) getValue :(XS_PropertyInfo*)pi;
/* public */ - (XS_ListBase*) getList :(XS_PropertyInfo*)pi;
/* public */ - (NSString*) getString :(XS_PropertyInfo*)pi;
/* public */ - (NSData*) getBinary :(XS_PropertyInfo*)pi;
/* public */ - (xs_boolean) getBoolean :(XS_PropertyInfo*)pi;
/* public */ - (xs_char) getChar :(XS_PropertyInfo*)pi;
/* public */ - (xs_byte) getByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_short) getShort :(XS_PropertyInfo*)pi;
/* public */ - (xs_int) getInt :(XS_PropertyInfo*)pi;
/* public */ - (xs_long) getLong :(XS_PropertyInfo*)pi;
/* public */ - (xs_integer) getInteger :(XS_PropertyInfo*)pi;
/* public */ - (xs_decimal) getDecimal :(XS_PropertyInfo*)pi;
/* public */ - (xs_float) getFloat :(XS_PropertyInfo*)pi;
/* public */ - (xs_double) getDouble :(XS_PropertyInfo*)pi;
/* public */ - (xs_int) getUnsignedByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_int) getUnsignedShort :(XS_PropertyInfo*)pi;
/* public */ - (NSString*) getNullableString :(XS_PropertyInfo*)pi;
/* public */ - (NSData*) getNullableBinary :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_boolean) getNullableBoolean :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_char) getNullableChar :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_byte) getNullableByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_short) getNullableShort :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_int) getNullableInt :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_long) getNullableLong :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_integer) getNullableInteger :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_decimal) getNullableDecimal :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_float) getNullableFloat :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_double) getNullableDouble :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_int) getNullableUnsignedByte :(XS_PropertyInfo*)pi;
/* public */ - (xs_nullable_int) getNullableUnsignedShort :(XS_PropertyInfo*)pi;
/* public */ - (XS_ComplexValue*) getComplex :(XS_PropertyInfo*)pi;
/* public */ - (XS_ComplexValueList*) getComplexList :(XS_PropertyInfo*)pi;
/* public */ - (XS_EntityValue*) getEntity :(XS_PropertyInfo*)pi;
/* public */ - (XS_EntityValueList*) getEntityList :(XS_PropertyInfo*)pi;
/* public */ - (XS_LocalDate*) getLocalDate :(XS_PropertyInfo*)pi;
/* public */ - (XS_LocalTime*) getLocalTime :(XS_PropertyInfo*)pi;
/* public */ - (XS_LocalDateTime*) getLocalDateTime :(XS_PropertyInfo*)pi;
/* public */ - (XS_GlobalDateTime*) getGlobalDateTime :(XS_PropertyInfo*)pi;
/* public */ - (XS_DayTimeDuration*) getDayTimeDuration :(XS_PropertyInfo*)pi;
/* public */ - (XS_YearMonthDuration*) getYearMonthDuration :(XS_PropertyInfo*)pi;
/* private */ - (void) checkPropertyGet :(XS_PropertyInfo*)pi :(XS_DataValue*)dv;
/* private */ - (xs_boolean) checkPropertyType :(XS_DataValue*)dv :(XS_PropertyInfo*)pi;
/* public */ - (void) checkPropertySet :(XS_PropertyInfo*)pi :(XS_DataValue*)dv;
/* public */ - (void) setValue :(XS_PropertyInfo*)pi :(XS_DataValue*)value;
/* public */ - (void) setList :(XS_PropertyInfo*)pi :(XS_ListBase*)value;
/* public */ - (void) setString :(XS_PropertyInfo*)pi :(NSString*)value;
/* public */ - (void) setBinary :(XS_PropertyInfo*)pi :(NSData*)value;
/* public */ - (void) setBoolean :(XS_PropertyInfo*)pi :(xs_boolean)value;
/* public */ - (void) setChar :(XS_PropertyInfo*)pi :(xs_char)value;
/* public */ - (void) setByte :(XS_PropertyInfo*)pi :(xs_byte)value;
/* public */ - (void) setShort :(XS_PropertyInfo*)pi :(xs_short)value;
/* public */ - (void) setInt :(XS_PropertyInfo*)pi :(xs_int)value;
/* public */ - (void) setLong :(XS_PropertyInfo*)pi :(xs_long)value;
/* public */ - (void) setInteger :(XS_PropertyInfo*)pi :(xs_integer)value;
/* public */ - (void) setDecimal :(XS_PropertyInfo*)pi :(xs_decimal)value;
/* public */ - (void) setFloat :(XS_PropertyInfo*)pi :(xs_float)value;
/* public */ - (void) setDouble :(XS_PropertyInfo*)pi :(xs_double)value;
/* public */ - (void) setUnsignedByte :(XS_PropertyInfo*)pi :(xs_int)value;
/* public */ - (void) setUnsignedShort :(XS_PropertyInfo*)pi :(xs_int)value;
/* public */ - (void) setNullableString :(XS_PropertyInfo*)pi :(NSString*)value;
/* public */ - (void) setNullableBinary :(XS_PropertyInfo*)pi :(NSData*)value;
/* public */ - (void) setNullableBoolean :(XS_PropertyInfo*)pi :(xs_nullable_boolean)value;
/* public */ - (void) setNullableChar :(XS_PropertyInfo*)pi :(xs_nullable_char)value;
/* public */ - (void) setNullableByte :(XS_PropertyInfo*)pi :(xs_nullable_byte)value;
/* public */ - (void) setNullableShort :(XS_PropertyInfo*)pi :(xs_nullable_short)value;
/* public */ - (void) setNullableInt :(XS_PropertyInfo*)pi :(xs_nullable_int)value;
/* public */ - (void) setNullableLong :(XS_PropertyInfo*)pi :(xs_nullable_long)value;
/* public */ - (void) setNullableInteger :(XS_PropertyInfo*)pi :(xs_nullable_integer)value;
/* public */ - (void) setNullableDecimal :(XS_PropertyInfo*)pi :(xs_nullable_decimal)value;
/* public */ - (void) setNullableFloat :(XS_PropertyInfo*)pi :(xs_nullable_float)value;
/* public */ - (void) setNullableDouble :(XS_PropertyInfo*)pi :(xs_nullable_double)value;
/* public */ - (void) setNullableUnsignedByte :(XS_PropertyInfo*)pi :(xs_nullable_int)value;
/* public */ - (void) setNullableUnsignedShort :(XS_PropertyInfo*)pi :(xs_nullable_int)value;
/* public */ - (void) setComplex :(XS_PropertyInfo*)pi :(XS_ComplexValue*)value;
/* public */ - (void) setComplexList :(XS_PropertyInfo*)pi :(XS_ComplexValueList*)value;
/* public */ - (void) setEntity :(XS_PropertyInfo*)pi :(XS_EntityValue*)value;
/* public */ - (void) setEntityList :(XS_PropertyInfo*)pi :(XS_EntityValueList*)value;
/* public */ - (void) setLocalDate :(XS_PropertyInfo*)pi :(XS_LocalDate*)value;
/* public */ - (void) setLocalTime :(XS_PropertyInfo*)pi :(XS_LocalTime*)value;
/* public */ - (void) setLocalDateTime :(XS_PropertyInfo*)pi :(XS_LocalDateTime*)value;
/* public */ - (void) setGlobalDateTime :(XS_PropertyInfo*)pi :(XS_GlobalDateTime*)value;
/* public */ - (void) setDayTimeDuration :(XS_PropertyInfo*)pi :(XS_DayTimeDuration*)value;
/* public */ - (void) setYearMonthDuration :(XS_PropertyInfo*)pi :(XS_YearMonthDuration*)value;
/* public */ + (XS_EntityValue*) ofType :(XS_EntityType*)type;
/* public */ - (XS_EntityValue*) inSet :(XS_EntitySet*)set;
/* public */ - (XS_StreamLink*) getStreamLink :(XS_PropertyInfo*)pi;
/* public */ - (void) copyKey :(XS_EntityValue*)from;
/* public */ - (xs_boolean) hasKey;
/* public */ - (xs_boolean) hasValue :(XS_PropertyInfo*)pi;
/* public */ + (xs_boolean) equalKeys :(XS_EntityValue*)a :(XS_EntityValue*)b;
/* public */ + (xs_boolean) equal :(XS_EntityValue*)a :(XS_EntityValue*)b;
/* public */ - (NSString*) toString;
/* public */ + (XS_DataValueList*) dataFor :(XS_EntityType*)type;
/* public */ + (XS_BooleanList*) hasInit :(XS_EntityType*)type;
/* public */ - (void) rememberOld;
/* private */ + (XS_StreamLink*) DC1 :(NSString*)p1;
@end

@interface XS_EntityValueList : XS_ListBase
{
    @private XS_DataType* my_type;
    @private XS_ChangedLinkList* changedLinks_;
    @private NSString* deltaLink_;
    @private NSString* nextLink_;
    @private NSString* readLink_;
    @private xs_int totalCount_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_ChangedLinkList* changedLinks;
/* public */ @property (strong) NSString* deltaLink;
/* public */ @property (strong) NSString* nextLink;
/* public */ @property (strong) NSString* readLink;
/* public */ @property xs_int totalCount;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_ChangedLinkList*) changedLinks;
/* public */ - (void) setChangedLinks :(XS_ChangedLinkList*)value;
/* public */ - (NSString*) deltaLink;
/* public */ - (void) setDeltaLink :(NSString*)value;
/* public */ - (NSString*) nextLink;
/* public */ - (void) setNextLink :(NSString*)value;
/* public */ - (NSString*) readLink;
/* public */ - (void) setReadLink :(NSString*)value;
/* public */ - (xs_int) totalCount;
/* public */ - (void) setTotalCount :(xs_int)value;
/* public */ - (XS_EntityValueList*) withType :(XS_DataType*)type;
/* public */ - (XS_EntityValue*) firstNonNull;
+ (XS_EntityValueList*) new;
/* public */ - (void) privateInit;
+ (XS_EntityValueList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_EntityValueList*) add :(XS_EntityValue*)item;
/* public */ - (void) addAll :(XS_EntityValueList*)other;
/* public */ - (XS_EntityValue*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_EntityValue*)item;
/* public */ - (xs_boolean) has :(XS_EntityValue*)item;
/* public */ - (xs_int) firstIndexOf :(XS_EntityValue*)item;
/* public */ - (xs_int) lastIndexOf :(XS_EntityValue*)item;
/* public */ - (void) insert :(xs_int)index :(XS_EntityValue*)item;
/* public */ - (xs_boolean) remove :(XS_EntityValue*)item;
/* public */ - (XS_EntityValueList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_EntityValueList*) share :(XS_ListBase*)list;
@end

@interface XS_ChangedLink : NSObject
{
    @private XS_EntityValue* source_;
    @private XS_PropertyInfo* sourceProperty_;
    @private XS_EntityValue* target_;
    @private xs_boolean isCreated_;
    @private xs_boolean isUpdated_;
    @private xs_boolean isDeleted_;
}
/* public */ @property (strong) XS_EntityValue* source;
/* public */ @property (strong) XS_PropertyInfo* sourceProperty;
/* public */ @property (strong) XS_EntityValue* target;
/* public */ @property xs_boolean isCreated;
/* public */ @property xs_boolean isUpdated;
/* public */ @property xs_boolean isDeleted;
/* private */ - (id) init;
/* public */ + (XS_ChangedLink*) new;
/* public */ - (XS_EntityValue*) source;
/* public */ - (void) setSource :(XS_EntityValue*)value;
/* public */ - (XS_PropertyInfo*) sourceProperty;
/* public */ - (void) setSourceProperty :(XS_PropertyInfo*)value;
/* public */ - (XS_EntityValue*) target;
/* public */ - (void) setTarget :(XS_EntityValue*)value;
/* public */ - (xs_boolean) isCreated;
/* public */ - (void) setIsCreated :(xs_boolean)value;
/* public */ - (xs_boolean) isUpdated;
/* public */ - (void) setIsUpdated :(xs_boolean)value;
/* public */ - (xs_boolean) isDeleted;
/* public */ - (void) setIsDeleted :(xs_boolean)value;
@end

@interface XS_ChangedLinkList : XS_ListBase
+ (XS_ChangedLinkList*) new;
/* public */ - (void) privateInit;
+ (XS_ChangedLinkList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_ChangedLinkList*) add :(XS_ChangedLink*)item;
/* public */ - (void) addAll :(XS_ChangedLinkList*)other;
/* public */ - (XS_ChangedLink*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_ChangedLink*)item;
/* public */ - (xs_boolean) has :(XS_ChangedLink*)item;
/* public */ - (xs_int) firstIndexOf :(XS_ChangedLink*)item;
/* public */ - (xs_int) lastIndexOf :(XS_ChangedLink*)item;
/* public */ - (void) insert :(xs_int)index :(XS_ChangedLink*)item;
/* public */ - (xs_boolean) remove :(XS_ChangedLink*)item;
/* public */ - (XS_ChangedLinkList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_ChangedLinkList*) share :(XS_ListBase*)list;
@end

@interface XS_StreamLink : XS_DataValue
{
    @private NSString* valuePath_;
    @private NSString* mediaType_;
    @private NSString* entityTag_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) NSString* valuePath;
/* public */ @property (strong) NSString* mediaType;
/* public */ @property (strong) NSString* entityTag;
/* private */ - (id) init;
/* public */ + (XS_StreamLink*) new;
/* public */ - (XS_DataType*) dataType;
/* public */ - (NSString*) valuePath;
/* public */ - (void) setValuePath :(NSString*)value;
/* public */ - (NSString*) mediaType;
/* public */ - (void) setMediaType :(NSString*)value;
/* public */ - (NSString*) entityTag;
/* public */ - (void) setEntityTag :(NSString*)value;
/* public */ + (xs_boolean) equal :(XS_StreamLink*)a :(XS_StreamLink*)b;
@end

@interface XS_DataMethod : NSObject
{
    @private NSString* importedName_;
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @private XS_EntitySet* entitySet_;
    @private NSString* httpMethod_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
    @private XS_DataType* returnType_;
    @private XS_ParameterList* parameters_;
    @private xs_boolean isImported_;
    @private xs_boolean isFunction_;
    @private xs_boolean isAction_;
    @private xs_boolean isBound_;
}
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* importedName;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property (strong) XS_EntitySet* entitySet;
/* public */ @property (strong) NSString* httpMethod;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* public */ @property (strong) XS_DataType* returnType;
/* public */ @property (strong) XS_ParameterList* parameters;
/* public */ @property xs_boolean isImported;
/* public */ @property xs_boolean isFunction;
/* public */ @property xs_boolean isAction;
/* public */ @property xs_boolean isBound;
/* private */ - (id) init;
/* public */ + (XS_DataMethod*) new;
/* public */ - (NSString*) name;
/* public */ - (NSString*) importedName;
/* public */ - (void) setImportedName :(NSString*)value;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (XS_EntitySet*) entitySet;
/* public */ - (void) setEntitySet :(XS_EntitySet*)value;
/* public */ - (NSString*) httpMethod;
/* public */ - (void) setHttpMethod :(NSString*)value;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_DataType*) returnType;
/* public */ - (void) setReturnType :(XS_DataType*)value;
/* public */ - (XS_ParameterList*) parameters;
/* public */ - (void) setParameters :(XS_ParameterList*)value;
/* public */ - (xs_boolean) isImported;
/* public */ - (void) setIsImported :(xs_boolean)value;
/* public */ - (xs_boolean) isFunction;
/* public */ - (void) setIsFunction :(xs_boolean)value;
/* public */ - (xs_boolean) isAction;
/* public */ - (void) setIsAction :(xs_boolean)value;
/* public */ - (xs_boolean) isBound;
/* public */ - (void) setIsBound :(xs_boolean)value;
/* public */ - (XS_Annotation*) getAnnotation :(NSString*)term;
/* public */ - (NSString*) toString;
@end

@interface XS_DataMethodList : XS_ListBase
+ (XS_DataMethodList*) new;
/* public */ - (void) privateInit;
+ (XS_DataMethodList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_DataMethodList*) add :(XS_DataMethod*)item;
/* public */ - (void) addAll :(XS_DataMethodList*)other;
/* public */ - (XS_DataMethod*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_DataMethod*)item;
/* public */ - (xs_boolean) has :(XS_DataMethod*)item;
/* public */ - (xs_int) firstIndexOf :(XS_DataMethod*)item;
/* public */ - (xs_int) lastIndexOf :(XS_DataMethod*)item;
/* public */ - (void) insert :(xs_int)index :(XS_DataMethod*)item;
/* public */ - (xs_boolean) remove :(XS_DataMethod*)item;
/* public */ - (XS_DataMethodList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_DataMethodList*) share :(XS_ListBase*)list;
@end

@interface XS_DataMethodMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_DataMethodMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_DataMethod*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_DataMethod*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_DataMethodList*) values;
@end

@interface XS_EntityContainer : NSObject
{
    @private NSString* localName_;
    @private NSString* qualifiedName_;
    @private XS_DataSchema* __weak parentSchema_;
    @private XS_EntityContainer* baseContainer_;
    @private xs_boolean isDefault_;
    @protected XS_DataMethodMap* dataMethods_;
    @protected XS_EntitySetMap* entitySets_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
}
/* public */ @property (readonly, strong) NSString* name;
/* public */ @property (strong) NSString* localName;
/* public */ @property (strong) NSString* qualifiedName;
/* public */ @property (weak) XS_DataSchema* parentSchema;
/* public */ @property (strong) XS_EntityContainer* baseContainer;
/* public */ @property xs_boolean isDefault;
/* public */ @property (readonly, strong) XS_DataMethodMap* dataMethods;
/* public */ @property (readonly, strong) XS_EntitySetMap* entitySets;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* private */ - (id) init;
/* public */ + (XS_EntityContainer*) new;
/* public */ - (NSString*) name;
/* public */ - (NSString*) localName;
/* public */ - (void) setLocalName :(NSString*)value;
/* public */ - (NSString*) qualifiedName;
/* public */ - (void) setQualifiedName :(NSString*)value;
/* public */ - (XS_DataSchema*) parentSchema;
/* public */ - (void) setParentSchema :(XS_DataSchema*)value;
/* public */ - (XS_EntityContainer*) baseContainer;
/* public */ - (void) setBaseContainer :(XS_EntityContainer*)value;
/* public */ - (xs_boolean) isDefault;
/* public */ - (void) setIsDefault :(xs_boolean)value;
/* public */ - (XS_DataMethodMap*) dataMethods;
/* public */ - (XS_EntitySetMap*) entitySets;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
@end

@interface XS_EntityContainerList : XS_ListBase
+ (XS_EntityContainerList*) new;
/* public */ - (void) privateInit;
+ (XS_EntityContainerList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_EntityContainerList*) add :(XS_EntityContainer*)item;
/* public */ - (void) addAll :(XS_EntityContainerList*)other;
/* public */ - (XS_EntityContainer*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_EntityContainer*)item;
/* public */ - (xs_boolean) has :(XS_EntityContainer*)item;
/* public */ - (xs_int) firstIndexOf :(XS_EntityContainer*)item;
/* public */ - (xs_int) lastIndexOf :(XS_EntityContainer*)item;
/* public */ - (void) insert :(xs_int)index :(XS_EntityContainer*)item;
/* public */ - (xs_boolean) remove :(XS_EntityContainer*)item;
/* public */ - (XS_EntityContainerList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_EntityContainerList*) share :(XS_ListBase*)list;
@end

@interface XS_EntityContainerMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_EntityContainerMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_EntityContainer*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_EntityContainer*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_EntityContainerList*) values;
@end

@interface XS_DataSchema : NSObject
{
    @private NSString* name_;
    @private NSString* alias_;
    @protected XS_DataMethodMap* dataMethods_;
    @protected XS_SimpleTypeMap* simpleTypes_;
    @protected XS_ComplexTypeMap* complexTypes_;
    @protected XS_EntityTypeMap* entityTypes_;
    @protected XS_EntitySetMap* entitySets_;
    @protected XS_EntityContainerMap* entityContainers_;
    @protected XS_AnnotationTermMap* annotationTerms_;
    @protected XS_AnnotationList* annotationList_;
    @protected XS_AnnotationMap* annotationMap_;
}
/* public */ @property (strong) NSString* name;
/* public */ @property (strong) NSString* alias;
/* public */ @property (readonly, strong) XS_DataMethodMap* dataMethods;
/* public */ @property (readonly, strong) XS_SimpleTypeMap* simpleTypes;
/* public */ @property (readonly, strong) XS_ComplexTypeMap* complexTypes;
/* public */ @property (readonly, strong) XS_EntityTypeMap* entityTypes;
/* public */ @property (readonly, strong) XS_EntitySetMap* entitySets;
/* public */ @property (readonly, strong) XS_EntityContainerMap* entityContainers;
/* public */ @property (readonly, strong) XS_AnnotationTermMap* annotationTerms;
/* public */ @property (readonly, strong) XS_AnnotationList* annotationList;
/* public */ @property (readonly, strong) XS_AnnotationMap* annotationMap;
/* private */ - (id) init;
/* public */ + (XS_DataSchema*) new;
/* public */ - (NSString*) name;
/* public */ - (void) setName :(NSString*)value;
/* public */ - (NSString*) alias;
/* public */ - (void) setAlias :(NSString*)value;
/* public */ - (XS_DataMethodMap*) dataMethods;
/* public */ - (XS_SimpleTypeMap*) simpleTypes;
/* public */ - (XS_ComplexTypeMap*) complexTypes;
/* public */ - (XS_EntityTypeMap*) entityTypes;
/* public */ - (XS_EntitySetMap*) entitySets;
/* public */ - (XS_EntityContainerMap*) entityContainers;
/* public */ - (XS_AnnotationTermMap*) annotationTerms;
/* public */ - (XS_AnnotationList*) annotationList;
/* public */ - (XS_AnnotationMap*) annotationMap;
/* public */ - (XS_DataMethod*) getDataMethod :(NSString*)param_name;
/* public */ - (XS_DataType*) getSimpleType :(NSString*)param_name;
/* public */ - (XS_ComplexType*) getComplexType :(NSString*)param_name;
/* public */ - (XS_EntityType*) getEntityType :(NSString*)param_name;
/* public */ - (XS_EntitySet*) getEntitySet :(NSString*)param_name;
@end

@interface XS_DataSchemaList : XS_ListBase
+ (XS_DataSchemaList*) new;
/* public */ - (void) privateInit;
+ (XS_DataSchemaList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_DataSchemaList*) add :(XS_DataSchema*)item;
/* public */ - (void) addAll :(XS_DataSchemaList*)other;
/* public */ - (XS_DataSchema*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_DataSchema*)item;
/* public */ - (xs_boolean) has :(XS_DataSchema*)item;
/* public */ - (xs_int) firstIndexOf :(XS_DataSchema*)item;
/* public */ - (xs_int) lastIndexOf :(XS_DataSchema*)item;
/* public */ - (void) insert :(xs_int)index :(XS_DataSchema*)item;
/* public */ - (xs_boolean) remove :(XS_DataSchema*)item;
/* public */ - (XS_DataSchemaList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_DataSchemaList*) share :(XS_ListBase*)list;
@end

@interface XS_DataSchemaMap : NSObject
{
    @public NSMutableDictionary* map;
}
/* public */ @property (readonly) xs_int count;
/* private */ - (id) init;
/* public */ + (XS_DataSchemaMap*) new;
/* public */ - (xs_int) count;
/* public */ - (void) clear;
/* public */ - (XS_DataSchema*) get :(NSString*)key;
/* public */ - (void) set :(NSString*)key :(XS_DataSchema*)value;
/* public */ - (xs_boolean) has :(NSString*)key;
/* public */ - (xs_boolean) remove :(NSString*)key;
/* public */ - (XS_StringList*) keys;
/* public */ - (XS_DataSchemaList*) values;
@end

@interface XS_MethodCall : NSObject
{
    @private XS_DataMethod* method_;
    @private XS_ParameterList* parameters_;
}
/* public */ @property (strong) XS_DataMethod* method;
/* public */ @property (strong) XS_ParameterList* parameters;
/* private */ - (id) init;
/* public */ + (XS_MethodCall*) new;
/* public */ - (XS_DataMethod*) method;
/* public */ - (void) setMethod :(XS_DataMethod*)value;
/* public */ - (XS_ParameterList*) parameters;
/* public */ - (void) setParameters :(XS_ParameterList*)value;
/* public */ + (XS_MethodCall*) apply :(XS_DataMethod*)param_method :(XS_ParameterList*)param_parameters;
/* private */ + (XS_MethodCall*) DC1 :(XS_DataMethod*)p1 :(XS_ParameterList*)p2;
@end

@interface XS_PathValue : XS_DataValue
{
    @private XS_PathValue* parent_;
    @private NSString* path_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_PathValue* parent;
/* public */ @property (strong) NSString* path;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ + (XS_PathValue*) new;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PathValue*) parent;
/* public */ - (void) setParent :(XS_PathValue*)value;
/* public */ - (NSString*) path;
/* public */ - (void) setPath :(NSString*)value;
/* public */ + (XS_PathValue*) parse :(NSString*)text;
/* public */ - (NSString*) toString;
/* private */ + (XS_PathValue*) DC1 :(XS_PathValue*)p1 :(NSString*)p2;
/* private */ + (XS_PathValue*) DC2 :(NSString*)p1;
@end

@interface XS_AnnotationPath : XS_DataValue
{
    @private XS_PathValue* value_;
}
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* public */ @property (strong) XS_PathValue* value;
/* private */ - (id) init;
/* private */ + (void) initialize;
/* public */ + (XS_AnnotationPath*) new;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
/* public */ - (XS_PathValue*) value;
/* public */ - (void) setValue :(XS_PathValue*)value;
/* public */ - (NSString*) toString;
@end

@interface XS_PropertyPath : XS_DataValue
{
    @private XS_PathValue* value_;
}
/* public */ @property (strong) XS_PathValue* value;
/* private */ - (id) init;
/* public */ + (XS_PropertyPath*) new;
/* public */ - (XS_PathValue*) value;
/* public */ - (void) setValue :(XS_PathValue*)value;
/* public */ - (NSString*) toString;
@end

@interface XS_StructuralPropertyPath : XS_PropertyPath
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ + (void) initialize;
/* public */ + (XS_StructuralPropertyPath*) new;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
@end

@interface XS_NavigationPropertyPath : XS_PropertyPath
/* public */ @property (readonly, strong) XS_DataType* dataType;
/* private */ + (void) initialize;
/* public */ + (XS_NavigationPropertyPath*) new;
/* private */ + (XS_DataType*) TYPE;
/* public */ - (XS_DataType*) dataType;
@end

/* internal */ @interface XS_SystemKey : NSObject
/* private */ + (void) initialize;
/* public */ + (XS_PropertyInfo*) part1Property;
/* public */ + (XS_PropertyInfo*) part2Property;
/* public */ + (xs_long) build :(xs_int)sk1 :(xs_short)sk2;
/* public */ + (xs_int) part1 :(xs_long)sk;
/* public */ + (xs_short) part2 :(xs_long)sk;
/* private */ + (XS_PropertyInfo*) DC1 :(NSString*)p1 :(NSString*)p2 :(XS_DataType*)p3;
@end

@interface XS_DeltaStream : NSObject
{
    @private xs_boolean closed_;
    @private id myDeltaItem_;
    @private NSString* myDeltaLink_;
    @private NSString* myNextLink_;
    @private NSString* myReadLink_;
}
/* protected */ @property xs_boolean closed;
/* protected */ @property (strong) id myDeltaItem;
/* protected */ @property (strong) NSString* myDeltaLink;
/* protected */ @property (strong) NSString* myNextLink;
/* protected */ @property (strong) NSString* myReadLink;
/* public */ @property (readonly) xs_boolean isClosed;
/* public */ @property (readonly, strong) NSString* deltaLink;
/* public */ @property (readonly, strong) NSString* nextLink;
/* public */ @property (readonly, strong) NSString* readLink;
/* private */ - (id) init;
/* public */ + (XS_DeltaStream*) new;
/* protected */ - (xs_boolean) closed;
/* protected */ - (void) setClosed :(xs_boolean)value;
/* protected */ - (id) myDeltaItem;
/* protected */ - (void) setMyDeltaItem :(id)value;
/* protected */ - (NSString*) myDeltaLink;
/* protected */ - (void) setMyDeltaLink :(NSString*)value;
/* protected */ - (NSString*) myNextLink;
/* protected */ - (void) setMyNextLink :(NSString*)value;
/* protected */ - (NSString*) myReadLink;
/* protected */ - (void) setMyReadLink :(NSString*)value;
/* public */ - (xs_boolean) isClosed;
/* public */ - (NSString*) deltaLink;
/* public */ - (NSString*) nextLink;
/* public */ - (NSString*) readLink;
/* public */ - (void) abort;
/* public */ - (void) close;
/* public */ - (xs_boolean) next;
/* public */ - (xs_boolean) hasCurrent;
/* public */ - (xs_boolean) hasEntity;
/* public */ - (xs_boolean) hasLink;
/* public */ - (id) getCurrent;
/* public */ - (XS_EntityValue*) getEntity;
/* public */ - (XS_ChangedLink*) getLink;
@end

@interface XS_StatementCache : NSObject
{
    @private id insertStatement_;
    @private id deleteStatement_;
}
/* public */ @property (strong) id insertStatement;
/* public */ @property (strong) id deleteStatement;
/* private */ - (id) init;
/* public */ + (XS_StatementCache*) new;
/* public */ - (id) insertStatement;
/* public */ - (void) setInsertStatement :(id)value;
/* public */ - (id) deleteStatement;
/* public */ - (void) setDeleteStatement :(id)value;
@end

@interface XS_DataFormat : NSObject
/* public */ + (NSString*) getName :(xs_int)format;
@end

#define XS_DataFormat_ATOM 1
#define XS_DataFormat_JSON 2
#define XS_DataFormat_HTML 3

@interface XS_DataContext : NSObject
{
    @private XS_ObjectArray* entityStack;
    @private xs_int versionCode_;
    @private xs_int bindOptions_;
}
/* public */ @property xs_int versionCode;
/* public */ @property xs_int bindOptions;
/* private */ - (id) init;
/* public */ + (XS_DataContext*) new;
/* public */ - (xs_int) versionCode;
/* public */ - (void) setVersionCode :(xs_int)value;
/* public */ - (xs_int) bindOptions;
/* public */ - (void) setBindOptions :(xs_int)value;
/* public */ - (XS_DeferredValue*) getDeferred :(XS_DataType*)dataType :(XS_EntitySet*)entitySet :(NSString*)location;
/* public */ - (id) getDocument :(XS_DataType*)dataType :(NSString*)location;
/* public */ - (XS_DataType*) resolveAnyType :(NSString*)name;
/* public */ - (XS_ComplexType*) getComplexType :(NSString*)name;
/* public */ - (XS_EntityType*) getEntityType :(NSString*)name;
/* public */ - (XS_EntitySet*) getEntitySet :(NSString*)name;
/* public */ - (NSString*) getServiceRoot;
/* public */ - (NSString*) makeRelative :(NSString*)url;
/* public */ - (XS_DataContext*) forEntity :(XS_EntitySet*)entitySet;
/* public */ - (void) pushEntity :(XS_EntitySet*)entitySet;
/* public */ - (void) popEntity;
/* public */ - (XS_EntitySet*) topEntity;
/* public */ + (XS_ComplexType*) findActualComplex :(XS_ComplexType*)formalType :(NSString*)typeName;
/* public */ + (XS_EntityType*) findActualEntity :(XS_EntityType*)formalType :(NSString*)typeName;
/* protected */ - (NSString*) topRelative :(NSString*)url;
@end

#define XS_DataContext_KEY_ONLY 1
#define XS_DataContext_KEY_AND_CHANGES 2

@interface XS_DeferredValue : XS_DataValue
/* public */ + (XS_DeferredValue*) new;
/* public */ - (XS_DataValue*) resolve;
@end

@interface XS_ErrorResponse : NSObject
{
    @private NSString* code_;
    @private NSString* message_;
    @private NSString* language_;
    @private NSString* target_;
    @private XS_ErrorResponseList* details_;
    @private NSString* innerError_;
}
/* public */ @property (strong) NSString* code;
/* public */ @property (strong) NSString* message;
/* public */ @property (strong) NSString* language;
/* public */ @property (strong) NSString* target;
/* public */ @property (strong) XS_ErrorResponseList* details;
/* public */ @property (strong) NSString* innerError;
/* private */ - (id) init;
/* public */ + (XS_ErrorResponse*) new;
/* public */ - (NSString*) code;
/* public */ - (void) setCode :(NSString*)value;
/* public */ - (NSString*) message;
/* public */ - (void) setMessage :(NSString*)value;
/* public */ - (NSString*) language;
/* public */ - (void) setLanguage :(NSString*)value;
/* public */ - (NSString*) target;
/* public */ - (void) setTarget :(NSString*)value;
/* public */ - (XS_ErrorResponseList*) details;
/* public */ - (void) setDetails :(XS_ErrorResponseList*)value;
/* public */ - (NSString*) innerError;
/* public */ - (void) setInnerError :(NSString*)value;
@end

@interface XS_ErrorResponseList : XS_ListBase
+ (XS_ErrorResponseList*) new;
/* public */ - (void) privateInit;
+ (XS_ErrorResponseList*) new :(xs_int)capacity;
/* public */ - (void) privateInit :(xs_int)capacity;
/* public */ - (XS_ErrorResponseList*) add :(XS_ErrorResponse*)item;
/* public */ - (void) addAll :(XS_ErrorResponseList*)other;
/* public */ - (XS_ErrorResponse*) get :(xs_int)index;
/* public */ - (void) set :(xs_int)index :(XS_ErrorResponse*)item;
/* public */ - (xs_boolean) has :(XS_ErrorResponse*)item;
/* public */ - (xs_int) firstIndexOf :(XS_ErrorResponse*)item;
/* public */ - (xs_int) lastIndexOf :(XS_ErrorResponse*)item;
/* public */ - (void) insert :(xs_int)index :(XS_ErrorResponse*)item;
/* public */ - (xs_boolean) remove :(XS_ErrorResponse*)item;
/* public */ - (XS_ErrorResponseList*) slice :(xs_int)start :(xs_int)end;
/* public */ + (XS_ErrorResponseList*) share :(XS_ListBase*)list;
@end

@interface XS_UrlConventions : NSObject
/* public */ + (NSString*) makeRelative :(NSString*)url :(NSString*)path;
/* public */ + (NSString*) entityReference :(XS_EntityValue*)entity :(XS_DataContext*)context;
/* public */ + (NSString*) formatAbsolute :(XS_EntityValue*)entity :(XS_DataContext*)context;
/* public */ + (NSString*) formatCanonical :(XS_EntityValue*)entity :(XS_DataContext*)context;
/* public */ + (NSString*) formatEntityKey :(XS_EntityValue*)entity :(XS_DataContext*)context;
/* public */ + (NSString*) formatKeyValues :(XS_EntityType*)entityType :(XS_DataValueList*)keyValues :(XS_DataContext*)context;
/* public */ + (NSString*) formatDataValue :(XS_DataValue*)value :(XS_DataContext*)context;
/* public */ + (XS_EntityValue*) parseCanonical :(NSString*)url :(XS_DataContext*)context;
/* public */ + (XS_DataValue*) parseDataValue :(NSString*)value :(XS_DataType*)type :(XS_DataContext*)context;
/* private */ + (xs_int) firstUnquotedPos :(xs_char)c :(NSString*)s;
/* private */ + (xs_int) lastUnquotedPos :(xs_char)c :(NSString*)s;
/* private */ + (XS_StringList*) getUnquotedParts :(xs_char)c :(NSString*)s;
/* private */ + (NSString*) singleQuotedText :(NSString*)text;
/* private */ + (NSString*) removeQuotesFrom :(NSString*)text;
/* private */ + (NSString*) removeTypeSuffix :(NSString*)text :(xs_char)lowerSuffix :(xs_char)upperSuffix;
/* private */ + (NSString*) textBetweenQuotes :(NSString*)text;
@end

@interface XS_LoginCredentials : NSObject
{
    @private NSString* username_;
    @private NSString* password_;
}
/* public */ @property (strong) NSString* username;
/* public */ @property (strong) NSString* password;
/* private */ - (id) init;
/* public */ + (XS_LoginCredentials*) new;
/* public */ - (NSString*) username;
/* public */ - (void) setUsername :(NSString*)value;
/* public */ - (NSString*) password;
/* public */ - (void) setPassword :(NSString*)value;
/* public */ + (XS_LoginCredentials*) getBasic :(NSString*)param_username :(NSString*)param_password;
/* private */ + (XS_LoginCredentials*) DC1 :(NSString*)p1 :(NSString*)p2;
@end

#endif
